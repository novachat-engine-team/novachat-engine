// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.proto

package data_chat

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	fs "novachat_engine/service/data/fs"
	restriction "novachat_engine/service/data/restriction"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChatLink struct {
	Link         string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	ChatId       int64  `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	CreateUserId int64  `protobuf:"varint,3,opt,name=create_user_id,json=createUserId,proto3" json:"create_user_id,omitempty"`
	UtilDate     int64  `protobuf:"varint,4,opt,name=util_date,json=utilDate,proto3" json:"util_date,omitempty"`
}

func (m *ChatLink) Reset()         { *m = ChatLink{} }
func (m *ChatLink) String() string { return proto.CompactTextString(m) }
func (*ChatLink) ProtoMessage()    {}
func (*ChatLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}
func (m *ChatLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatLink.Merge(m, src)
}
func (m *ChatLink) XXX_Size() int {
	return m.Size()
}
func (m *ChatLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatLink.DiscardUnknown(m)
}

var xxx_messageInfo_ChatLink proto.InternalMessageInfo

func (m *ChatLink) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ChatLink) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatLink) GetCreateUserId() int64 {
	if m != nil {
		return m.CreateUserId
	}
	return 0
}

func (m *ChatLink) GetUtilDate() int64 {
	if m != nil {
		return m.UtilDate
	}
	return 0
}

type Chat struct {
	ChatId            int64                            `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty" bson:"_id"`
	Title             string                           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" bson:"title"`
	Photo             *fs.PhotoProfile                 `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty" bson:"photo"`
	Creator           int64                            `protobuf:"varint,4,opt,name=creator,proto3" json:"creator,omitempty" bson:"creator"`
	Date              int32                            `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty" bson:"date"`
	Verified          bool                             `protobuf:"varint,7,opt,name=verified,proto3" json:"verified,omitempty" bson:"verified"`
	Scam              bool                             `protobuf:"varint,8,opt,name=scam,proto3" json:"scam,omitempty" bson:"scam"`
	AccessHash        int64                            `protobuf:"varint,9,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty" bson:"access_hash"`
	BannedRights      int32                            `protobuf:"varint,10,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty" bson:"banned_rights"`
	GeoPoint          *fs.GeoPoint                     `protobuf:"bytes,11,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty" bson:"geo_point"`
	RestrictionReason []*restriction.RestrictionReason `protobuf:"bytes,12,rep,name=restriction_reason,json=restrictionReason,proto3" json:"restriction_reason,omitempty" bson:"restriction_reason"`
	RightsUtilDate    int32                            `protobuf:"varint,13,opt,name=rights_util_date,json=rightsUtilDate,proto3" json:"rights_util_date,omitempty" bson:"rights_util_date"`
	Deleted           bool                             `protobuf:"varint,14,opt,name=deleted,proto3" json:"deleted,omitempty" bson:"deleted"`
	About             string                           `protobuf:"bytes,15,opt,name=about,proto3" json:"about,omitempty" bson:"about"`
	ChatSizeMax       int32                            `protobuf:"varint,16,opt,name=chat_size_max,json=chatSizeMax,proto3" json:"chat_size_max,omitempty" bson:"chat_size_max"`
	Username          string                           `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty" bson:"username"`
	Address           string                           `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty" bson:"address"`
	Broadcast         bool                             `protobuf:"varint,19,opt,name=broadcast,proto3" json:"broadcast,omitempty" bson:"broadcast"`
	Link              []*ChatLink                      `protobuf:"bytes,20,rep,name=link,proto3" json:"link,omitempty" bson:"link"`
	HiddenHistory     bool                             `protobuf:"varint,21,opt,name=hidden_history,json=hiddenHistory,proto3" json:"hidden_history,omitempty" bson:"hidden_history"`
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}
func (*Chat) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}
func (m *Chat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chat.Merge(m, src)
}
func (m *Chat) XXX_Size() int {
	return m.Size()
}
func (m *Chat) XXX_DiscardUnknown() {
	xxx_messageInfo_Chat.DiscardUnknown(m)
}

var xxx_messageInfo_Chat proto.InternalMessageInfo

func (m *Chat) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *Chat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Chat) GetPhoto() *fs.PhotoProfile {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *Chat) GetCreator() int64 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *Chat) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Chat) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Chat) GetScam() bool {
	if m != nil {
		return m.Scam
	}
	return false
}

func (m *Chat) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *Chat) GetBannedRights() int32 {
	if m != nil {
		return m.BannedRights
	}
	return 0
}

func (m *Chat) GetGeoPoint() *fs.GeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *Chat) GetRestrictionReason() []*restriction.RestrictionReason {
	if m != nil {
		return m.RestrictionReason
	}
	return nil
}

func (m *Chat) GetRightsUtilDate() int32 {
	if m != nil {
		return m.RightsUtilDate
	}
	return 0
}

func (m *Chat) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Chat) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *Chat) GetChatSizeMax() int32 {
	if m != nil {
		return m.ChatSizeMax
	}
	return 0
}

func (m *Chat) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Chat) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Chat) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *Chat) GetLink() []*ChatLink {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Chat) GetHiddenHistory() bool {
	if m != nil {
		return m.HiddenHistory
	}
	return false
}

func init() {
	proto.RegisterType((*ChatLink)(nil), "data_chat.ChatLink")
	proto.RegisterType((*Chat)(nil), "data_chat.Chat")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x54, 0xcd, 0x8e, 0x23, 0x35,
	0x10, 0x9e, 0x26, 0xc9, 0x4e, 0xe2, 0xfc, 0x4c, 0xc6, 0x99, 0x61, 0xbd, 0x33, 0x22, 0x1d, 0x79,
	0x11, 0xe4, 0x00, 0x19, 0x69, 0x38, 0x80, 0x56, 0xac, 0x84, 0x9a, 0x45, 0xec, 0x4a, 0x20, 0x8d,
	0x8c, 0xf6, 0xc2, 0xa5, 0xe5, 0x74, 0x3b, 0x69, 0x6b, 0x93, 0x76, 0x68, 0x3b, 0x68, 0xd9, 0x27,
	0xe0, 0xc8, 0x91, 0x2b, 0xf3, 0x34, 0x1c, 0xe7, 0x09, 0x5a, 0x30, 0x27, 0x8e, 0xa8, 0x9f, 0x60,
	0xe5, 0x72, 0x27, 0xe9, 0x64, 0x6e, 0x5d, 0xdf, 0xf7, 0xb9, 0x5c, 0x55, 0xfe, 0xba, 0x10, 0x8a,
	0x12, 0x6e, 0x26, 0xab, 0x4c, 0x19, 0x85, 0x5b, 0x31, 0x37, 0x3c, 0xb4, 0xc0, 0xc5, 0xe7, 0x73,
	0x69, 0x92, 0xf5, 0x74, 0x12, 0xa9, 0xe5, 0xd5, 0x5c, 0xcd, 0xd5, 0x15, 0x28, 0xa6, 0xeb, 0x19,
	0x44, 0x10, 0xc0, 0x97, 0x3b, 0x79, 0x31, 0x58, 0x25, 0xca, 0xa8, 0x70, 0x95, 0xa9, 0x99, 0x5c,
	0x88, 0x12, 0xec, 0xcd, 0x85, 0x5a, 0x29, 0x99, 0x96, 0xe9, 0x2f, 0x48, 0x26, 0xb4, 0xc9, 0x64,
	0x64, 0xa4, 0x4a, 0xc3, 0x4c, 0x70, 0xad, 0x52, 0xc7, 0xd0, 0xdf, 0x3d, 0xd4, 0xfc, 0x36, 0xe1,
	0xe6, 0x07, 0x99, 0xbe, 0xc1, 0x18, 0xd5, 0x17, 0x32, 0x7d, 0x43, 0xbc, 0x91, 0x37, 0x6e, 0x31,
	0xf8, 0xc6, 0x8f, 0xd1, 0xb1, 0x2d, 0x2b, 0x94, 0x31, 0xf9, 0x60, 0xe4, 0x8d, 0x6b, 0xec, 0x91,
	0x0d, 0x5f, 0xc5, 0xf8, 0x63, 0xd4, 0x8b, 0x32, 0xc1, 0x8d, 0x08, 0xd7, 0x5a, 0x64, 0x96, 0xaf,
	0x01, 0xdf, 0x71, 0xe8, 0x6b, 0x2d, 0xb2, 0x57, 0x31, 0xbe, 0x44, 0xad, 0xb5, 0x91, 0x8b, 0x30,
	0xe6, 0x46, 0x90, 0x3a, 0x08, 0x9a, 0x16, 0x78, 0xc1, 0x8d, 0x78, 0xd6, 0xb9, 0xfb, 0xcb, 0x3f,
	0xfa, 0xe3, 0xd6, 0x3f, 0xfa, 0xf3, 0xd6, 0x3f, 0xa2, 0xff, 0x35, 0x51, 0xdd, 0x96, 0x82, 0x3f,
	0xdd, 0x5d, 0x69, 0x2b, 0xa9, 0x05, 0xbd, 0x22, 0xf7, 0xd1, 0x54, 0xab, 0xf4, 0x19, 0x0d, 0x65,
	0x4c, 0xb7, 0x25, 0x7c, 0x82, 0x1a, 0x46, 0x9a, 0x85, 0x80, 0xca, 0x5a, 0x41, 0xbf, 0xc8, 0xfd,
	0x8e, 0x93, 0x01, 0x4c, 0x99, 0xa3, 0xf1, 0x73, 0xd4, 0x80, 0x29, 0x41, 0x85, 0xed, 0xeb, 0xf3,
	0x09, 0x4c, 0x7b, 0xa6, 0x27, 0x37, 0x16, 0xbd, 0x71, 0xa3, 0xab, 0x1e, 0x07, 0x35, 0x65, 0xee,
	0x14, 0xfe, 0x0c, 0x1d, 0x43, 0x4f, 0x2a, 0x73, 0x1d, 0x04, 0xb8, 0xc8, 0xfd, 0x9e, 0x53, 0x96,
	0x04, 0x65, 0x1b, 0x09, 0x7e, 0x8a, 0xea, 0xd0, 0x6c, 0x63, 0xe4, 0x8d, 0x1b, 0xc1, 0x49, 0x91,
	0xfb, 0x6d, 0x27, 0xb5, 0x28, 0x65, 0x40, 0xe2, 0x2b, 0xd4, 0xfc, 0x55, 0x64, 0x72, 0x26, 0x45,
	0x4c, 0x8e, 0x47, 0xde, 0xb8, 0x19, 0x0c, 0x8a, 0xdc, 0x3f, 0x71, 0xc2, 0x0d, 0x43, 0xd9, 0x56,
	0x64, 0xb3, 0xea, 0x88, 0x2f, 0x49, 0x13, 0xc4, 0x95, 0xac, 0x16, 0xa5, 0x0c, 0x48, 0xfc, 0x25,
	0x6a, 0xf3, 0x28, 0x12, 0x5a, 0x87, 0x09, 0xd7, 0x09, 0x69, 0x41, 0xb1, 0x1f, 0x16, 0xb9, 0x8f,
	0x9d, 0xb6, 0x42, 0x52, 0x86, 0x5c, 0xf4, 0x92, 0xeb, 0x04, 0x3f, 0x47, 0xdd, 0x29, 0x4f, 0x53,
	0x11, 0x87, 0x99, 0x9c, 0x27, 0x46, 0x13, 0x04, 0xc5, 0x93, 0x22, 0xf7, 0xcf, 0xdc, 0xd1, 0x3d,
	0x9a, 0xb2, 0x8e, 0x8b, 0x19, 0x84, 0xf8, 0x05, 0x6a, 0xcd, 0x85, 0x0a, 0xc1, 0x71, 0xa4, 0x0d,
	0x33, 0x3e, 0xdd, 0xce, 0xf8, 0x7b, 0xa1, 0x6e, 0x2c, 0x11, 0x9c, 0x15, 0xb9, 0xdf, 0x77, 0xd9,
	0xb6, 0x6a, 0xca, 0x9a, 0xf3, 0x92, 0xc7, 0xbf, 0x20, 0xfc, 0xd0, 0xa6, 0xa4, 0x33, 0xaa, 0x8d,
	0xdb, 0xd7, 0x4f, 0x5d, 0xba, 0x0a, 0x3f, 0x61, 0xbb, 0x6f, 0x06, 0xd2, 0xe0, 0xa3, 0x22, 0xf7,
	0x9f, 0xb8, 0x0b, 0x1e, 0x26, 0xa2, 0xec, 0x34, 0x3b, 0x3c, 0x81, 0xbf, 0x43, 0x7d, 0xd7, 0x51,
	0xb8, 0x33, 0x69, 0x17, 0x5a, 0xbf, 0x2c, 0x72, 0xff, 0x71, 0x99, 0xeb, 0x40, 0x41, 0x59, 0xcf,
	0x41, 0xaf, 0x4b, 0x1f, 0x5b, 0x83, 0xc4, 0x62, 0x21, 0x8c, 0x88, 0x49, 0x0f, 0xde, 0xa7, 0x62,
	0x90, 0x92, 0xa0, 0x6c, 0x23, 0xb1, 0xae, 0xe5, 0x53, 0xb5, 0x36, 0xe4, 0xe4, 0xd0, 0xb5, 0x00,
	0x53, 0xe6, 0x68, 0xfc, 0x35, 0xea, 0xc2, 0x6f, 0xa0, 0xe5, 0x3b, 0x11, 0x2e, 0xf9, 0x5b, 0xd2,
	0x3f, 0x7c, 0x94, 0x3d, 0x9a, 0xb2, 0xb6, 0x8d, 0x7f, 0x92, 0xef, 0xc4, 0x8f, 0xfc, 0xad, 0x75,
	0x98, 0xfd, 0x2f, 0x53, 0xbe, 0x14, 0xe4, 0x14, 0x2e, 0xaa, 0x38, 0x6c, 0xc3, 0x50, 0xb6, 0x15,
	0xd9, 0x26, 0x78, 0x1c, 0x67, 0x42, 0x6b, 0x82, 0x41, 0x5f, 0x69, 0xa2, 0x24, 0x28, 0xdb, 0x48,
	0xf0, 0x35, 0x6a, 0x4d, 0x33, 0xc5, 0xe3, 0x88, 0x6b, 0x43, 0x06, 0xd0, 0x74, 0xe5, 0x7d, 0xb7,
	0x14, 0x65, 0x3b, 0x19, 0xfe, 0xaa, 0x5c, 0x2f, 0x67, 0xf0, 0xa4, 0x83, 0xc9, 0x76, 0xe7, 0x4d,
	0x36, 0x1b, 0xa8, 0x6a, 0x6c, 0x2b, 0xa5, 0xe5, 0x12, 0xfa, 0x06, 0xf5, 0x12, 0x19, 0xc7, 0x22,
	0x0d, 0x13, 0xa9, 0x8d, 0xca, 0x7e, 0x23, 0xe7, 0x70, 0xe5, 0x93, 0x22, 0xf7, 0xcf, 0x9d, 0x7c,
	0x9f, 0xa7, 0xac, 0xeb, 0x80, 0x97, 0x2e, 0xde, 0x5f, 0x35, 0xc1, 0xe5, 0xff, 0xff, 0x0e, 0xbd,
	0xbf, 0xef, 0x87, 0xde, 0xdd, 0xfd, 0xd0, 0xfb, 0xe7, 0x7e, 0xe8, 0xfd, 0xbc, 0x5b, 0xc0, 0xd3,
	0x47, 0xb0, 0x19, 0xbf, 0x78, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xa7, 0xd8, 0xca, 0xa0, 0x05,
	0x00, 0x00,
}

func (this *ChatLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&data_chat.ChatLink{")
	s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "CreateUserId: "+fmt.Sprintf("%#v", this.CreateUserId)+",\n")
	s = append(s, "UtilDate: "+fmt.Sprintf("%#v", this.UtilDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Chat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&data_chat.Chat{")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Photo != nil {
		s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	}
	s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "Verified: "+fmt.Sprintf("%#v", this.Verified)+",\n")
	s = append(s, "Scam: "+fmt.Sprintf("%#v", this.Scam)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "BannedRights: "+fmt.Sprintf("%#v", this.BannedRights)+",\n")
	if this.GeoPoint != nil {
		s = append(s, "GeoPoint: "+fmt.Sprintf("%#v", this.GeoPoint)+",\n")
	}
	if this.RestrictionReason != nil {
		s = append(s, "RestrictionReason: "+fmt.Sprintf("%#v", this.RestrictionReason)+",\n")
	}
	s = append(s, "RightsUtilDate: "+fmt.Sprintf("%#v", this.RightsUtilDate)+",\n")
	s = append(s, "Deleted: "+fmt.Sprintf("%#v", this.Deleted)+",\n")
	s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	s = append(s, "ChatSizeMax: "+fmt.Sprintf("%#v", this.ChatSizeMax)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Broadcast: "+fmt.Sprintf("%#v", this.Broadcast)+",\n")
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	s = append(s, "HiddenHistory: "+fmt.Sprintf("%#v", this.HiddenHistory)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChat(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ChatLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UtilDate != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.UtilDate))
		i--
		dAtA[i] = 0x20
	}
	if m.CreateUserId != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.CreateUserId))
		i--
		dAtA[i] = 0x18
	}
	if m.ChatId != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintChat(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Chat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HiddenHistory {
		i--
		if m.HiddenHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Link) > 0 {
		for iNdEx := len(m.Link) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Link[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.Broadcast {
		i--
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintChat(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintChat(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ChatSizeMax != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.ChatSizeMax))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintChat(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.RightsUtilDate != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.RightsUtilDate))
		i--
		dAtA[i] = 0x68
	}
	if len(m.RestrictionReason) > 0 {
		for iNdEx := len(m.RestrictionReason) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RestrictionReason[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.GeoPoint != nil {
		{
			size, err := m.GeoPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.BannedRights != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.BannedRights))
		i--
		dAtA[i] = 0x50
	}
	if m.AccessHash != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x48
	}
	if m.Scam {
		i--
		if m.Scam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Date != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x28
	}
	if m.Creator != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.Creator))
		i--
		dAtA[i] = 0x20
	}
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintChat(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChatId != 0 {
		i = encodeVarintChat(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChat(dAtA []byte, offset int, v uint64) int {
	offset -= sovChat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChatLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.ChatId != 0 {
		n += 1 + sovChat(uint64(m.ChatId))
	}
	if m.CreateUserId != 0 {
		n += 1 + sovChat(uint64(m.CreateUserId))
	}
	if m.UtilDate != 0 {
		n += 1 + sovChat(uint64(m.UtilDate))
	}
	return n
}

func (m *Chat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovChat(uint64(m.ChatId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Creator != 0 {
		n += 1 + sovChat(uint64(m.Creator))
	}
	if m.Date != 0 {
		n += 1 + sovChat(uint64(m.Date))
	}
	if m.Verified {
		n += 2
	}
	if m.Scam {
		n += 2
	}
	if m.AccessHash != 0 {
		n += 1 + sovChat(uint64(m.AccessHash))
	}
	if m.BannedRights != 0 {
		n += 1 + sovChat(uint64(m.BannedRights))
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	if len(m.RestrictionReason) > 0 {
		for _, e := range m.RestrictionReason {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	if m.RightsUtilDate != 0 {
		n += 1 + sovChat(uint64(m.RightsUtilDate))
	}
	if m.Deleted {
		n += 2
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.ChatSizeMax != 0 {
		n += 2 + sovChat(uint64(m.ChatSizeMax))
	}
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	if m.Broadcast {
		n += 3
	}
	if len(m.Link) > 0 {
		for _, e := range m.Link {
			l = e.Size()
			n += 2 + l + sovChat(uint64(l))
		}
	}
	if m.HiddenHistory {
		n += 3
	}
	return n
}

func sovChat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChat(x uint64) (n int) {
	return sovChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateUserId", wireType)
			}
			m.CreateUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilDate", wireType)
			}
			m.UtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &fs.PhotoProfile{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scam = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedRights", wireType)
			}
			m.BannedRights = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BannedRights |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &fs.GeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionReason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionReason = append(m.RestrictionReason, &restriction.RestrictionReason{})
			if err := m.RestrictionReason[len(m.RestrictionReason)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightsUtilDate", wireType)
			}
			m.RightsUtilDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightsUtilDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatSizeMax", wireType)
			}
			m.ChatSizeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatSizeMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = append(m.Link, &ChatLink{})
			if err := m.Link[len(m.Link)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HiddenHistory = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChat = fmt.Errorf("proto: unexpected end of group")
)
