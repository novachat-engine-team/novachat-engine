// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat_participant.proto

package data_chat

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParticipantState int32

const (
	ParticipantState_ParticipantStateNormal ParticipantState = 0
	ParticipantState_ParticipantStateLeft   ParticipantState = 1
	ParticipantState_ParticipantStateBan    ParticipantState = 2
	ParticipantState_ParticipantStateDelete ParticipantState = 3
)

var ParticipantState_name = map[int32]string{
	0: "ParticipantStateNormal",
	1: "ParticipantStateLeft",
	2: "ParticipantStateBan",
	3: "ParticipantStateDelete",
}

var ParticipantState_value = map[string]int32{
	"ParticipantStateNormal": 0,
	"ParticipantStateLeft":   1,
	"ParticipantStateBan":    2,
	"ParticipantStateDelete": 3,
}

func (x ParticipantState) String() string {
	return proto.EnumName(ParticipantState_name, int32(x))
}

func (ParticipantState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1a44a7a0a0ac5982, []int{0}
}

type ChatParticipant struct {
	ChatParticipantKey string           `protobuf:"bytes,1,opt,name=chat_participant_key,json=chatParticipantKey,proto3" json:"chat_participant_key,omitempty" bson:"_id"`
	ChatId             int64            `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty" bson:"chat_id"`
	UserId             int64            `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id"`
	InviteId           int64            `protobuf:"varint,4,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty" bson:"invite_id"`
	Date               int32            `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty" bson:"date"`
	Admin              bool             `protobuf:"varint,6,opt,name=admin,proto3" json:"admin,omitempty" bson:"admin"`
	AdminRights        int32            `protobuf:"varint,7,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty" bson:"admin_rights"`
	State              ParticipantState `protobuf:"varint,8,opt,name=state,proto3,enum=data_chat.ParticipantState" json:"state,omitempty" bson:"state"`
	Rights             int32            `protobuf:"varint,9,opt,name=rights,proto3" json:"rights,omitempty" bson:"rights"`
}

func (m *ChatParticipant) Reset()         { *m = ChatParticipant{} }
func (m *ChatParticipant) String() string { return proto.CompactTextString(m) }
func (*ChatParticipant) ProtoMessage()    {}
func (*ChatParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a44a7a0a0ac5982, []int{0}
}
func (m *ChatParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatParticipant.Merge(m, src)
}
func (m *ChatParticipant) XXX_Size() int {
	return m.Size()
}
func (m *ChatParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_ChatParticipant proto.InternalMessageInfo

func (m *ChatParticipant) GetChatParticipantKey() string {
	if m != nil {
		return m.ChatParticipantKey
	}
	return ""
}

func (m *ChatParticipant) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ChatParticipant) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ChatParticipant) GetInviteId() int64 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *ChatParticipant) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ChatParticipant) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *ChatParticipant) GetAdminRights() int32 {
	if m != nil {
		return m.AdminRights
	}
	return 0
}

func (m *ChatParticipant) GetState() ParticipantState {
	if m != nil {
		return m.State
	}
	return ParticipantState_ParticipantStateNormal
}

func (m *ChatParticipant) GetRights() int32 {
	if m != nil {
		return m.Rights
	}
	return 0
}

func init() {
	proto.RegisterEnum("data_chat.ParticipantState", ParticipantState_name, ParticipantState_value)
	proto.RegisterType((*ChatParticipant)(nil), "data_chat.ChatParticipant")
}

func init() { proto.RegisterFile("chat_participant.proto", fileDescriptor_1a44a7a0a0ac5982) }

var fileDescriptor_1a44a7a0a0ac5982 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x75, 0xcd, 0x5a, 0xaf, 0x74, 0xc1, 0xab, 0xb6, 0x68, 0x93, 0xea, 0xc8, 0x48,
	0x28, 0x80, 0xe8, 0x04, 0xdc, 0x7a, 0x42, 0x19, 0x97, 0x0a, 0x84, 0x90, 0xb9, 0x71, 0x89, 0xdc,
	0xda, 0x4b, 0x2c, 0xd6, 0xa4, 0x4a, 0x5c, 0xa4, 0x1d, 0xf8, 0x0e, 0x1c, 0xb9, 0xb2, 0x4f, 0xc3,
	0x71, 0x9f, 0x20, 0x82, 0x5e, 0xb8, 0xa2, 0x7c, 0x02, 0x64, 0x3b, 0xac, 0x25, 0xec, 0xf6, 0xde,
	0xfb, 0xff, 0xfe, 0xef, 0xff, 0x94, 0x18, 0x1e, 0xcd, 0x13, 0xa6, 0xa2, 0x25, 0xcb, 0x95, 0x9c,
	0xcb, 0x25, 0x4b, 0xd5, 0x78, 0x99, 0x67, 0x2a, 0x43, 0x3d, 0xce, 0x14, 0x8b, 0xb4, 0x78, 0xf2,
	0x34, 0x96, 0x2a, 0x59, 0xcd, 0xc6, 0xf3, 0x6c, 0x71, 0x16, 0x67, 0x71, 0x76, 0x66, 0x88, 0xd9,
	0xea, 0xc2, 0x74, 0xa6, 0x31, 0x95, 0x75, 0x92, 0x5f, 0x6d, 0x78, 0x70, 0x9e, 0x30, 0xf5, 0x6e,
	0xb3, 0x13, 0xbd, 0x84, 0xc3, 0x66, 0x4e, 0xf4, 0x51, 0x5c, 0x79, 0xc0, 0x07, 0x41, 0x2f, 0x1c,
	0x54, 0x25, 0x86, 0xb3, 0x22, 0x4b, 0x27, 0x24, 0x92, 0x9c, 0x50, 0x34, 0xff, 0xd7, 0xfe, 0x5a,
	0x5c, 0xa1, 0x27, 0x70, 0xcf, 0x6c, 0x90, 0xdc, 0xdb, 0xf1, 0x41, 0xd0, 0x0e, 0x51, 0x55, 0xe2,
	0x81, 0x35, 0xd5, 0x02, 0xa1, 0x8e, 0xae, 0xa6, 0x5c, 0xc3, 0xab, 0x42, 0xe4, 0x1a, 0x6e, 0x37,
	0xe1, 0x5a, 0x20, 0xd4, 0xd1, 0xd5, 0x94, 0xa3, 0x67, 0xb0, 0x27, 0xd3, 0x4f, 0x52, 0x09, 0x8d,
	0xef, 0x1a, 0x7c, 0x58, 0x95, 0xd8, 0xb5, 0xf8, 0xad, 0x44, 0x68, 0xd7, 0xd6, 0x53, 0x8e, 0x1e,
	0xc0, 0x5d, 0xce, 0x94, 0xf0, 0x3a, 0x3e, 0x08, 0x3a, 0xe1, 0x41, 0x55, 0xe2, 0x7d, 0x4b, 0xeb,
	0x29, 0xa1, 0x46, 0x44, 0x0f, 0x61, 0x87, 0xf1, 0x85, 0x4c, 0x3d, 0xc7, 0x07, 0x41, 0x37, 0x74,
	0xab, 0x12, 0xf7, 0x2d, 0x65, 0xc6, 0x84, 0x5a, 0x19, 0x4d, 0x60, 0xdf, 0x14, 0x51, 0x2e, 0xe3,
	0x44, 0x15, 0xde, 0x9e, 0x59, 0x7a, 0x5c, 0x95, 0xf8, 0x70, 0x0b, 0xaf, 0x55, 0x42, 0xf7, 0x4d,
	0x4b, 0x4d, 0x87, 0xce, 0x61, 0xa7, 0x50, 0xfa, 0x92, 0xae, 0x0f, 0x82, 0xc1, 0xf3, 0xd3, 0xf1,
	0xed, 0x5f, 0x1b, 0x6f, 0x7d, 0xbf, 0xf7, 0x1a, 0xd9, 0x3e, 0xc0, 0x78, 0x08, 0xb5, 0x5e, 0xf4,
	0x08, 0x3a, 0x75, 0x74, 0xcf, 0x44, 0xdf, 0xaf, 0x4a, 0x7c, 0xcf, 0x82, 0x7f, 0x43, 0x6b, 0x60,
	0xd2, 0xbf, 0xf9, 0x86, 0x5b, 0x5f, 0xae, 0x71, 0xeb, 0xeb, 0x35, 0x6e, 0x3d, 0xfe, 0x0c, 0xdd,
	0x66, 0x0a, 0x3a, 0x81, 0x47, 0xcd, 0xd9, 0xdb, 0x2c, 0x5f, 0xb0, 0x4b, 0xb7, 0x85, 0x3c, 0x38,
	0x6c, 0x6a, 0x6f, 0xc4, 0x85, 0x72, 0x01, 0x3a, 0x86, 0x87, 0xff, 0xdd, 0xcb, 0x52, 0x77, 0xe7,
	0xae, 0x75, 0xaf, 0xc4, 0xa5, 0x50, 0xc2, 0x6d, 0x87, 0xa7, 0xbf, 0x7f, 0x8e, 0xc0, 0xf7, 0xf5,
	0x08, 0xdc, 0xac, 0x47, 0xe0, 0xc7, 0x7a, 0x04, 0x3e, 0x6c, 0x1e, 0xed, 0xcc, 0x31, 0x8f, 0xf1,
	0xc5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x15, 0x5f, 0xbb, 0xe0, 0x02, 0x00, 0x00,
}

func (this *ChatParticipant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&data_chat.ChatParticipant{")
	s = append(s, "ChatParticipantKey: "+fmt.Sprintf("%#v", this.ChatParticipantKey)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "InviteId: "+fmt.Sprintf("%#v", this.InviteId)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "Admin: "+fmt.Sprintf("%#v", this.Admin)+",\n")
	s = append(s, "AdminRights: "+fmt.Sprintf("%#v", this.AdminRights)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Rights: "+fmt.Sprintf("%#v", this.Rights)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChatParticipant(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ChatParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rights != 0 {
		i = encodeVarintChatParticipant(dAtA, i, uint64(m.Rights))
		i--
		dAtA[i] = 0x48
	}
	if m.State != 0 {
		i = encodeVarintChatParticipant(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.AdminRights != 0 {
		i = encodeVarintChatParticipant(dAtA, i, uint64(m.AdminRights))
		i--
		dAtA[i] = 0x38
	}
	if m.Admin {
		i--
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Date != 0 {
		i = encodeVarintChatParticipant(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x28
	}
	if m.InviteId != 0 {
		i = encodeVarintChatParticipant(dAtA, i, uint64(m.InviteId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != 0 {
		i = encodeVarintChatParticipant(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.ChatId != 0 {
		i = encodeVarintChatParticipant(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChatParticipantKey) > 0 {
		i -= len(m.ChatParticipantKey)
		copy(dAtA[i:], m.ChatParticipantKey)
		i = encodeVarintChatParticipant(dAtA, i, uint64(len(m.ChatParticipantKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatParticipant(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatParticipant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChatParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatParticipantKey)
	if l > 0 {
		n += 1 + l + sovChatParticipant(uint64(l))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatParticipant(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatParticipant(uint64(m.UserId))
	}
	if m.InviteId != 0 {
		n += 1 + sovChatParticipant(uint64(m.InviteId))
	}
	if m.Date != 0 {
		n += 1 + sovChatParticipant(uint64(m.Date))
	}
	if m.Admin {
		n += 2
	}
	if m.AdminRights != 0 {
		n += 1 + sovChatParticipant(uint64(m.AdminRights))
	}
	if m.State != 0 {
		n += 1 + sovChatParticipant(uint64(m.State))
	}
	if m.Rights != 0 {
		n += 1 + sovChatParticipant(uint64(m.Rights))
	}
	return n
}

func sovChatParticipant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatParticipant(x uint64) (n int) {
	return sovChatParticipant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatParticipant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatParticipantKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatParticipantKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			m.AdminRights = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminRights |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ParticipantState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
			m.Rights = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rights |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatParticipant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatParticipant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatParticipant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatParticipant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatParticipant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatParticipant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatParticipant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatParticipant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatParticipant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatParticipant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatParticipant = fmt.Errorf("proto: unexpected end of group")
)
