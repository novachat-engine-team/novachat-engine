// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat_config.proto

package data_chat

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChatsConfig struct {
	ChatIdKey string `protobuf:"bytes,1,opt,name=chat_id_key,json=chatIdKey,proto3" json:"chat_id_key,omitempty" bson:"_id"`
	ChatId    int64  `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty" bson:"chat_id"`
}

func (m *ChatsConfig) Reset()         { *m = ChatsConfig{} }
func (m *ChatsConfig) String() string { return proto.CompactTextString(m) }
func (*ChatsConfig) ProtoMessage()    {}
func (*ChatsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0683025b313c244, []int{0}
}
func (m *ChatsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatsConfig.Merge(m, src)
}
func (m *ChatsConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChatsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChatsConfig proto.InternalMessageInfo

func (m *ChatsConfig) GetChatIdKey() string {
	if m != nil {
		return m.ChatIdKey
	}
	return ""
}

func (m *ChatsConfig) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func init() {
	proto.RegisterType((*ChatsConfig)(nil), "data_chat.ChatsConfig")
}

func init() { proto.RegisterFile("chat_config.proto", fileDescriptor_d0683025b313c244) }

var fileDescriptor_d0683025b313c244 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0x48, 0x2c,
	0x89, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c,
	0x49, 0x2c, 0x49, 0x8c, 0x07, 0x89, 0x4b, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25,
	0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0x55, 0x24, 0x95, 0xa6, 0x81, 0x79, 0x60,
	0x0e, 0x98, 0x05, 0xd1, 0xa9, 0x54, 0xc1, 0xc5, 0xed, 0x9c, 0x91, 0x58, 0x52, 0xec, 0x0c, 0x36,
	0x4e, 0x48, 0x8f, 0x8b, 0x1b, 0x6c, 0x7a, 0x66, 0x4a, 0x7c, 0x76, 0x6a, 0xa5, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0xa7, 0x13, 0xdf, 0xa7, 0x7b, 0xf2, 0x5c, 0x49, 0xc5, 0xf9, 0x79, 0x56, 0x4a, 0xf1,
	0x99, 0x29, 0x4a, 0x41, 0x9c, 0x20, 0x25, 0x9e, 0x29, 0xde, 0xa9, 0x95, 0x42, 0xda, 0x5c, 0xec,
	0x50, 0xf5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x4e, 0x42, 0x9f, 0xee, 0xc9, 0xf3, 0x41, 0xd4,
	0x42, 0x25, 0x94, 0x82, 0xd8, 0x20, 0xea, 0xad, 0x78, 0x2e, 0x2c, 0x94, 0x67, 0x98, 0xb0, 0x48,
	0x9e, 0x61, 0xc6, 0x22, 0x79, 0x06, 0x27, 0xe9, 0x0f, 0x0f, 0xe5, 0x18, 0x4f, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x28, 0x84, 0x2f, 0x92, 0xd8, 0xc0, 0xae,
	0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xf3, 0x11, 0xca, 0xec, 0x00, 0x00, 0x00,
}

func (this *ChatsConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&data_chat.ChatsConfig{")
	s = append(s, "ChatIdKey: "+fmt.Sprintf("%#v", this.ChatIdKey)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChatConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ChatsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		i = encodeVarintChatConfig(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChatIdKey) > 0 {
		i -= len(m.ChatIdKey)
		copy(dAtA[i:], m.ChatIdKey)
		i = encodeVarintChatConfig(dAtA, i, uint64(len(m.ChatIdKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChatsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatIdKey)
	if l > 0 {
		n += 1 + l + sovChatConfig(uint64(l))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatConfig(uint64(m.ChatId))
	}
	return n
}

func sovChatConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatConfig(x uint64) (n int) {
	return sovChatConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIdKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatIdKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatConfig = fmt.Errorf("proto: unexpected end of group")
)
