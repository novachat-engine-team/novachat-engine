// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_box.proto

package data_message

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageBox struct {
	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	UserId    int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id"`
	RandomId  int64   `protobuf:"varint,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty" bson:"random_id"`
	MessageId []int32 `protobuf:"varint,4,rep,packed,name=message_id,json=messageId,proto3" json:"message_id,omitempty" bson:"message_id"`
	Pts       []int32 `protobuf:"varint,5,rep,packed,name=pts,proto3" json:"pts,omitempty" bson:"pts"`
	PeerId    int64   `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty" bson:"peer_id"`
}

func (m *MessageBox) Reset()         { *m = MessageBox{} }
func (m *MessageBox) String() string { return proto.CompactTextString(m) }
func (*MessageBox) ProtoMessage()    {}
func (*MessageBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e1dd983e1653bc9, []int{0}
}
func (m *MessageBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBox.Merge(m, src)
}
func (m *MessageBox) XXX_Size() int {
	return m.Size()
}
func (m *MessageBox) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBox.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBox proto.InternalMessageInfo

func (m *MessageBox) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageBox) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MessageBox) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *MessageBox) GetMessageId() []int32 {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *MessageBox) GetPts() []int32 {
	if m != nil {
		return m.Pts
	}
	return nil
}

func (m *MessageBox) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func init() {
	proto.RegisterType((*MessageBox)(nil), "data_message.MessageBox")
}

func init() { proto.RegisterFile("message_box.proto", fileDescriptor_8e1dd983e1653bc9) }

var fileDescriptor_8e1dd983e1653bc9 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3d, 0x4e, 0xc3, 0x30,
	0x1c, 0xc5, 0xeb, 0x84, 0x06, 0x62, 0x55, 0x15, 0xb5, 0x40, 0x8a, 0x18, 0xec, 0xc8, 0x53, 0x24,
	0x44, 0x2b, 0x04, 0x53, 0xc7, 0x6c, 0x19, 0x58, 0x3c, 0xb2, 0x44, 0x09, 0x0e, 0xc1, 0x43, 0xea,
	0x28, 0x4e, 0xa4, 0x1e, 0x83, 0x91, 0x0d, 0xd1, 0xd3, 0x30, 0xf6, 0x04, 0x11, 0xe4, 0x04, 0x28,
	0x27, 0x40, 0xb1, 0xc3, 0xe7, 0xf6, 0x9e, 0xdf, 0xef, 0x49, 0xcf, 0x7f, 0xb8, 0x28, 0x32, 0xa5,
	0x92, 0x3c, 0x8b, 0x53, 0xb9, 0x5d, 0x96, 0x95, 0xac, 0x25, 0x9a, 0xf1, 0xa4, 0x4e, 0xe2, 0xf1,
	0xfd, 0xec, 0x22, 0x17, 0xf5, 0x43, 0x93, 0x2e, 0xef, 0x64, 0xb1, 0xca, 0x65, 0x2e, 0x57, 0x1a,
	0x4a, 0x9b, 0x7b, 0xed, 0xb4, 0xd1, 0xca, 0x94, 0xe9, 0xb3, 0x05, 0xe1, 0x8d, 0xa9, 0x86, 0x72,
	0x8b, 0x30, 0xb4, 0x04, 0xf7, 0x80, 0x0f, 0x02, 0x37, 0x9c, 0xf7, 0x2d, 0x81, 0xa9, 0x92, 0x9b,
	0x35, 0x8d, 0x05, 0xa7, 0xcc, 0x12, 0x1c, 0x9d, 0xc3, 0xc3, 0x46, 0x65, 0x55, 0x2c, 0xb8, 0x67,
	0xf9, 0x20, 0xb0, 0x43, 0xd4, 0xb7, 0x64, 0x6e, 0xa0, 0x31, 0xa0, 0xcc, 0x19, 0x54, 0xc4, 0xd1,
	0x25, 0x74, 0xab, 0x64, 0xc3, 0x65, 0x31, 0xe0, 0xb6, 0xc6, 0x4f, 0xfa, 0x96, 0x1c, 0x1b, 0xfc,
	0x3b, 0xa2, 0xec, 0xc8, 0xe8, 0x88, 0xa3, 0x6b, 0x08, 0xbf, 0x3e, 0x28, 0xb8, 0x77, 0xe0, 0xdb,
	0xc1, 0x34, 0x3c, 0xed, 0x5b, 0xb2, 0x30, 0x9d, 0x9f, 0x8c, 0x32, 0x77, 0x34, 0x11, 0x47, 0x3e,
	0xb4, 0xcb, 0x5a, 0x79, 0x53, 0x8d, 0xff, 0x9a, 0x5d, 0xd6, 0x8a, 0xb2, 0x21, 0x1a, 0x76, 0x97,
	0x99, 0xd9, 0xed, 0xfc, 0xdf, 0x3d, 0x06, 0x94, 0x39, 0x83, 0x8a, 0xf8, 0x7a, 0xb6, 0x7f, 0x21,
	0x93, 0xc7, 0x1d, 0x99, 0x3c, 0xed, 0xc8, 0x24, 0xc4, 0x1f, 0xef, 0x18, 0xbc, 0x76, 0x18, 0xec,
	0x3b, 0x0c, 0xde, 0x3a, 0x0c, 0x6e, 0xff, 0x1c, 0x3c, 0x75, 0xf4, 0x21, 0xaf, 0x3e, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xdb, 0x97, 0x2e, 0xbc, 0x9a, 0x01, 0x00, 0x00,
}

func (this *MessageBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&data_message.MessageBox{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "RandomId: "+fmt.Sprintf("%#v", this.RandomId)+",\n")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "Pts: "+fmt.Sprintf("%#v", this.Pts)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessageBox(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MessageBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerId != 0 {
		i = encodeVarintMessageBox(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Pts) > 0 {
		dAtA2 := make([]byte, len(m.Pts)*10)
		var j1 int
		for _, num1 := range m.Pts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMessageBox(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MessageId) > 0 {
		dAtA4 := make([]byte, len(m.MessageId)*10)
		var j3 int
		for _, num1 := range m.MessageId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMessageBox(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.RandomId != 0 {
		i = encodeVarintMessageBox(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintMessageBox(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessageBox(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageBox(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageBox(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessageBox(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMessageBox(uint64(m.UserId))
	}
	if m.RandomId != 0 {
		n += 1 + sovMessageBox(uint64(m.RandomId))
	}
	if len(m.MessageId) > 0 {
		l = 0
		for _, e := range m.MessageId {
			l += sovMessageBox(uint64(e))
		}
		n += 1 + sovMessageBox(uint64(l)) + l
	}
	if len(m.Pts) > 0 {
		l = 0
		for _, e := range m.Pts {
			l += sovMessageBox(uint64(e))
		}
		n += 1 + sovMessageBox(uint64(l)) + l
	}
	if m.PeerId != 0 {
		n += 1 + sovMessageBox(uint64(m.PeerId))
	}
	return n
}

func sovMessageBox(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageBox(x uint64) (n int) {
	return sovMessageBox(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageBox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageBox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessageBox
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MessageId = append(m.MessageId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessageBox
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessageBox
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessageBox
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MessageId) == 0 {
					m.MessageId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessageBox
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MessageId = append(m.MessageId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessageBox
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pts = append(m.Pts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessageBox
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessageBox
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessageBox
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pts) == 0 {
					m.Pts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessageBox
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pts = append(m.Pts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessageBox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageBox
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessageBox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageBox(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageBox
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageBox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageBox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageBox
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageBox
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageBox
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageBox        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageBox          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageBox = fmt.Errorf("proto: unexpected end of group")
)
