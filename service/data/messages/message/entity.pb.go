// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity.proto

package data_message

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Entity struct {
	Type       int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	Offset     int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" bson:"offset"`
	Length     int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty" bson:"length"`
	Language   string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty" bson:"language"`
	Url        string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty" bson:"url"`
	UserId     int64  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id"`
	PeerId     int64  `protobuf:"varint,7,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty" bson:"peer_id"`
	PeerType   int32  `protobuf:"varint,8,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty" bson:"peer_type"`
	AccessHash int64  `protobuf:"varint,9,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty" bson:"access_hash"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{0}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Entity) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Entity) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Entity) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Entity) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Entity) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Entity) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *Entity) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *Entity) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func init() {
	proto.RegisterType((*Entity)(nil), "data_message.Entity")
}

func init() { proto.RegisterFile("entity.proto", fileDescriptor_cf50d946d740d100) }

var fileDescriptor_cf50d946d740d100 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd1, 0xb1, 0x6e, 0xe2, 0x30,
	0x18, 0x07, 0x70, 0x7c, 0x81, 0x00, 0x86, 0x83, 0x3b, 0xdf, 0xe9, 0x14, 0xdd, 0x10, 0x47, 0xee,
	0x42, 0x55, 0x15, 0x54, 0x75, 0xa8, 0xc4, 0x18, 0xa9, 0x52, 0x59, 0xad, 0x4e, 0x5d, 0x90, 0x43,
	0x4c, 0x82, 0x14, 0x12, 0x14, 0x3b, 0x03, 0x6f, 0xd1, 0xb1, 0x6b, 0x19, 0xfb, 0x24, 0x1d, 0x79,
	0x82, 0xa8, 0xe5, 0x09, 0xaa, 0x3c, 0x41, 0x65, 0x3b, 0xaa, 0x28, 0xdb, 0xf7, 0x7d, 0xff, 0x9f,
	0x13, 0xf9, 0x33, 0xec, 0xf3, 0x54, 0xae, 0xe4, 0x76, 0xbc, 0xc9, 0x33, 0x99, 0xa1, 0x7e, 0xc8,
	0x24, 0x9b, 0xaf, 0xb9, 0x10, 0x2c, 0xe2, 0xff, 0x2f, 0xa3, 0x95, 0x8c, 0x8b, 0x60, 0xbc, 0xc8,
	0xd6, 0x93, 0x28, 0x8b, 0xb2, 0x89, 0x46, 0x41, 0xb1, 0xd4, 0x9d, 0x6e, 0x74, 0x65, 0x0e, 0x93,
	0x17, 0x0b, 0xda, 0xb7, 0xfa, 0x6b, 0xe8, 0x0c, 0x36, 0xe5, 0x76, 0xc3, 0x1d, 0xe0, 0x81, 0x51,
	0xcb, 0x1f, 0x56, 0x25, 0xee, 0x05, 0x22, 0x4b, 0xa7, 0x44, 0x4d, 0x09, 0xd5, 0x21, 0x3a, 0x87,
	0x76, 0xb6, 0x5c, 0x0a, 0x2e, 0x9d, 0x1f, 0x9a, 0xfd, 0xae, 0x4a, 0xfc, 0xd3, 0x30, 0x33, 0x27,
	0xb4, 0x06, 0x8a, 0x26, 0x3c, 0x8d, 0x64, 0xec, 0x58, 0xa7, 0xd4, 0xcc, 0x09, 0xad, 0x01, 0x9a,
	0xc0, 0x4e, 0xc2, 0xd2, 0xa8, 0x60, 0x11, 0x77, 0x9a, 0x1e, 0x18, 0x75, 0xfd, 0x3f, 0x55, 0x89,
	0x87, 0x35, 0xae, 0x13, 0x42, 0xbf, 0x10, 0xf2, 0xa0, 0x55, 0xe4, 0x89, 0xd3, 0xd2, 0x76, 0x50,
	0x95, 0x18, 0x1a, 0x5b, 0xe4, 0x09, 0xa1, 0x2a, 0x42, 0x17, 0xb0, 0x5d, 0x08, 0x9e, 0xcf, 0x57,
	0xa1, 0x63, 0x7b, 0x60, 0x64, 0xf9, 0xa8, 0x2a, 0xf1, 0xa0, 0x56, 0x26, 0x20, 0xd4, 0x56, 0xd5,
	0x2c, 0x54, 0x78, 0xc3, 0x0d, 0x6e, 0x9f, 0xe2, 0x3a, 0x20, 0xd4, 0x56, 0xd5, 0x2c, 0x44, 0x57,
	0xb0, 0xab, 0x67, 0x7a, 0x59, 0x1d, 0x7d, 0xb5, 0xbf, 0x55, 0x89, 0x7f, 0x1d, 0x71, 0xb3, 0xb1,
	0x8e, 0xaa, 0xef, 0xd5, 0xd6, 0x6e, 0x60, 0x8f, 0x2d, 0x16, 0x5c, 0x88, 0x79, 0xcc, 0x44, 0xec,
	0x74, 0xf5, 0x3f, 0xfe, 0x55, 0x25, 0x46, 0xe6, 0xd0, 0x51, 0x48, 0x28, 0x34, 0xdd, 0x1d, 0x13,
	0xf1, 0xb4, 0xbf, 0x7f, 0xc6, 0x8d, 0xc7, 0x1d, 0x6e, 0x3c, 0xed, 0x70, 0xc3, 0x77, 0x3f, 0xde,
	0x5d, 0xf0, 0x7a, 0x70, 0xc1, 0xfe, 0xe0, 0x82, 0xb7, 0x83, 0x0b, 0x1e, 0xbe, 0xbd, 0x7d, 0x60,
	0xeb, 0x37, 0xbd, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xe7, 0x3a, 0x8d, 0x20, 0x02, 0x00,
	0x00,
}

func (this *Entity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&data_message.Entity{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "Language: "+fmt.Sprintf("%#v", this.Language)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEntity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x48
	}
	if m.PeerType != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x40
	}
	if m.PeerId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x38
	}
	if m.UserId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x22
	}
	if m.Length != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEntity(uint64(m.Type))
	}
	if m.Offset != 0 {
		n += 1 + sovEntity(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovEntity(uint64(m.Length))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovEntity(uint64(m.UserId))
	}
	if m.PeerId != 0 {
		n += 1 + sovEntity(uint64(m.PeerId))
	}
	if m.PeerType != 0 {
		n += 1 + sovEntity(uint64(m.PeerType))
	}
	if m.AccessHash != 0 {
		n += 1 + sovEntity(uint64(m.AccessHash))
	}
	return n
}

func sovEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntity = fmt.Errorf("proto: unexpected end of group")
)
