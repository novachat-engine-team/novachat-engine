// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: file_location.proto

package data_message

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FileLocation struct {
	Type     int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	VolumeId int64  `protobuf:"varint,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty" bson:"volume_id"`
	LocalId  int32  `protobuf:"varint,3,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty" bson:"local_id"`
	Secret   int64  `protobuf:"varint,4,opt,name=secret,proto3" json:"secret,omitempty" bson:"secret"`
	DcId     int32  `protobuf:"varint,5,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty" bson:"dc_id"`
	Fr       []byte `protobuf:"bytes,6,opt,name=fr,proto3" json:"fr,omitempty" bson:"fr"`
}

func (m *FileLocation) Reset()         { *m = FileLocation{} }
func (m *FileLocation) String() string { return proto.CompactTextString(m) }
func (*FileLocation) ProtoMessage()    {}
func (*FileLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bd3e861a76731b0, []int{0}
}
func (m *FileLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLocation.Merge(m, src)
}
func (m *FileLocation) XXX_Size() int {
	return m.Size()
}
func (m *FileLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLocation.DiscardUnknown(m)
}

var xxx_messageInfo_FileLocation proto.InternalMessageInfo

func (m *FileLocation) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *FileLocation) GetVolumeId() int64 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *FileLocation) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *FileLocation) GetSecret() int64 {
	if m != nil {
		return m.Secret
	}
	return 0
}

func (m *FileLocation) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

func (m *FileLocation) GetFr() []byte {
	if m != nil {
		return m.Fr
	}
	return nil
}

func init() {
	proto.RegisterType((*FileLocation)(nil), "data_message.FileLocation")
}

func init() { proto.RegisterFile("file_location.proto", fileDescriptor_1bd3e861a76731b0) }

var fileDescriptor_1bd3e861a76731b0 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4d, 0x4b, 0xc3, 0x30,
	0x1c, 0xc6, 0x97, 0xee, 0xc5, 0x2d, 0x76, 0x6c, 0x66, 0x1e, 0x8a, 0x60, 0x33, 0x22, 0xc2, 0x3c,
	0xb8, 0x21, 0xde, 0x76, 0xec, 0x41, 0x18, 0x78, 0xca, 0xd1, 0xcb, 0x68, 0x9b, 0xb4, 0x16, 0xba,
	0x65, 0xb4, 0x99, 0xe0, 0xb7, 0xf0, 0x22, 0x78, 0x75, 0x9f, 0xc6, 0xe3, 0x3e, 0x41, 0xd0, 0x7e,
	0x02, 0xc9, 0x27, 0x90, 0x26, 0x53, 0xf0, 0xf6, 0xe4, 0x79, 0x7e, 0xcf, 0x43, 0xf8, 0xc3, 0x51,
	0x92, 0xe5, 0x7c, 0x99, 0x8b, 0x38, 0x94, 0x99, 0x58, 0x4f, 0x37, 0x85, 0x90, 0x02, 0xb9, 0x2c,
	0x94, 0xe1, 0x72, 0xc5, 0xcb, 0x32, 0x4c, 0xf9, 0xd9, 0x75, 0x9a, 0xc9, 0xc7, 0x6d, 0x34, 0x8d,
	0xc5, 0x6a, 0x96, 0x8a, 0x54, 0xcc, 0x0c, 0x14, 0x6d, 0x13, 0xf3, 0x32, 0x0f, 0xa3, 0x6c, 0x99,
	0xbc, 0x3a, 0xd0, 0xbd, 0xcb, 0x72, 0x7e, 0x7f, 0xd8, 0x44, 0x17, 0xb0, 0x25, 0x9f, 0x37, 0xdc,
	0x03, 0x63, 0x30, 0x69, 0x07, 0x03, 0xad, 0xf0, 0x71, 0x54, 0x8a, 0xf5, 0x9c, 0xd4, 0x2e, 0xa1,
	0x26, 0x44, 0x37, 0xb0, 0xf7, 0x24, 0xf2, 0xed, 0x8a, 0x2f, 0x33, 0xe6, 0x39, 0x63, 0x30, 0x69,
	0x06, 0xa7, 0x5a, 0xe1, 0xa1, 0x25, 0xff, 0x22, 0x42, 0xbb, 0x56, 0x2f, 0x18, 0x9a, 0xc2, 0x6e,
	0xfd, 0xef, 0xbc, 0x6e, 0x34, 0xcd, 0xf6, 0x48, 0x2b, 0x3c, 0xb0, 0x8d, 0xdf, 0x84, 0xd0, 0x23,
	0x23, 0x17, 0x0c, 0x5d, 0xc1, 0x4e, 0xc9, 0xe3, 0x82, 0x4b, 0xaf, 0x65, 0xf6, 0x4f, 0xb4, 0xc2,
	0x7d, 0x4b, 0x5b, 0x9f, 0xd0, 0x03, 0x80, 0x2e, 0x61, 0x9b, 0xc5, 0xf5, 0x6e, 0xdb, 0xec, 0x0e,
	0xb5, 0xc2, 0xae, 0x25, 0x8d, 0x4d, 0x68, 0x8b, 0xc5, 0x0b, 0x86, 0xce, 0xa1, 0x93, 0x14, 0x5e,
	0x67, 0x0c, 0x26, 0x6e, 0xd0, 0xd7, 0x0a, 0xf7, 0x2c, 0x93, 0x14, 0x84, 0x3a, 0x49, 0x31, 0x77,
	0xf7, 0xef, 0xb8, 0xf1, 0xb2, 0xc3, 0x8d, 0xb7, 0x1d, 0x6e, 0x04, 0xfe, 0xf7, 0x97, 0x0f, 0x3e,
	0x2a, 0x1f, 0xec, 0x2b, 0x1f, 0x7c, 0x56, 0x3e, 0x78, 0xf8, 0x77, 0xe6, 0xa8, 0x63, 0xce, 0x77,
	0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x88, 0x4f, 0x79, 0x8f, 0x92, 0x01, 0x00, 0x00,
}

func (this *FileLocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&data_message.FileLocation{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	s = append(s, "DcId: "+fmt.Sprintf("%#v", this.DcId)+",\n")
	s = append(s, "Fr: "+fmt.Sprintf("%#v", this.Fr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFileLocation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FileLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fr) > 0 {
		i -= len(m.Fr)
		copy(dAtA[i:], m.Fr)
		i = encodeVarintFileLocation(dAtA, i, uint64(len(m.Fr)))
		i--
		dAtA[i] = 0x32
	}
	if m.DcId != 0 {
		i = encodeVarintFileLocation(dAtA, i, uint64(m.DcId))
		i--
		dAtA[i] = 0x28
	}
	if m.Secret != 0 {
		i = encodeVarintFileLocation(dAtA, i, uint64(m.Secret))
		i--
		dAtA[i] = 0x20
	}
	if m.LocalId != 0 {
		i = encodeVarintFileLocation(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x18
	}
	if m.VolumeId != 0 {
		i = encodeVarintFileLocation(dAtA, i, uint64(m.VolumeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintFileLocation(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFileLocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileLocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovFileLocation(uint64(m.Type))
	}
	if m.VolumeId != 0 {
		n += 1 + sovFileLocation(uint64(m.VolumeId))
	}
	if m.LocalId != 0 {
		n += 1 + sovFileLocation(uint64(m.LocalId))
	}
	if m.Secret != 0 {
		n += 1 + sovFileLocation(uint64(m.Secret))
	}
	if m.DcId != 0 {
		n += 1 + sovFileLocation(uint64(m.DcId))
	}
	l = len(m.Fr)
	if l > 0 {
		n += 1 + l + sovFileLocation(uint64(l))
	}
	return n
}

func sovFileLocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileLocation(x uint64) (n int) {
	return sovFileLocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			m.VolumeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolumeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			m.Secret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Secret |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileLocation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileLocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fr = append(m.Fr[:0], dAtA[iNdEx:postIndex]...)
			if m.Fr == nil {
				m.Fr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileLocation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileLocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileLocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileLocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileLocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileLocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileLocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileLocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileLocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileLocation = fmt.Errorf("proto: unexpected end of group")
)
