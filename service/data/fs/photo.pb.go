// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: photo.proto

package data_fs

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PhotoDetail struct {
	VolumeId  int64      `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty" bson:"_id"`
	LocalId   int32      `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty" bson:"local_id"`
	FilePath  string     `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty" bson:"file_path"`
	PhotoSize *PhotoSize `protobuf:"bytes,4,opt,name=photo_size,json=photoSize,proto3" json:"photo_size,omitempty" bson:"photo_size"`
	Bytes     []byte     `protobuf:"bytes,5,opt,name=bytes,proto3" json:"bytes,omitempty" bson:"bytes"`
}

func (m *PhotoDetail) Reset()         { *m = PhotoDetail{} }
func (m *PhotoDetail) String() string { return proto.CompactTextString(m) }
func (*PhotoDetail) ProtoMessage()    {}
func (*PhotoDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d481429c0c8c32c, []int{0}
}
func (m *PhotoDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhotoDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhotoDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhotoDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhotoDetail.Merge(m, src)
}
func (m *PhotoDetail) XXX_Size() int {
	return m.Size()
}
func (m *PhotoDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PhotoDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PhotoDetail proto.InternalMessageInfo

func (m *PhotoDetail) GetVolumeId() int64 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *PhotoDetail) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *PhotoDetail) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *PhotoDetail) GetPhotoSize() *PhotoSize {
	if m != nil {
		return m.PhotoSize
	}
	return nil
}

func (m *PhotoDetail) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type Photo struct {
	VolumeId   int64          `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty" bson:"_id"`
	LocalId    int32          `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty" bson:"local_id"`
	FilePath   string         `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty" bson:"file_path"`
	Filename   string         `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty" bson:"filename"`
	Md5Sum     string         `protobuf:"bytes,5,opt,name=md5sum,proto3" json:"md5sum,omitempty" bson:"md5sum"`
	Date       int32          `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty" bson:date"`
	Detail     []*PhotoDetail `protobuf:"bytes,7,rep,name=detail,proto3" json:"detail,omitempty" bson:"detail"`
	FileType   int32          `protobuf:"varint,8,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty" bson:"file_type"`
	Size_      int32          `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty" bson:"size"`
	AccessHash int64          `protobuf:"varint,10,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty" bson:"access_hash"`
}

func (m *Photo) Reset()         { *m = Photo{} }
func (m *Photo) String() string { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()    {}
func (*Photo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d481429c0c8c32c, []int{1}
}
func (m *Photo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Photo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Photo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Photo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Photo.Merge(m, src)
}
func (m *Photo) XXX_Size() int {
	return m.Size()
}
func (m *Photo) XXX_DiscardUnknown() {
	xxx_messageInfo_Photo.DiscardUnknown(m)
}

var xxx_messageInfo_Photo proto.InternalMessageInfo

func (m *Photo) GetVolumeId() int64 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *Photo) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *Photo) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *Photo) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Photo) GetMd5Sum() string {
	if m != nil {
		return m.Md5Sum
	}
	return ""
}

func (m *Photo) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Photo) GetDetail() []*PhotoDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (m *Photo) GetFileType() int32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *Photo) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Photo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func init() {
	proto.RegisterType((*PhotoDetail)(nil), "data_fs.PhotoDetail")
	proto.RegisterType((*Photo)(nil), "data_fs.Photo")
}

func init() { proto.RegisterFile("photo.proto", fileDescriptor_0d481429c0c8c32c) }

var fileDescriptor_0d481429c0c8c32c = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0xcd, 0xa7, 0xd7, 0x81, 0xa6, 0x4b, 0x41, 0xa6, 0x87, 0xac, 0xb5, 0x48, 0xc8,
	0x08, 0xe1, 0x88, 0x22, 0x84, 0xd4, 0x0b, 0x92, 0xc5, 0xa1, 0xbd, 0x55, 0x86, 0x13, 0x17, 0x6b,
	0x1d, 0x6f, 0x62, 0x4b, 0x76, 0xd7, 0xc2, 0x9b, 0x4a, 0xe9, 0x53, 0x70, 0xe4, 0xc2, 0x81, 0x3e,
	0x0d, 0xc7, 0x3e, 0x81, 0x05, 0x79, 0x02, 0xe4, 0x0b, 0x57, 0xe4, 0x59, 0xbb, 0x49, 0x79, 0x82,
	0xde, 0x66, 0xe7, 0xff, 0x9b, 0x9d, 0x9d, 0x8f, 0xc5, 0x66, 0x1e, 0x4b, 0x25, 0xdd, 0xfc, 0x8b,
	0x54, 0x92, 0x0c, 0x23, 0xae, 0x78, 0xb0, 0x28, 0x8e, 0x5e, 0x2d, 0x13, 0x15, 0xaf, 0x42, 0x77,
	0x2e, 0xb3, 0xd9, 0x52, 0x2e, 0xe5, 0x0c, 0xf4, 0x70, 0xb5, 0x80, 0x13, 0x1c, 0xc0, 0xd2, 0x71,
	0x47, 0x13, 0xb8, 0x24, 0x28, 0x92, 0x2b, 0xd1, 0x7a, 0x2e, 0x93, 0x48, 0xec, 0x7a, 0xd8, 0xf7,
	0x3d, 0x6c, 0x9e, 0xd7, 0xd8, 0x07, 0xa1, 0x78, 0x92, 0x92, 0x97, 0xd8, 0xb8, 0x94, 0xe9, 0x2a,
	0x13, 0x41, 0x12, 0x59, 0xc8, 0x46, 0x4e, 0xd7, 0x7b, 0x58, 0x95, 0x14, 0x87, 0x85, 0xbc, 0x38,
	0x61, 0x41, 0x12, 0x31, 0x7f, 0xa4, 0x81, 0xb3, 0x88, 0xb8, 0x78, 0x94, 0xca, 0x39, 0x4f, 0x6b,
	0x76, 0xcf, 0x46, 0x4e, 0xdf, 0x7b, 0x54, 0x95, 0x74, 0x5f, 0xb3, 0xad, 0xc2, 0xfc, 0x21, 0x98,
	0x67, 0x11, 0x79, 0x8d, 0x8d, 0x45, 0x92, 0x8a, 0x20, 0xe7, 0x2a, 0xb6, 0xba, 0x36, 0x72, 0x0c,
	0xef, 0xb0, 0x2a, 0xe9, 0x44, 0x07, 0xdc, 0x4a, 0xcc, 0x1f, 0xd5, 0xf6, 0x39, 0x57, 0x31, 0x39,
	0xc5, 0x78, 0x5b, 0x85, 0xd5, 0xb3, 0x91, 0x63, 0x1e, 0x13, 0xb7, 0x69, 0x88, 0x0b, 0x2f, 0xff,
	0x98, 0x5c, 0x09, 0xef, 0x71, 0x55, 0xd2, 0x03, 0x7d, 0xcf, 0x96, 0x67, 0xbe, 0x91, 0xb7, 0x04,
	0x79, 0x8e, 0xfb, 0xe1, 0x5a, 0x89, 0xc2, 0xea, 0xdb, 0xc8, 0x19, 0x7b, 0x93, 0xaa, 0xa4, 0x63,
	0x1d, 0x00, 0x6e, 0xe6, 0x6b, 0xf9, 0x64, 0x7c, 0xf3, 0x83, 0x76, 0xbe, 0x5e, 0xd3, 0xce, 0xb7,
	0x6b, 0xda, 0x61, 0x7f, 0xbb, 0xb8, 0x0f, 0x59, 0xee, 0x5d, 0x67, 0x66, 0x18, 0xec, 0x0b, 0x9e,
	0xe9, 0xbe, 0x18, 0xbb, 0x29, 0x5a, 0xa5, 0x09, 0xa8, 0x4d, 0xf2, 0x02, 0x0f, 0xb2, 0xe8, 0x6d,
	0xb1, 0xca, 0xa0, 0x03, 0x86, 0x77, 0x50, 0x95, 0xf4, 0x81, 0xc6, 0xb5, 0x9f, 0xf9, 0x0d, 0x40,
	0x18, 0xee, 0x45, 0x5c, 0x09, 0x6b, 0x00, 0x4f, 0xdf, 0x96, 0x59, 0x3b, 0x99, 0x0f, 0x1a, 0x79,
	0x8f, 0x07, 0x11, 0xec, 0x8c, 0x35, 0xb4, 0xbb, 0x8e, 0x79, 0x7c, 0x78, 0x77, 0x2a, 0x7a, 0x9f,
	0x76, 0x93, 0x68, 0x9a, 0xf9, 0x4d, 0xd8, 0x6d, 0xcd, 0x6a, 0x9d, 0x0b, 0x6b, 0x04, 0x99, 0xfe,
	0xaf, 0xb9, 0x96, 0x9a, 0x12, 0x3e, 0xad, 0x73, 0x41, 0x9e, 0xe1, 0x1e, 0xec, 0x81, 0x01, 0xf4,
	0x7e, 0x55, 0x52, 0x53, 0xd3, 0x7a, 0xda, 0x20, 0x92, 0x77, 0xd8, 0xe4, 0xf3, 0xb9, 0x28, 0x8a,
	0x20, 0xe6, 0x45, 0x6c, 0x61, 0x18, 0xd5, 0x93, 0xaa, 0xa4, 0x44, 0xb3, 0x3b, 0x22, 0xf3, 0xb1,
	0x3e, 0x9d, 0xf2, 0x22, 0xbe, 0x3b, 0x79, 0xef, 0xe9, 0x9f, 0xdf, 0x53, 0xf4, 0x73, 0x33, 0x45,
	0x37, 0x9b, 0x29, 0xfa, 0xb5, 0x99, 0xa2, 0xcf, 0xed, 0x3f, 0x0c, 0x07, 0xf0, 0x77, 0xde, 0xfc,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x3d, 0x2a, 0x80, 0xa6, 0x03, 0x00, 0x00,
}

func (this *PhotoDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&data_fs.PhotoDetail{")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "FilePath: "+fmt.Sprintf("%#v", this.FilePath)+",\n")
	if this.PhotoSize != nil {
		s = append(s, "PhotoSize: "+fmt.Sprintf("%#v", this.PhotoSize)+",\n")
	}
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Photo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&data_fs.Photo{")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "FilePath: "+fmt.Sprintf("%#v", this.FilePath)+",\n")
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "Md5Sum: "+fmt.Sprintf("%#v", this.Md5Sum)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Detail != nil {
		s = append(s, "Detail: "+fmt.Sprintf("%#v", this.Detail)+",\n")
	}
	s = append(s, "FileType: "+fmt.Sprintf("%#v", this.FileType)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPhoto(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PhotoDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhotoDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhotoDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PhotoSize != nil {
		{
			size, err := m.PhotoSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPhoto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LocalId != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x10
	}
	if m.VolumeId != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.VolumeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Photo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Photo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Photo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x50
	}
	if m.Size_ != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x48
	}
	if m.FileType != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Detail) > 0 {
		for iNdEx := len(m.Detail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Detail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPhoto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Date != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Md5Sum) > 0 {
		i -= len(m.Md5Sum)
		copy(dAtA[i:], m.Md5Sum)
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Md5Sum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintPhoto(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LocalId != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x10
	}
	if m.VolumeId != 0 {
		i = encodeVarintPhoto(dAtA, i, uint64(m.VolumeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhoto(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhoto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PhotoDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeId != 0 {
		n += 1 + sovPhoto(uint64(m.VolumeId))
	}
	if m.LocalId != 0 {
		n += 1 + sovPhoto(uint64(m.LocalId))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	if m.PhotoSize != nil {
		l = m.PhotoSize.Size()
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	return n
}

func (m *Photo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeId != 0 {
		n += 1 + sovPhoto(uint64(m.VolumeId))
	}
	if m.LocalId != 0 {
		n += 1 + sovPhoto(uint64(m.LocalId))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	l = len(m.Md5Sum)
	if l > 0 {
		n += 1 + l + sovPhoto(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovPhoto(uint64(m.Date))
	}
	if len(m.Detail) > 0 {
		for _, e := range m.Detail {
			l = e.Size()
			n += 1 + l + sovPhoto(uint64(l))
		}
	}
	if m.FileType != 0 {
		n += 1 + sovPhoto(uint64(m.FileType))
	}
	if m.Size_ != 0 {
		n += 1 + sovPhoto(uint64(m.Size_))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPhoto(uint64(m.AccessHash))
	}
	return n
}

func sovPhoto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhoto(x uint64) (n int) {
	return sovPhoto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PhotoDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			m.VolumeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolumeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhoto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhoto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotoSize == nil {
				m.PhotoSize = &PhotoSize{}
			}
			if err := m.PhotoSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPhoto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Photo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Photo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Photo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			m.VolumeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolumeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhoto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhoto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhoto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhoto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhoto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = append(m.Detail, &PhotoDetail{})
			if err := m.Detail[len(m.Detail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhoto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPhoto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhoto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhoto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhoto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhoto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhoto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhoto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhoto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhoto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhoto = fmt.Errorf("proto: unexpected end of group")
)
