// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: geopoint.proto

package data_fs

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GeoPoint struct {
	Long           float64 `protobuf:"fixed64,1,opt,name=long,proto3" json:"long,omitempty" bson:"long"`
	Lat            float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty" bson:"lat"`
	AccessHash     int64   `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty" bson:"access_hash"`
	AccuracyRadius int32   `protobuf:"varint,4,opt,name=accuracy_radius,json=accuracyRadius,proto3" json:"accuracy_radius,omitempty" bson:"accuracy_radius"`
}

func (m *GeoPoint) Reset()         { *m = GeoPoint{} }
func (m *GeoPoint) String() string { return proto.CompactTextString(m) }
func (*GeoPoint) ProtoMessage()    {}
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2f7285d0b558b0, []int{0}
}
func (m *GeoPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoPoint.Merge(m, src)
}
func (m *GeoPoint) XXX_Size() int {
	return m.Size()
}
func (m *GeoPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoPoint.DiscardUnknown(m)
}

var xxx_messageInfo_GeoPoint proto.InternalMessageInfo

func (m *GeoPoint) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

func (m *GeoPoint) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *GeoPoint) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *GeoPoint) GetAccuracyRadius() int32 {
	if m != nil {
		return m.AccuracyRadius
	}
	return 0
}

func init() {
	proto.RegisterType((*GeoPoint)(nil), "data_fs.GeoPoint")
}

func init() { proto.RegisterFile("geopoint.proto", fileDescriptor_9d2f7285d0b558b0) }

var fileDescriptor_9d2f7285d0b558b0 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4f, 0xcd, 0x2f,
	0xc8, 0xcf, 0xcc, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x49, 0x2c, 0x49,
	0x8c, 0x4f, 0x2b, 0x96, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5,
	0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xcb, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05,
	0xd1, 0xa7, 0x74, 0x97, 0x91, 0x8b, 0xc3, 0x3d, 0x35, 0x3f, 0x00, 0x64, 0x94, 0x90, 0x32, 0x17,
	0x4b, 0x4e, 0x7e, 0x5e, 0xba, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa3, 0x13, 0xff, 0xa7, 0x7b, 0xf2,
	0xdc, 0x49, 0xc5, 0xf9, 0x79, 0x56, 0x4a, 0x20, 0x51, 0xa5, 0x20, 0xb0, 0xa4, 0x90, 0x02, 0x17,
	0x73, 0x4e, 0x62, 0x89, 0x04, 0x13, 0x58, 0x0d, 0xdf, 0xa7, 0x7b, 0xf2, 0x5c, 0x50, 0x35, 0x89,
	0x25, 0x4a, 0x41, 0x20, 0x29, 0x21, 0x73, 0x2e, 0xee, 0xc4, 0xe4, 0xe4, 0xd4, 0xe2, 0xe2, 0xf8,
	0x8c, 0xc4, 0xe2, 0x0c, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x66, 0x27, 0xb1, 0x4f, 0xf7, 0xe4, 0x85,
	0x20, 0x2a, 0x91, 0x24, 0x95, 0x82, 0xb8, 0x20, 0x3c, 0x8f, 0xc4, 0xe2, 0x0c, 0x21, 0x67, 0x2e,
	0xfe, 0xc4, 0xe4, 0xe4, 0xd2, 0xa2, 0xc4, 0xe4, 0xca, 0xf8, 0xa2, 0xc4, 0x94, 0xcc, 0xd2, 0x62,
	0x09, 0x16, 0x05, 0x46, 0x0d, 0x56, 0x27, 0xa9, 0x4f, 0xf7, 0xe4, 0xc5, 0xe0, 0x9a, 0x91, 0x15,
	0x28, 0x05, 0xf1, 0xc1, 0x44, 0x82, 0xc0, 0x02, 0x56, 0x3c, 0x17, 0x16, 0xca, 0x33, 0x4c, 0x58,
	0x24, 0xcf, 0x30, 0x63, 0x91, 0x3c, 0x83, 0x93, 0xe4, 0x87, 0x87, 0x72, 0x8c, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x14, 0x2c, 0xa4, 0x92, 0xd8, 0xc0,
	0x21, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x0e, 0x40, 0x7c, 0x4b, 0x01, 0x00, 0x00,
}

func (this *GeoPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&data_fs.GeoPoint{")
	s = append(s, "Long: "+fmt.Sprintf("%#v", this.Long)+",\n")
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "AccuracyRadius: "+fmt.Sprintf("%#v", this.AccuracyRadius)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGeopoint(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GeoPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccuracyRadius != 0 {
		i = encodeVarintGeopoint(dAtA, i, uint64(m.AccuracyRadius))
		i--
		dAtA[i] = 0x20
	}
	if m.AccessHash != 0 {
		i = encodeVarintGeopoint(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x11
	}
	if m.Long != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Long))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintGeopoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovGeopoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GeoPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Long != 0 {
		n += 9
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.AccessHash != 0 {
		n += 1 + sovGeopoint(uint64(m.AccessHash))
	}
	if m.AccuracyRadius != 0 {
		n += 1 + sovGeopoint(uint64(m.AccuracyRadius))
	}
	return n
}

func sovGeopoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGeopoint(x uint64) (n int) {
	return sovGeopoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GeoPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeopoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Long = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeopoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccuracyRadius", wireType)
			}
			m.AccuracyRadius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeopoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccuracyRadius |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeopoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeopoint
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeopoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeopoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeopoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeopoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeopoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGeopoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGeopoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGeopoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGeopoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeopoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGeopoint = fmt.Errorf("proto: unexpected end of group")
)
