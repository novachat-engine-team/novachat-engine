// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: md5sum.proto

package data_fs

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Md5Sum struct {
	Md5Sum       string    `protobuf:"bytes,1,opt,name=md5_sum,json=md5Sum,proto3" json:"md5_sum,omitempty" bson:"_id"`
	PhotoInfo    *Photo    `protobuf:"bytes,2,opt,name=photo_info,json=photoInfo,proto3" json:"photo_info,omitempty" bson:"photo_info"`
	DocumentInfo *Document `protobuf:"bytes,3,opt,name=document_info,json=documentInfo,proto3" json:"document_info,omitempty" bson:"document_info"`
}

func (m *Md5Sum) Reset()         { *m = Md5Sum{} }
func (m *Md5Sum) String() string { return proto.CompactTextString(m) }
func (*Md5Sum) ProtoMessage()    {}
func (*Md5Sum) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca03b4372c02393, []int{0}
}
func (m *Md5Sum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Md5Sum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Md5Sum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Md5Sum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Md5Sum.Merge(m, src)
}
func (m *Md5Sum) XXX_Size() int {
	return m.Size()
}
func (m *Md5Sum) XXX_DiscardUnknown() {
	xxx_messageInfo_Md5Sum.DiscardUnknown(m)
}

var xxx_messageInfo_Md5Sum proto.InternalMessageInfo

func (m *Md5Sum) GetMd5Sum() string {
	if m != nil {
		return m.Md5Sum
	}
	return ""
}

func (m *Md5Sum) GetPhotoInfo() *Photo {
	if m != nil {
		return m.PhotoInfo
	}
	return nil
}

func (m *Md5Sum) GetDocumentInfo() *Document {
	if m != nil {
		return m.DocumentInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Md5Sum)(nil), "data_fs.Md5Sum")
}

func init() { proto.RegisterFile("md5sum.proto", fileDescriptor_0ca03b4372c02393) }

var fileDescriptor_0ca03b4372c02393 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4d, 0x31, 0x2d,
	0x2e, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x49, 0x2c, 0x49, 0x8c, 0x4f,
	0x2b, 0x96, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf,
	0x4f, 0xcf, 0xd7, 0x07, 0xcb, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0x27,
	0xc5, 0x97, 0x92, 0x9f, 0x5c, 0x9a, 0x9b, 0x9a, 0x57, 0x02, 0xe5, 0x73, 0x17, 0x64, 0xe4, 0x97,
	0x40, 0x25, 0x95, 0xae, 0x33, 0x72, 0xb1, 0xf9, 0xa6, 0x98, 0x06, 0x97, 0xe6, 0x0a, 0xa9, 0x73,
	0xb1, 0xe7, 0xa6, 0x98, 0xc6, 0x17, 0x97, 0xe6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x3a, 0xf1,
	0x7d, 0xba, 0x27, 0xcf, 0x95, 0x54, 0x9c, 0x9f, 0x67, 0xa5, 0x14, 0x9f, 0x99, 0xa2, 0x14, 0xc4,
	0x96, 0x0b, 0x51, 0xe8, 0xc2, 0xc5, 0x05, 0x36, 0x22, 0x3e, 0x33, 0x2f, 0x2d, 0x5f, 0x82, 0x49,
	0x81, 0x51, 0x83, 0xdb, 0x88, 0x4f, 0x0f, 0xea, 0x3a, 0xbd, 0x00, 0x90, 0x94, 0x93, 0xe8, 0xa7,
	0x7b, 0xf2, 0x82, 0x10, 0xbd, 0x08, 0xb5, 0x4a, 0x41, 0x9c, 0x60, 0x8e, 0x67, 0x5e, 0x5a, 0xbe,
	0x50, 0x00, 0x17, 0x2f, 0xcc, 0x61, 0x10, 0x83, 0x98, 0xc1, 0x06, 0x09, 0xc2, 0x0d, 0x72, 0x81,
	0xca, 0x3a, 0x49, 0x7c, 0xba, 0x27, 0x2f, 0x02, 0x31, 0x0b, 0x45, 0x87, 0x52, 0x10, 0x0f, 0x8c,
	0x0f, 0x32, 0xd1, 0x8a, 0xe7, 0xc2, 0x42, 0x79, 0x86, 0x09, 0x8b, 0xe4, 0x19, 0x66, 0x2c, 0x92,
	0x67, 0x70, 0x92, 0xfc, 0xf0, 0x50, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18,
	0x1f, 0x3c, 0x92, 0x63, 0x8c, 0x82, 0x05, 0x60, 0x12, 0x1b, 0xd8, 0xef, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x37, 0x83, 0x3e, 0x42, 0x60, 0x01, 0x00, 0x00,
}

func (this *Md5Sum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&data_fs.Md5Sum{")
	s = append(s, "Md5Sum: "+fmt.Sprintf("%#v", this.Md5Sum)+",\n")
	if this.PhotoInfo != nil {
		s = append(s, "PhotoInfo: "+fmt.Sprintf("%#v", this.PhotoInfo)+",\n")
	}
	if this.DocumentInfo != nil {
		s = append(s, "DocumentInfo: "+fmt.Sprintf("%#v", this.DocumentInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMd5Sum(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Md5Sum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Md5Sum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Md5Sum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DocumentInfo != nil {
		{
			size, err := m.DocumentInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMd5Sum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PhotoInfo != nil {
		{
			size, err := m.PhotoInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMd5Sum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Md5Sum) > 0 {
		i -= len(m.Md5Sum)
		copy(dAtA[i:], m.Md5Sum)
		i = encodeVarintMd5Sum(dAtA, i, uint64(len(m.Md5Sum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMd5Sum(dAtA []byte, offset int, v uint64) int {
	offset -= sovMd5Sum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Md5Sum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Md5Sum)
	if l > 0 {
		n += 1 + l + sovMd5Sum(uint64(l))
	}
	if m.PhotoInfo != nil {
		l = m.PhotoInfo.Size()
		n += 1 + l + sovMd5Sum(uint64(l))
	}
	if m.DocumentInfo != nil {
		l = m.DocumentInfo.Size()
		n += 1 + l + sovMd5Sum(uint64(l))
	}
	return n
}

func sovMd5Sum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMd5Sum(x uint64) (n int) {
	return sovMd5Sum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Md5Sum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMd5Sum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Md5Sum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Md5Sum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMd5Sum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMd5Sum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMd5Sum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMd5Sum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMd5Sum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMd5Sum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhotoInfo == nil {
				m.PhotoInfo = &Photo{}
			}
			if err := m.PhotoInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMd5Sum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMd5Sum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMd5Sum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DocumentInfo == nil {
				m.DocumentInfo = &Document{}
			}
			if err := m.DocumentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMd5Sum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMd5Sum
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMd5Sum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMd5Sum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMd5Sum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMd5Sum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMd5Sum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMd5Sum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMd5Sum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMd5Sum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMd5Sum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMd5Sum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMd5Sum = fmt.Errorf("proto: unexpected end of group")
)
