// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: photo_size.proto

package data_fs

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PhotoSize struct {
	Width  int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty" bson:"width"`
	Height int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty" bson:"height"`
	Size_  int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty" bson:"size"`
	Type   string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
}

func (m *PhotoSize) Reset()         { *m = PhotoSize{} }
func (m *PhotoSize) String() string { return proto.CompactTextString(m) }
func (*PhotoSize) ProtoMessage()    {}
func (*PhotoSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_04f39ea960182e27, []int{0}
}
func (m *PhotoSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhotoSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhotoSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhotoSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhotoSize.Merge(m, src)
}
func (m *PhotoSize) XXX_Size() int {
	return m.Size()
}
func (m *PhotoSize) XXX_DiscardUnknown() {
	xxx_messageInfo_PhotoSize.DiscardUnknown(m)
}

var xxx_messageInfo_PhotoSize proto.InternalMessageInfo

func (m *PhotoSize) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *PhotoSize) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PhotoSize) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *PhotoSize) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*PhotoSize)(nil), "data_fs.PhotoSize")
}

func init() { proto.RegisterFile("photo_size.proto", fileDescriptor_04f39ea960182e27) }

var fileDescriptor_04f39ea960182e27 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xc8, 0xc8, 0x2f,
	0xc9, 0x8f, 0x2f, 0xce, 0xac, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x49,
	0x2c, 0x49, 0x8c, 0x4f, 0x2b, 0x96, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce,
	0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xcb, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e,
	0x98, 0x05, 0xd1, 0xa7, 0xb4, 0x8d, 0x91, 0x8b, 0x33, 0x00, 0x64, 0x58, 0x70, 0x66, 0x55, 0xaa,
	0x90, 0x1a, 0x17, 0x6b, 0x79, 0x66, 0x4a, 0x49, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xab, 0x93,
	0xc0, 0xa7, 0x7b, 0xf2, 0x3c, 0x49, 0xc5, 0xf9, 0x79, 0x56, 0x4a, 0x60, 0x61, 0xa5, 0x20, 0x88,
	0xb4, 0x90, 0x26, 0x17, 0x5b, 0x46, 0x6a, 0x66, 0x7a, 0x46, 0x89, 0x04, 0x13, 0x58, 0xa1, 0xe0,
	0xa7, 0x7b, 0xf2, 0xbc, 0x10, 0x85, 0x10, 0x71, 0xa5, 0x20, 0xa8, 0x02, 0x21, 0x65, 0x2e, 0x16,
	0x90, 0x33, 0x25, 0x98, 0xc1, 0x0a, 0xf9, 0x3f, 0xdd, 0x93, 0xe7, 0x86, 0x28, 0x04, 0x89, 0x2a,
	0x05, 0x81, 0x25, 0x41, 0x8a, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x58, 0x14, 0x18, 0x35, 0x38, 0x91,
	0x15, 0x81, 0x44, 0x95, 0x82, 0xc0, 0x92, 0x56, 0x3c, 0x17, 0x16, 0xca, 0x33, 0x4c, 0x58, 0x24,
	0xcf, 0x30, 0x63, 0x91, 0x3c, 0x83, 0x93, 0xe4, 0x87, 0x87, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31,
	0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0x63, 0x14, 0x2c, 0x08, 0x92, 0xd8, 0xc0, 0x5e,
	0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x53, 0x9a, 0x0c, 0x0d, 0x26, 0x01, 0x00, 0x00,
}

func (this *PhotoSize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&data_fs.PhotoSize{")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPhotoSize(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PhotoSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhotoSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhotoSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPhotoSize(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintPhotoSize(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintPhotoSize(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != 0 {
		i = encodeVarintPhotoSize(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhotoSize(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhotoSize(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PhotoSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovPhotoSize(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovPhotoSize(uint64(m.Height))
	}
	if m.Size_ != 0 {
		n += 1 + sovPhotoSize(uint64(m.Size_))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPhotoSize(uint64(l))
	}
	return n
}

func sovPhotoSize(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhotoSize(x uint64) (n int) {
	return sovPhotoSize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PhotoSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhotoSize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoSize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoSize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoSize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhotoSize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhotoSize
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhotoSize
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhotoSize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhotoSize
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPhotoSize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhotoSize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhotoSize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhotoSize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhotoSize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhotoSize
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhotoSize
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhotoSize
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhotoSize        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhotoSize          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhotoSize = fmt.Errorf("proto: unexpected end of group")
)
