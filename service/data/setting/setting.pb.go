// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: setting.proto

package data_setting

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Setting struct {
	UserId     int64          `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id"`
	PeerId     int64          `protobuf:"varint,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty" bson:"peer_id"`
	PeerType   int32          `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty" bson:"peer_type"`
	Setting    *NotifySetting `protobuf:"bytes,4,opt,name=setting,proto3" json:"setting,omitempty" bson:"setting"`
	NotifyType int32          `protobuf:"varint,5,opt,name=notify_type,json=notifyType,proto3" json:"notify_type,omitempty" bson:"notify_type"`
	Id         string         `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (m *Setting) Reset()         { *m = Setting{} }
func (m *Setting) String() string { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()    {}
func (*Setting) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fa78c2ae253ed30, []int{0}
}
func (m *Setting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Setting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Setting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Setting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Setting.Merge(m, src)
}
func (m *Setting) XXX_Size() int {
	return m.Size()
}
func (m *Setting) XXX_DiscardUnknown() {
	xxx_messageInfo_Setting.DiscardUnknown(m)
}

var xxx_messageInfo_Setting proto.InternalMessageInfo

func (m *Setting) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Setting) GetPeerId() int64 {
	if m != nil {
		return m.PeerId
	}
	return 0
}

func (m *Setting) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *Setting) GetSetting() *NotifySetting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (m *Setting) GetNotifyType() int32 {
	if m != nil {
		return m.NotifyType
	}
	return 0
}

func (m *Setting) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Setting)(nil), "data_setting.Setting")
}

func init() { proto.RegisterFile("setting.proto", fileDescriptor_5fa78c2ae253ed30) }

var fileDescriptor_5fa78c2ae253ed30 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x29,
	0xc9, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0x49, 0x2c, 0x49, 0x8c,
	0x87, 0x8a, 0x49, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7,
	0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0x15, 0x25, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1,
	0x2c, 0x25, 0x92, 0x97, 0x5f, 0x92, 0x99, 0x56, 0x19, 0x8f, 0x62, 0xa4, 0xd2, 0x09, 0x26, 0x2e,
	0xf6, 0x60, 0x88, 0x88, 0x90, 0x36, 0x17, 0x7b, 0x69, 0x71, 0x6a, 0x51, 0x7c, 0x66, 0x8a, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0xb3, 0x93, 0xd0, 0xa7, 0x7b, 0xf2, 0x7c, 0x49, 0xc5, 0xf9, 0x79, 0x56,
	0x4a, 0x50, 0x09, 0xa5, 0x20, 0x36, 0x10, 0xcb, 0x33, 0x05, 0xa4, 0xb8, 0x20, 0x15, 0xa2, 0x98,
	0x09, 0x5d, 0x31, 0x54, 0x42, 0x29, 0x88, 0x0d, 0xc4, 0xf2, 0x4c, 0x11, 0x32, 0xe4, 0xe2, 0x04,
	0x8b, 0x95, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0xb0, 0x3a, 0x89, 0x7c, 0xba, 0x27,
	0x2f, 0x80, 0xa4, 0x1c, 0x24, 0xa5, 0x14, 0xc4, 0x01, 0x62, 0x87, 0x54, 0x16, 0xa4, 0x0a, 0x79,
	0x72, 0xb1, 0x43, 0x5d, 0x2a, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xad, 0x87, 0xec, 0x7b,
	0x3d, 0x3f, 0xb0, 0x6f, 0xa0, 0x4e, 0x47, 0xb6, 0x1c, 0xaa, 0x40, 0x29, 0x08, 0xa6, 0x5f, 0xc8,
	0x9c, 0x8b, 0x1b, 0xea, 0x77, 0xb0, 0xfd, 0xac, 0x60, 0xfb, 0xc5, 0x3e, 0xdd, 0x93, 0x17, 0x82,
	0xe8, 0x40, 0x92, 0x54, 0x0a, 0xe2, 0x82, 0xf0, 0xc0, 0x6e, 0x90, 0xe3, 0x62, 0xca, 0x4c, 0x91,
	0x60, 0x53, 0x60, 0xd4, 0xe0, 0x74, 0xe2, 0xfb, 0x74, 0x4f, 0x9e, 0x0b, 0xa2, 0x1e, 0xec, 0x35,
	0xa6, 0xcc, 0x14, 0x2b, 0x9e, 0x0b, 0x0b, 0xe5, 0x19, 0x26, 0x2c, 0x92, 0x67, 0x98, 0xb1, 0x48,
	0x9e, 0xc1, 0x49, 0xee, 0xc3, 0x43, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0x31, 0x0a, 0x25, 0xbe, 0x92, 0xd8, 0xc0, 0x21, 0x6e, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x41, 0xb2, 0xcb, 0x5b, 0xd5, 0x01, 0x00, 0x00,
}

func (this *Setting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&data_setting.Setting{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "PeerId: "+fmt.Sprintf("%#v", this.PeerId)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	if this.Setting != nil {
		s = append(s, "Setting: "+fmt.Sprintf("%#v", this.Setting)+",\n")
	}
	s = append(s, "NotifyType: "+fmt.Sprintf("%#v", this.NotifyType)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSetting(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Setting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Setting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSetting(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x32
	}
	if m.NotifyType != 0 {
		i = encodeVarintSetting(dAtA, i, uint64(m.NotifyType))
		i--
		dAtA[i] = 0x28
	}
	if m.Setting != nil {
		{
			size, err := m.Setting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSetting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PeerType != 0 {
		i = encodeVarintSetting(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x18
	}
	if m.PeerId != 0 {
		i = encodeVarintSetting(dAtA, i, uint64(m.PeerId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintSetting(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSetting(dAtA []byte, offset int, v uint64) int {
	offset -= sovSetting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Setting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSetting(uint64(m.UserId))
	}
	if m.PeerId != 0 {
		n += 1 + sovSetting(uint64(m.PeerId))
	}
	if m.PeerType != 0 {
		n += 1 + sovSetting(uint64(m.PeerType))
	}
	if m.Setting != nil {
		l = m.Setting.Size()
		n += 1 + l + sovSetting(uint64(l))
	}
	if m.NotifyType != 0 {
		n += 1 + sovSetting(uint64(m.NotifyType))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSetting(uint64(l))
	}
	return n
}

func sovSetting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSetting(x uint64) (n int) {
	return sovSetting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSetting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			m.PeerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSetting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setting == nil {
				m.Setting = &NotifySetting{}
			}
			if err := m.Setting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotifyType", wireType)
			}
			m.NotifyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotifyType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSetting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSetting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSetting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSetting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSetting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSetting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSetting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSetting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSetting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSetting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSetting = fmt.Errorf("proto: unexpected end of group")
)
