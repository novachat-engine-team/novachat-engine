// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stickerset.proto

package data_stickerset

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	fs "novachat_engine/service/data/fs"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StickerSet struct {
	Id         int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Official   bool           `protobuf:"varint,2,opt,name=official,proto3" json:"official,omitempty" bson:"official"`
	Masks      bool           `protobuf:"varint,3,opt,name=masks,proto3" json:"masks,omitempty" bson:"masks"`
	Animated   bool           `protobuf:"varint,4,opt,name=animated,proto3" json:"animated,omitempty" bson:"animated"`
	AccessHash int64          `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty" bson:"access_hash"`
	Title      string         `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty" bson:"title"`
	ShortName  string         `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty" bson:"short_name"`
	Thumbs     []*fs.Document `protobuf:"bytes,8,rep,name=thumbs,proto3" json:"thumbs,omitempty" bson:"thumbs"`
	ThumbDcId  int32          `protobuf:"varint,9,opt,name=thumb_dc_id,json=thumbDcId,proto3" json:"thumb_dc_id,omitempty" bson:"thumb_dc_id"`
	Count      int32          `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty" bson:"count"`
	Hash       int32          `protobuf:"varint,11,opt,name=hash,proto3" json:"hash,omitempty" bson:"hash"`
	Emoticons  []string       `protobuf:"bytes,12,rep,name=emoticons,proto3" json:"emoticons,omitempty" bson:"emoticons"`
	Version    int32          `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty" bson:"version"`
	Packs      []*StickerPack `protobuf:"bytes,14,rep,name=packs,proto3" json:"packs,omitempty" bson:"packs"`
}

func (m *StickerSet) Reset()         { *m = StickerSet{} }
func (m *StickerSet) String() string { return proto.CompactTextString(m) }
func (*StickerSet) ProtoMessage()    {}
func (*StickerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_45ebddf4ff1e87f0, []int{0}
}
func (m *StickerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerSet.Merge(m, src)
}
func (m *StickerSet) XXX_Size() int {
	return m.Size()
}
func (m *StickerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerSet.DiscardUnknown(m)
}

var xxx_messageInfo_StickerSet proto.InternalMessageInfo

func (m *StickerSet) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerSet) GetOfficial() bool {
	if m != nil {
		return m.Official
	}
	return false
}

func (m *StickerSet) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *StickerSet) GetAnimated() bool {
	if m != nil {
		return m.Animated
	}
	return false
}

func (m *StickerSet) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerSet) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StickerSet) GetThumbs() []*fs.Document {
	if m != nil {
		return m.Thumbs
	}
	return nil
}

func (m *StickerSet) GetThumbDcId() int32 {
	if m != nil {
		return m.ThumbDcId
	}
	return 0
}

func (m *StickerSet) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StickerSet) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StickerSet) GetEmoticons() []string {
	if m != nil {
		return m.Emoticons
	}
	return nil
}

func (m *StickerSet) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StickerSet) GetPacks() []*StickerPack {
	if m != nil {
		return m.Packs
	}
	return nil
}

func init() {
	proto.RegisterType((*StickerSet)(nil), "data_stickerset.StickerSet")
}

func init() { proto.RegisterFile("stickerset.proto", fileDescriptor_45ebddf4ff1e87f0) }

var fileDescriptor_45ebddf4ff1e87f0 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0x37, 0xdb, 0xed, 0xee, 0xc6, 0xed, 0xf6, 0xc3, 0x7c, 0xc8, 0x5a, 0xa1, 0x3a, 0x18,
	0x09, 0xe5, 0x00, 0xa9, 0xb4, 0x20, 0x90, 0x56, 0x9c, 0xaa, 0x1e, 0xe0, 0x82, 0x90, 0xf7, 0xc6,
	0x25, 0x72, 0x9d, 0xb4, 0xb1, 0xba, 0x89, 0x57, 0xb5, 0xcb, 0x73, 0x70, 0xe4, 0xca, 0x3e, 0x0c,
	0xe2, 0xb8, 0x4f, 0x10, 0x41, 0x9f, 0x00, 0xe5, 0x09, 0x50, 0xc7, 0xe9, 0x87, 0x7a, 0xf3, 0xcc,
	0xff, 0xf7, 0xb7, 0x67, 0x26, 0x13, 0xd4, 0x33, 0x56, 0xc9, 0x79, 0xba, 0x30, 0xa9, 0x8d, 0xee,
	0x16, 0xda, 0x6a, 0xdc, 0x4d, 0x84, 0x15, 0xf1, 0x2e, 0x7d, 0xf9, 0x7a, 0xa6, 0x6c, 0xb6, 0x9c,
	0x44, 0x52, 0xe7, 0xc3, 0x99, 0x9e, 0xe9, 0x21, 0x70, 0x93, 0xe5, 0x14, 0x22, 0x08, 0xe0, 0xe4,
	0xfc, 0x97, 0xfd, 0xda, 0x7a, 0x27, 0xe4, 0xbc, 0x4e, 0x75, 0x12, 0x2d, 0x97, 0x79, 0x5a, 0xd4,
	0x4f, 0xb0, 0x5f, 0x4d, 0x84, 0x6e, 0x1c, 0x75, 0x93, 0x5a, 0x3c, 0x40, 0xc7, 0x2a, 0x21, 0x5e,
	0xe0, 0x85, 0x8d, 0x51, 0xa7, 0x2a, 0x29, 0x9a, 0x18, 0x5d, 0x5c, 0xb3, 0x58, 0x25, 0x8c, 0x1f,
	0xab, 0x04, 0x0f, 0xd1, 0xb9, 0x9e, 0x4e, 0x95, 0x54, 0xe2, 0x96, 0x1c, 0x07, 0x5e, 0x78, 0x3e,
	0x7a, 0x54, 0x95, 0xb4, 0xeb, 0xa8, 0x8d, 0xc2, 0xf8, 0x16, 0xc2, 0x2f, 0x51, 0x33, 0x17, 0x66,
	0x6e, 0x48, 0x03, 0xe8, 0x5e, 0x55, 0xd2, 0xb6, 0xa3, 0x21, 0xcd, 0xb8, 0x93, 0xd7, 0x17, 0x8b,
	0x42, 0xe5, 0xc2, 0xa6, 0x09, 0x39, 0x39, 0xbc, 0x78, 0xa3, 0x30, 0xbe, 0x85, 0xf0, 0x7b, 0xd4,
	0x12, 0x52, 0xa6, 0xc6, 0xc4, 0x99, 0x30, 0x19, 0x69, 0x42, 0xc9, 0x4f, 0xab, 0x92, 0xe2, 0xda,
	0xb3, 0x13, 0x19, 0x47, 0x2e, 0xfa, 0x28, 0x4c, 0xb6, 0xae, 0xc8, 0x2a, 0x7b, 0x9b, 0x92, 0xd3,
	0xc0, 0x0b, 0xfd, 0xfd, 0x8a, 0x20, 0xcd, 0xb8, 0x93, 0xf1, 0x5b, 0x84, 0x4c, 0xa6, 0x17, 0x36,
	0x2e, 0x44, 0x9e, 0x92, 0x33, 0x80, 0x9f, 0x54, 0x25, 0xed, 0x3b, 0x78, 0xa7, 0x31, 0xee, 0x43,
	0xf0, 0x59, 0xe4, 0x29, 0xfe, 0x80, 0x4e, 0x6d, 0xb6, 0xcc, 0x27, 0x86, 0x9c, 0x07, 0x8d, 0xb0,
	0x75, 0xd5, 0x8f, 0xe0, 0x1b, 0x4e, 0x4d, 0x34, 0xae, 0x07, 0x3f, 0xea, 0x57, 0x25, 0xbd, 0xa8,
	0x5f, 0x04, 0x94, 0xf1, 0xda, 0x83, 0xdf, 0xa1, 0x16, 0x9c, 0xe2, 0x44, 0xc6, 0x2a, 0x21, 0x7e,
	0xe0, 0x85, 0xcd, 0xfd, 0xa6, 0xf6, 0x44, 0xc6, 0x7d, 0x88, 0xc6, 0xf2, 0x53, 0xb2, 0xee, 0x49,
	0xea, 0x65, 0x61, 0x09, 0x02, 0xc7, 0x5e, 0x4f, 0x90, 0x66, 0xdc, 0xc9, 0xf8, 0x05, 0x3a, 0x81,
	0x69, 0xb5, 0x00, 0xeb, 0x56, 0x25, 0x6d, 0x39, 0xcc, 0x8d, 0x09, 0x44, 0x7c, 0x85, 0xfc, 0x34,
	0xd7, 0x56, 0x49, 0x5d, 0x18, 0xd2, 0x0e, 0x1a, 0xa1, 0x3f, 0x7a, 0x5c, 0x95, 0xb4, 0xe7, 0xc8,
	0xad, 0xc4, 0xf8, 0x0e, 0xc3, 0xaf, 0xd0, 0xd9, 0xb7, 0x74, 0x61, 0x94, 0x2e, 0xc8, 0x05, 0xdc,
	0x8d, 0xab, 0x92, 0x76, 0x9c, 0xa3, 0x16, 0x18, 0xdf, 0x20, 0x78, 0x8c, 0x9a, 0xeb, 0x95, 0x34,
	0xa4, 0x03, 0x33, 0x7a, 0x16, 0x1d, 0xec, 0x79, 0x54, 0x6f, 0xe4, 0x17, 0x21, 0xe7, 0xfb, 0xcd,
	0x80, 0x89, 0x71, 0x67, 0xbe, 0x6e, 0x3f, 0xfc, 0xa4, 0x47, 0xdf, 0xef, 0xe9, 0xd1, 0x8f, 0x7b,
	0x7a, 0x34, 0x7a, 0xfe, 0xef, 0xef, 0xc0, 0xfb, 0xbd, 0x1a, 0x78, 0x0f, 0xab, 0x81, 0xf7, 0x67,
	0x35, 0xf0, 0xbe, 0x1e, 0xfe, 0x3d, 0x93, 0x53, 0x58, 0xf9, 0x37, 0xff, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xa3, 0xf3, 0x7f, 0x72, 0x69, 0x03, 0x00, 0x00,
}

func (this *StickerSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&data_stickerset.StickerSet{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Official: "+fmt.Sprintf("%#v", this.Official)+",\n")
	s = append(s, "Masks: "+fmt.Sprintf("%#v", this.Masks)+",\n")
	s = append(s, "Animated: "+fmt.Sprintf("%#v", this.Animated)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "ShortName: "+fmt.Sprintf("%#v", this.ShortName)+",\n")
	if this.Thumbs != nil {
		s = append(s, "Thumbs: "+fmt.Sprintf("%#v", this.Thumbs)+",\n")
	}
	s = append(s, "ThumbDcId: "+fmt.Sprintf("%#v", this.ThumbDcId)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "Emoticons: "+fmt.Sprintf("%#v", this.Emoticons)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Packs != nil {
		s = append(s, "Packs: "+fmt.Sprintf("%#v", this.Packs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStickerset(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Packs) > 0 {
		for iNdEx := len(m.Packs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickerset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Version != 0 {
		i = encodeVarintStickerset(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Emoticons) > 0 {
		for iNdEx := len(m.Emoticons) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Emoticons[iNdEx])
			copy(dAtA[i:], m.Emoticons[iNdEx])
			i = encodeVarintStickerset(dAtA, i, uint64(len(m.Emoticons[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Hash != 0 {
		i = encodeVarintStickerset(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x58
	}
	if m.Count != 0 {
		i = encodeVarintStickerset(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x50
	}
	if m.ThumbDcId != 0 {
		i = encodeVarintStickerset(dAtA, i, uint64(m.ThumbDcId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Thumbs) > 0 {
		for iNdEx := len(m.Thumbs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Thumbs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickerset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintStickerset(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintStickerset(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if m.AccessHash != 0 {
		i = encodeVarintStickerset(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x28
	}
	if m.Animated {
		i--
		if m.Animated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Masks {
		i--
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Official {
		i--
		if m.Official {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintStickerset(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStickerset(dAtA []byte, offset int, v uint64) int {
	offset -= sovStickerset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StickerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickerset(uint64(m.Id))
	}
	if m.Official {
		n += 2
	}
	if m.Masks {
		n += 2
	}
	if m.Animated {
		n += 2
	}
	if m.AccessHash != 0 {
		n += 1 + sovStickerset(uint64(m.AccessHash))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovStickerset(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovStickerset(uint64(l))
	}
	if len(m.Thumbs) > 0 {
		for _, e := range m.Thumbs {
			l = e.Size()
			n += 1 + l + sovStickerset(uint64(l))
		}
	}
	if m.ThumbDcId != 0 {
		n += 1 + sovStickerset(uint64(m.ThumbDcId))
	}
	if m.Count != 0 {
		n += 1 + sovStickerset(uint64(m.Count))
	}
	if m.Hash != 0 {
		n += 1 + sovStickerset(uint64(m.Hash))
	}
	if len(m.Emoticons) > 0 {
		for _, s := range m.Emoticons {
			l = len(s)
			n += 1 + l + sovStickerset(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovStickerset(uint64(m.Version))
	}
	if len(m.Packs) > 0 {
		for _, e := range m.Packs {
			l = e.Size()
			n += 1 + l + sovStickerset(uint64(l))
		}
	}
	return n
}

func sovStickerset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStickerset(x uint64) (n int) {
	return sovStickerset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickerset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Official = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Animated = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickerset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStickerset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickerset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStickerset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickerset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickerset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbs = append(m.Thumbs, &fs.Document{})
			if err := m.Thumbs[len(m.Thumbs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbDcId", wireType)
			}
			m.ThumbDcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThumbDcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickerset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStickerset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticons = append(m.Emoticons, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickerset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickerset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packs = append(m.Packs, &StickerPack{})
			if err := m.Packs[len(m.Packs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickerset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickerset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickerset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStickerset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStickerset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickerset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStickerset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStickerset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStickerset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStickerset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStickerset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStickerset = fmt.Errorf("proto: unexpected end of group")
)
