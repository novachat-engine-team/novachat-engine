// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stickerinstall.proto

package data_stickerset

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StickerInstall struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	UserId       int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id"`
	StickerSetId int64  `protobuf:"varint,3,opt,name=sticker_set_id,json=stickerSetId,proto3" json:"sticker_set_id,omitempty" bson:"sticker_set_id"`
	Installed    bool   `protobuf:"varint,4,opt,name=installed,proto3" json:"installed,omitempty" bson:"installed"`
	Date         int32  `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty" bson:"date"`
	Archived     bool   `protobuf:"varint,6,opt,name=archived,proto3" json:"archived,omitempty" bson:"archived"`
}

func (m *StickerInstall) Reset()         { *m = StickerInstall{} }
func (m *StickerInstall) String() string { return proto.CompactTextString(m) }
func (*StickerInstall) ProtoMessage()    {}
func (*StickerInstall) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c91a9df6d54cbdc, []int{0}
}
func (m *StickerInstall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerInstall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerInstall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerInstall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerInstall.Merge(m, src)
}
func (m *StickerInstall) XXX_Size() int {
	return m.Size()
}
func (m *StickerInstall) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerInstall.DiscardUnknown(m)
}

var xxx_messageInfo_StickerInstall proto.InternalMessageInfo

func (m *StickerInstall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StickerInstall) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StickerInstall) GetStickerSetId() int64 {
	if m != nil {
		return m.StickerSetId
	}
	return 0
}

func (m *StickerInstall) GetInstalled() bool {
	if m != nil {
		return m.Installed
	}
	return false
}

func (m *StickerInstall) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *StickerInstall) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

type StickerSetRecent struct {
	UserId int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"_id"`
	Faved  []int64 `protobuf:"varint,2,rep,packed,name=faved,proto3" json:"faved,omitempty" bson:"faved"`
	Recent []int64 `protobuf:"varint,3,rep,packed,name=recent,proto3" json:"recent,omitempty" bson:"recent"`
}

func (m *StickerSetRecent) Reset()         { *m = StickerSetRecent{} }
func (m *StickerSetRecent) String() string { return proto.CompactTextString(m) }
func (*StickerSetRecent) ProtoMessage()    {}
func (*StickerSetRecent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c91a9df6d54cbdc, []int{1}
}
func (m *StickerSetRecent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerSetRecent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerSetRecent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerSetRecent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerSetRecent.Merge(m, src)
}
func (m *StickerSetRecent) XXX_Size() int {
	return m.Size()
}
func (m *StickerSetRecent) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerSetRecent.DiscardUnknown(m)
}

var xxx_messageInfo_StickerSetRecent proto.InternalMessageInfo

func (m *StickerSetRecent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *StickerSetRecent) GetFaved() []int64 {
	if m != nil {
		return m.Faved
	}
	return nil
}

func (m *StickerSetRecent) GetRecent() []int64 {
	if m != nil {
		return m.Recent
	}
	return nil
}

func init() {
	proto.RegisterType((*StickerInstall)(nil), "data_stickerset.StickerInstall")
	proto.RegisterType((*StickerSetRecent)(nil), "data_stickerset.StickerSetRecent")
}

func init() { proto.RegisterFile("stickerinstall.proto", fileDescriptor_4c91a9df6d54cbdc) }

var fileDescriptor_4c91a9df6d54cbdc = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x31, 0xee, 0xd3, 0x30,
	0x14, 0xc6, 0xeb, 0xe4, 0xdf, 0xd0, 0x9a, 0x92, 0x16, 0x53, 0xa4, 0xc0, 0x10, 0x07, 0x23, 0x41,
	0x10, 0xa2, 0x95, 0x60, 0xeb, 0x82, 0x94, 0xad, 0xab, 0xbb, 0xb1, 0x44, 0x49, 0xec, 0xb6, 0x16,
	0xa5, 0x41, 0x89, 0xcb, 0x39, 0x18, 0x19, 0x58, 0xe8, 0x21, 0x38, 0x03, 0x63, 0x4f, 0x60, 0x41,
	0x4f, 0x80, 0x7c, 0x82, 0xbf, 0x62, 0xa7, 0xad, 0xda, 0xcd, 0xfe, 0xbe, 0xdf, 0xf7, 0xfc, 0xfc,
	0xf4, 0xe0, 0xb8, 0x96, 0xa2, 0xf8, 0xcc, 0x2b, 0xb1, 0xad, 0x65, 0xb6, 0xd9, 0x4c, 0xbe, 0x56,
	0xa5, 0x2c, 0xd1, 0x90, 0x65, 0x32, 0x4b, 0x5b, 0xab, 0xe6, 0xf2, 0xf9, 0xbb, 0x95, 0x90, 0xeb,
	0x5d, 0x3e, 0x29, 0xca, 0x2f, 0xd3, 0x55, 0xb9, 0x2a, 0xa7, 0x86, 0xcb, 0x77, 0x4b, 0x73, 0x33,
	0x17, 0x73, 0xb2, 0x79, 0xf2, 0xdb, 0x81, 0xfe, 0xc2, 0xa6, 0xe7, 0xb6, 0x30, 0x0a, 0xa1, 0x23,
	0x58, 0x00, 0x22, 0x10, 0xf7, 0x13, 0x5f, 0x2b, 0x0c, 0xf3, 0xba, 0xdc, 0xce, 0x48, 0x2a, 0x18,
	0xa1, 0x8e, 0x60, 0xe8, 0x2d, 0x7c, 0xb0, 0xab, 0x79, 0x95, 0x0a, 0x16, 0x38, 0x11, 0x88, 0xdd,
	0x04, 0x69, 0x85, 0x7d, 0x0b, 0xb5, 0x06, 0xa1, 0x5e, 0x73, 0x9a, 0x33, 0xf4, 0x11, 0xfa, 0x6d,
	0x73, 0x69, 0xcd, 0x65, 0x93, 0x71, 0x4d, 0xe6, 0x99, 0x56, 0xf8, 0xa9, 0xcd, 0x5c, 0xfb, 0x84,
	0x0e, 0x5a, 0x61, 0xc1, 0xe5, 0x9c, 0xa1, 0xf7, 0xb0, 0xdf, 0xfe, 0x98, 0xb3, 0xe0, 0x2e, 0x02,
	0x71, 0x2f, 0x19, 0x6b, 0x85, 0x47, 0x36, 0x7b, 0xb6, 0x08, 0xbd, 0x60, 0xe8, 0x25, 0xbc, 0x63,
	0x99, 0xe4, 0x41, 0x37, 0x02, 0x71, 0x37, 0x19, 0x6a, 0x85, 0x1f, 0x5a, 0xbc, 0x51, 0x09, 0x35,
	0x26, 0x9a, 0xc2, 0x5e, 0x56, 0x15, 0x6b, 0xf1, 0x8d, 0xb3, 0xc0, 0x33, 0x75, 0x9f, 0x68, 0x85,
	0x87, 0x16, 0x3c, 0x39, 0x84, 0x9e, 0xa1, 0xd9, 0xe0, 0xf0, 0x0b, 0x77, 0xbe, 0xef, 0x71, 0xe7,
	0xc7, 0x1e, 0x77, 0xc8, 0x4f, 0x00, 0x47, 0x8b, 0x73, 0xa3, 0x94, 0x17, 0x7c, 0x2b, 0xd1, 0xeb,
	0xcb, 0x68, 0x80, 0xf9, 0xe6, 0xed, 0xfc, 0x4e, 0x63, 0x79, 0x05, 0xbb, 0xcb, 0xac, 0x79, 0xd9,
	0x89, 0xdc, 0xd8, 0x4d, 0x46, 0x5a, 0xe1, 0x81, 0xc5, 0x8c, 0x4c, 0xa8, 0xb5, 0xd1, 0x1b, 0xe8,
	0x55, 0xa6, 0x74, 0xe0, 0x1a, 0xf0, 0xb1, 0x56, 0xf8, 0x91, 0x05, 0xad, 0x4e, 0x68, 0x0b, 0x5c,
	0xb7, 0x97, 0xbc, 0xf8, 0xff, 0x2f, 0x04, 0x7f, 0x8e, 0x21, 0x38, 0x1c, 0x43, 0xf0, 0xf7, 0x18,
	0x82, 0x4f, 0xb7, 0x9b, 0x92, 0x7b, 0x66, 0x03, 0x3e, 0xdc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x16,
	0x36, 0xbe, 0x04, 0x59, 0x02, 0x00, 0x00,
}

func (this *StickerInstall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&data_stickerset.StickerInstall{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "StickerSetId: "+fmt.Sprintf("%#v", this.StickerSetId)+",\n")
	s = append(s, "Installed: "+fmt.Sprintf("%#v", this.Installed)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "Archived: "+fmt.Sprintf("%#v", this.Archived)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StickerSetRecent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&data_stickerset.StickerSetRecent{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Faved: "+fmt.Sprintf("%#v", this.Faved)+",\n")
	s = append(s, "Recent: "+fmt.Sprintf("%#v", this.Recent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStickerinstall(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StickerInstall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerInstall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerInstall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Date != 0 {
		i = encodeVarintStickerinstall(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x28
	}
	if m.Installed {
		i--
		if m.Installed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StickerSetId != 0 {
		i = encodeVarintStickerinstall(dAtA, i, uint64(m.StickerSetId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintStickerinstall(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStickerinstall(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StickerSetRecent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSetRecent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerSetRecent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recent) > 0 {
		dAtA2 := make([]byte, len(m.Recent)*10)
		var j1 int
		for _, num1 := range m.Recent {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStickerinstall(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Faved) > 0 {
		dAtA4 := make([]byte, len(m.Faved)*10)
		var j3 int
		for _, num1 := range m.Faved {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintStickerinstall(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintStickerinstall(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStickerinstall(dAtA []byte, offset int, v uint64) int {
	offset -= sovStickerinstall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StickerInstall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStickerinstall(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovStickerinstall(uint64(m.UserId))
	}
	if m.StickerSetId != 0 {
		n += 1 + sovStickerinstall(uint64(m.StickerSetId))
	}
	if m.Installed {
		n += 2
	}
	if m.Date != 0 {
		n += 1 + sovStickerinstall(uint64(m.Date))
	}
	if m.Archived {
		n += 2
	}
	return n
}

func (m *StickerSetRecent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovStickerinstall(uint64(m.UserId))
	}
	if len(m.Faved) > 0 {
		l = 0
		for _, e := range m.Faved {
			l += sovStickerinstall(uint64(e))
		}
		n += 1 + sovStickerinstall(uint64(l)) + l
	}
	if len(m.Recent) > 0 {
		l = 0
		for _, e := range m.Recent {
			l += sovStickerinstall(uint64(e))
		}
		n += 1 + sovStickerinstall(uint64(l)) + l
	}
	return n
}

func sovStickerinstall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStickerinstall(x uint64) (n int) {
	return sovStickerinstall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StickerInstall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickerinstall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerInstall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerInstall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickerinstall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStickerinstall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetId", wireType)
			}
			m.StickerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerSetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Installed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Installed = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStickerinstall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickerinstall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickerinstall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerSetRecent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickerinstall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSetRecent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSetRecent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStickerinstall
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Faved = append(m.Faved, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStickerinstall
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStickerinstall
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStickerinstall
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Faved) == 0 {
					m.Faved = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStickerinstall
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Faved = append(m.Faved, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Faved", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStickerinstall
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Recent = append(m.Recent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStickerinstall
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStickerinstall
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStickerinstall
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Recent) == 0 {
					m.Recent = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStickerinstall
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Recent = append(m.Recent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Recent", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickerinstall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickerinstall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickerinstall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStickerinstall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStickerinstall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickerinstall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStickerinstall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStickerinstall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStickerinstall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStickerinstall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStickerinstall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStickerinstall = fmt.Errorf("proto: unexpected end of group")
)
