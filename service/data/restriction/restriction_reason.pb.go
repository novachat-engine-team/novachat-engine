// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restriction_reason.proto

package data_restriction

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RestrictionReason struct {
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" bson:"platform"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty" bson:"reason"`
	Text     string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty" bson:"text"`
}

func (m *RestrictionReason) Reset()         { *m = RestrictionReason{} }
func (m *RestrictionReason) String() string { return proto.CompactTextString(m) }
func (*RestrictionReason) ProtoMessage()    {}
func (*RestrictionReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6ad1cbc10c142d9, []int{0}
}
func (m *RestrictionReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestrictionReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestrictionReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestrictionReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestrictionReason.Merge(m, src)
}
func (m *RestrictionReason) XXX_Size() int {
	return m.Size()
}
func (m *RestrictionReason) XXX_DiscardUnknown() {
	xxx_messageInfo_RestrictionReason.DiscardUnknown(m)
}

var xxx_messageInfo_RestrictionReason proto.InternalMessageInfo

func (m *RestrictionReason) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *RestrictionReason) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RestrictionReason) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*RestrictionReason)(nil), "data_restriction.RestrictionReason")
}

func init() { proto.RegisterFile("restriction_reason.proto", fileDescriptor_a6ad1cbc10c142d9) }

var fileDescriptor_a6ad1cbc10c142d9 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x4a, 0x2d, 0x2e,
	0x29, 0xca, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0x4a, 0x4d, 0x2c, 0xce, 0xcf, 0xd3, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0x49, 0x2c, 0x49, 0x8c, 0x47, 0x92, 0x96, 0xd2, 0x4d,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07,
	0x2b, 0x4c, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0x62, 0x80, 0xd2, 0x22, 0x46, 0x2e,
	0xc1, 0x20, 0x84, 0xf6, 0x20, 0xb0, 0xe1, 0x42, 0xfa, 0x5c, 0x1c, 0x05, 0x39, 0x89, 0x25, 0x69,
	0xf9, 0x45, 0xb9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0xc2, 0x9f, 0xee, 0xc9, 0xf3, 0x27,
	0x15, 0xe7, 0xe7, 0x59, 0x29, 0xc1, 0x64, 0x94, 0x82, 0xe0, 0x8a, 0x84, 0x34, 0xb9, 0xd8, 0x20,
	0xee, 0x92, 0x60, 0x02, 0x2b, 0x17, 0xfc, 0x74, 0x4f, 0x9e, 0x17, 0xa2, 0x1c, 0x22, 0xae, 0x14,
	0x04, 0x55, 0x20, 0xa4, 0xcc, 0xc5, 0x52, 0x92, 0x5a, 0x51, 0x22, 0xc1, 0x0c, 0x56, 0xc8, 0xff,
	0xe9, 0x9e, 0x3c, 0x37, 0x44, 0x21, 0x48, 0x54, 0x29, 0x08, 0x2c, 0x69, 0xc5, 0x73, 0x61, 0xa1,
	0x3c, 0xc3, 0x84, 0x45, 0xf2, 0x0c, 0x33, 0x16, 0xc9, 0x33, 0x38, 0x29, 0x7d, 0x78, 0x28, 0xc7,
	0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x46, 0x61, 0xf8,
	0x3b, 0x89, 0x0d, 0xec, 0x1f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x7f, 0xeb, 0xb0,
	0x2c, 0x01, 0x00, 0x00,
}

func (this *RestrictionReason) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&data_restriction.RestrictionReason{")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRestrictionReason(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RestrictionReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestrictionReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestrictionReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintRestrictionReason(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRestrictionReason(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintRestrictionReason(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRestrictionReason(dAtA []byte, offset int, v uint64) int {
	offset -= sovRestrictionReason(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RestrictionReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovRestrictionReason(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRestrictionReason(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovRestrictionReason(uint64(l))
	}
	return n
}

func sovRestrictionReason(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRestrictionReason(x uint64) (n int) {
	return sovRestrictionReason(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RestrictionReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestrictionReason
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestrictionReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestrictionReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestrictionReason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestrictionReason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestrictionReason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestrictionReason(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRestrictionReason
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRestrictionReason(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRestrictionReason
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestrictionReason
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestrictionReason
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRestrictionReason
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRestrictionReason
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRestrictionReason
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRestrictionReason        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRestrictionReason          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRestrictionReason = fmt.Errorf("proto: unexpected end of group")
)
