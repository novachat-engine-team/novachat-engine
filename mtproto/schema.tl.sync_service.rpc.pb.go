// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.tl.sync_service.rpc.proto

package mtproto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("schema.tl.sync_service.rpc.proto", fileDescriptor_d145fd384b886ee0) }

var fileDescriptor_d145fd384b886ee0 = []byte{
	// 6944 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x7d, 0x3b, 0x73, 0x1c, 0x49,
	0x72, 0xff, 0xf0, 0xee, 0x7f, 0xff, 0x0b, 0xb5, 0xee, 0x96, 0xe4, 0x10, 0x7c, 0x0d, 0x41, 0x10,
	0x18, 0x60, 0xf9, 0xd8, 0xbd, 0xe3, 0x2a, 0x70, 0x86, 0x2c, 0xc5, 0x05, 0x1e, 0x04, 0xf8, 0x00,
	0xc9, 0x59, 0x0c, 0x40, 0x1e, 0x6f, 0x77, 0x0f, 0x5b, 0xe8, 0xae, 0x99, 0x69, 0xa2, 0xa7, 0x7b,
	0xb6, 0xbb, 0x07, 0x5c, 0x5c, 0x84, 0xcc, 0xf3, 0x65, 0xc9, 0xd2, 0x27, 0x90, 0x2f, 0x43, 0x9f,
	0x40, 0xb2, 0x14, 0x92, 0x2d, 0x47, 0x5a, 0x57, 0x8e, 0x0c, 0x29, 0x64, 0x28, 0x14, 0xa1, 0xe8,
	0x7a, 0x66, 0x55, 0x65, 0x55, 0x0f, 0x65, 0x91, 0xe8, 0xfc, 0x75, 0x56, 0x75, 0x55, 0x56, 0xbe,
	0x2a, 0xab, 0x26, 0x5a, 0xad, 0xe2, 0x09, 0x9d, 0x92, 0xc7, 0x75, 0xf6, 0xb8, 0xba, 0xc8, 0xe3,
	0x93, 0x8a, 0x96, 0xe7, 0x69, 0x4c, 0x1f, 0x97, 0xb3, 0xf8, 0xf1, 0xac, 0x2c, 0xea, 0xa2, 0xfb,
	0xd3, 0x69, 0xcd, 0xfe, 0xd3, 0xfb, 0xe5, 0x38, 0xad, 0x27, 0xf3, 0xd3, 0xc7, 0x71, 0x31, 0xfd,
	0x62, 0x5c, 0x8c, 0x8b, 0x2f, 0xd8, 0xe3, 0xd3, 0xf9, 0x88, 0xfd, 0xc5, 0xfe, 0x60, 0xff, 0xe3,
	0xef, 0xf5, 0x6e, 0x0b, 0xce, 0x92, 0x63, 0x7d, 0x31, 0xa3, 0x82, 0xd4, 0xd3, 0x8d, 0xc6, 0x45,
	0x49, 0x4f, 0x1a, 0x52, 0x25, 0x68, 0x4b, 0x66, 0x87, 0xc4, 0xd3, 0x65, 0x4f, 0x37, 0x19, 0x75,
	0xf3, 0xbf, 0x1f, 0x47, 0x57, 0x0f, 0x07, 0x3b, 0x5b, 0x71, 0x5c, 0xcc, 0xf3, 0x7a, 0xc8, 0x69,
	0xdd, 0x97, 0xd1, 0x0d, 0xc2, 0x9f, 0x9c, 0x94, 0x74, 0x9c, 0x56, 0x35, 0x2d, 0x77, 0x29, 0xa3,
	0xf4, 0x1f, 0x8b, 0x6f, 0x7a, 0x7c, 0x74, 0x70, 0x82, 0x63, 0x7a, 0x3f, 0x57, 0x98, 0xed, 0xa2,
	0xc8, 0xfa, 0x9d, 0xee, 0x97, 0xd1, 0x2d, 0x09, 0x9d, 0xe7, 0x16, 0xc3, 0x0d, 0x8c, 0xa1, 0x8d,
	0x72, 0x59, 0xbe, 0x8b, 0x96, 0x15, 0x78, 0x96, 0x90, 0x9a, 0xbe, 0x2a, 0xea, 0x74, 0x74, 0x31,
	0xa4, 0x75, 0x9d, 0xe6, 0xe3, 0xaa, 0xfb, 0x10, 0x65, 0x8b, 0x20, 0x5d, 0xd6, 0x24, 0xba, 0x2d,
	0x5f, 0x18, 0xd3, 0xda, 0xe2, 0xfb, 0x29, 0xc6, 0xd7, 0x81, 0xf5, 0xee, 0x28, 0xd8, 0x80, 0xd2,
	0xd2, 0x24, 0xf6, 0x3b, 0xdd, 0xb7, 0xd1, 0x1d, 0x3d, 0x76, 0x95, 0xd3, 0xc8, 0x03, 0x7c, 0x90,
	0x1d, 0xa0, 0xdb, 0xf7, 0x17, 0xd1, 0x75, 0xf3, 0x63, 0x07, 0x65, 0x31, 0x4a, 0x33, 0xda, 0x5d,
	0xf3, 0x8f, 0x87, 0x80, 0x00, 0x66, 0xc7, 0x15, 0x2d, 0xfb, 0x9d, 0xee, 0xb3, 0x68, 0xc9, 0x44,
	0x0e, 0x6b, 0x52, 0xcf, 0xab, 0xee, 0xaa, 0x9f, 0x17, 0x47, 0xb8, 0xfd, 0x4a, 0x74, 0xbf, 0xc6,
	0xb4, 0x7e, 0x4b, 0xb2, 0x6c, 0x40, 0x66, 0xb4, 0xac, 0xf0, 0x7e, 0x19, 0x90, 0xde, 0x7d, 0x05,
	0x39, 0xa4, 0xd5, 0xac, 0xc8, 0x2b, 0x7a, 0x22, 0xc4, 0x75, 0x1f, 0xe2, 0xfa, 0x9d, 0xee, 0x93,
	0xa8, 0xab, 0x47, 0x6b, 0x56, 0x94, 0x75, 0x33, 0xf8, 0xdd, 0x15, 0x7c, 0x34, 0x25, 0x3d, 0x38,
	0x88, 0xf1, 0x84, 0xc6, 0x67, 0xcd, 0x70, 0xe4, 0x64, 0xea, 0x19, 0x44, 0x03, 0xe2, 0x32, 0x03,
	0x4b, 0x89, 0x0f, 0x91, 0xe2, 0xd6, 0xf7, 0x0f, 0x23, 0xc2, 0x4e, 0xcc, 0xc9, 0xb1, 0xfe, 0xc4,
	0x31, 0xad, 0x07, 0x65, 0x7a, 0x4e, 0xe2, 0x0b, 0xfc, 0x13, 0x35, 0xbd, 0x77, 0x57, 0xd1, 0x25,
	0x51, 0x50, 0x0e, 0xe7, 0x19, 0xad, 0x4c, 0xb6, 0x55, 0x0b, 0xdb, 0xea, 0x23, 0xd8, 0x82, 0x91,
	0x4c, 0x68, 0x46, 0x6b, 0x2a, 0x26, 0x0e, 0x1f, 0x49, 0x03, 0xe2, 0x8e, 0xe4, 0xb1, 0x21, 0x43,
	0x02, 0x76, 0x74, 0x74, 0xe0, 0x95, 0x21, 0x0d, 0xe9, 0xdd, 0x54, 0x10, 0xf1, 0x70, 0x97, 0x5c,
	0x54, 0x47, 0x47, 0x07, 0x66, 0x1f, 0xab, 0x76, 0xb6, 0x06, 0xc4, 0xed, 0xe3, 0xb7, 0x7a, 0x61,
	0x57, 0x34, 0x4f, 0x76, 0x26, 0x24, 0x1f, 0xd3, 0xc1, 0xa4, 0xc8, 0xe9, 0x4e, 0x91, 0x50, 0x7c,
	0x61, 0x23, 0xc0, 0xde, 0x0d, 0x3d, 0xb2, 0xf3, 0x7a, 0x72, 0x32, 0xa4, 0x79, 0xdd, 0x3c, 0xef,
	0x77, 0xba, 0xfb, 0xd1, 0x35, 0x2d, 0x79, 0xea, 0xa5, 0xee, 0x3d, 0x5c, 0x34, 0x15, 0x00, 0x93,
	0xa4, 0x9e, 0x29, 0x74, 0x5c, 0xd5, 0x1e, 0x14, 0xf1, 0x19, 0x4d, 0xba, 0xf7, 0xfd, 0xc2, 0x09,
	0x71, 0xee, 0x08, 0x50, 0x43, 0x7b, 0x6e, 0xcd, 0xeb, 0x49, 0x51, 0xa6, 0xbf, 0x27, 0x75, 0x5a,
	0xe4, 0x7e, 0xed, 0x69, 0xc2, 0x7a, 0xf7, 0x1c, 0xb9, 0x32, 0x01, 0x66, 0xef, 0x99, 0x62, 0x34,
	0x00, 0x78, 0xef, 0x5d, 0x9c, 0xdb, 0xfb, 0xa1, 0x1e, 0xdd, 0x66, 0xf9, 0x90, 0xaa, 0xfa, 0x50,
	0x94, 0x09, 0x3e, 0xba, 0x00, 0xd0, 0xbb, 0xed, 0xae, 0x04, 0x41, 0xea, 0x77, 0xba, 0x67, 0x5a,
	0x28, 0xc0, 0x3b, 0x61, 0x6d, 0x8f, 0x00, 0x7b, 0x6b, 0xde, 0x46, 0x80, 0x69, 0xf9, 0x26, 0x5a,
	0xb1, 0xd4, 0xbb, 0xdd, 0xde, 0x67, 0x01, 0x53, 0x60, 0x37, 0xe9, 0x0c, 0xd0, 0xa9, 0xb6, 0xbb,
	0x4c, 0x6e, 0x8b, 0x7c, 0x94, 0x96, 0x53, 0x2d, 0xe1, 0x0f, 0xbd, 0x12, 0x6e, 0x21, 0x03, 0x22,
	0x0e, 0xec, 0x4e, 0x0c, 0xde, 0xc2, 0xed, 0x0e, 0x44, 0xb8, 0xdd, 0xfd, 0x5a, 0x6b, 0xdf, 0x31,
	0xad, 0x8f, 0xa6, 0x33, 0x35, 0xa5, 0x7d, 0xcf, 0xa8, 0x03, 0x4c, 0x6f, 0xd9, 0x19, 0x70, 0x40,
	0xed, 0x77, 0xba, 0xb9, 0x1e, 0x8c, 0xc6, 0x64, 0xd1, 0x53, 0x4b, 0xdc, 0x1f, 0xfa, 0x8c, 0x9b,
	0x8d, 0xec, 0xf5, 0x9d, 0x96, 0x1c, 0x4c, 0xbf, 0xd3, 0xfd, 0x2a, 0xba, 0x6b, 0x08, 0xb3, 0x8d,
	0xe9, 0x3e, 0xf2, 0xca, 0xbd, 0x0d, 0x75, 0x87, 0x0a, 0x08, 0x0e, 0xfa, 0x86, 0x47, 0x70, 0x70,
	0xac, 0xcb, 0x3e, 0xd6, 0x0b, 0xb6, 0x59, 0xf0, 0x59, 0x36, 0xa4, 0xf1, 0xbc, 0xa4, 0x6f, 0x48,
	0x36, 0xa7, 0x15, 0xbe, 0x60, 0x5d, 0x1c, 0xf0, 0xab, 0xde, 0xd0, 0xb8, 0x2e, 0xca, 0x13, 0x40,
	0x65, 0x03, 0x04, 0xa7, 0x1b, 0xd0, 0xbc, 0xd3, 0x0d, 0x30, 0x6d, 0xcc, 0xdf, 0x44, 0x37, 0x95,
	0x40, 0x93, 0x73, 0x0a, 0xb9, 0xaf, 0xa3, 0x52, 0x6f, 0x82, 0x7a, 0x4b, 0x0a, 0x64, 0xf2, 0x1d,
	0x6a, 0x8d, 0xc9, 0x2d, 0x20, 0xe4, 0xfc, 0xa9, 0xdf, 0x50, 0x42, 0xde, 0xce, 0x70, 0x9b, 0xa2,
	0x69, 0x4c, 0xce, 0x5e, 0x51, 0x4e, 0xbd, 0xa2, 0xe9, 0x20, 0x11, 0xd1, 0x74, 0x30, 0xa6, 0x47,
	0x4b, 0xe2, 0x98, 0xce, 0x2c, 0x85, 0x8c, 0xea, 0x38, 0x04, 0xd8, 0x6a, 0x51, 0xdf, 0xd0, 0x32,
	0x1d, 0x5d, 0x2c, 0x60, 0x51, 0x2d, 0xe0, 0x62, 0x16, 0xf5, 0x5c, 0xbf, 0x84, 0xeb, 0x7c, 0x00,
	0x70, 0xbb, 0x3a, 0xc1, 0xba, 0xfa, 0x64, 0x4a, 0xd2, 0x6c, 0x91, 0xae, 0x2a, 0x60, 0x6f, 0xc5,
	0x19, 0xf1, 0xa6, 0xb7, 0x8a, 0x8e, 0x75, 0x99, 0x11, 0x43, 0x5d, 0x66, 0x00, 0x6c, 0x74, 0xd5,
	0xaa, 0x4c, 0xf3, 0xb4, 0x3e, 0x22, 0x67, 0xb4, 0x98, 0xd7, 0x43, 0x5a, 0x55, 0x5e, 0x33, 0xea,
	0xe2, 0x7a, 0xb7, 0x5c, 0x3d, 0xc9, 0x01, 0x66, 0xa0, 0x36, 0x4a, 0xf3, 0xb4, 0x9a, 0x58, 0x6d,
	0xa0, 0x82, 0x88, 0x21, 0x83, 0x31, 0xa0, 0xb4, 0x02, 0x42, 0x37, 0xf3, 0xe1, 0x78, 0x18, 0xb2,
	0x17, 0x10, 0xe9, 0xb2, 0xb6, 0x02, 0xb4, 0x3c, 0x31, 0x39, 0x7b, 0x03, 0x34, 0x0b, 0x18, 0x64,
	0x1c, 0x93, 0x3c, 0xa6, 0xd9, 0x02, 0x8c, 0x11, 0xa0, 0xcb, 0x38, 0x8d, 0x36, 0xc0, 0x32, 0xde,
	0x29, 0xf2, 0x9a, 0xc4, 0xf5, 0x30, 0x1d, 0xe7, 0xc7, 0x33, 0x16, 0x34, 0xa6, 0x31, 0x5f, 0x89,
	0x7f, 0xe2, 0x59, 0xf8, 0xde, 0x37, 0x82, 0x4d, 0x55, 0x1f, 0xdd, 0x54, 0xf5, 0x51, 0x4d, 0xfd,
	0xd6, 0x70, 0x9d, 0x78, 0xf4, 0xfb, 0xe4, 0xfb, 0x46, 0x6d, 0x30, 0x8b, 0xf4, 0x20, 0x18, 0x8d,
	0x6b, 0x60, 0xef, 0x8a, 0xf6, 0x7e, 0x99, 0xa3, 0xd3, 0x58, 0xd3, 0x23, 0xad, 0xcf, 0xe7, 0xb3,
	0xac, 0x20, 0x89, 0x8a, 0x25, 0x71, 0x7d, 0x6e, 0x81, 0x7a, 0x5d, 0x05, 0x52, 0xcf, 0xfa, 0x9d,
	0xee, 0x2b, 0xed, 0xbc, 0xc0, 0x30, 0x16, 0x77, 0x5e, 0x20, 0xc2, 0xc3, 0x0f, 0x86, 0x27, 0xe4,
	0x9c, 0x6a, 0x86, 0x6b, 0x3e, 0x9b, 0xa3, 0x39, 0x86, 0x12, 0x31, 0x69, 0x5e, 0xd5, 0x24, 0xcb,
	0x34, 0xbf, 0x0d, 0x7c, 0xb1, 0x9b, 0x28, 0x97, 0xe5, 0x6b, 0x3d, 0x8a, 0xdc, 0x15, 0xd0, 0xb1,
	0xfd, 0xba, 0xdf, 0x5f, 0xd0, 0xd1, 0xbd, 0xc3, 0xf0, 0x43, 0x74, 0xcf, 0xb4, 0x47, 0xc5, 0x6e,
	0xf1, 0x21, 0x6f, 0x86, 0x5e, 0x79, 0xb0, 0x9f, 0xfb, 0x8d, 0x97, 0x03, 0xee, 0x7d, 0x8a, 0xd9,
	0x2f, 0x07, 0xc6, 0xf2, 0x3e, 0xab, 0x70, 0x18, 0xd1, 0x96, 0x7f, 0xe1, 0x1b, 0x74, 0xb4, 0x69,
	0x24, 0xb3, 0x70, 0xcd, 0x94, 0xa6, 0xa3, 0x09, 0x9d, 0x7a, 0x4c, 0x0d, 0x00, 0xf4, 0xae, 0x2a,
	0xc0, 0x6e, 0x11, 0xcf, 0xa7, 0x34, 0x6f, 0x34, 0xeb, 0x53, 0x10, 0x09, 0x96, 0x94, 0xd4, 0x34,
	0xc0, 0x0c, 0x00, 0x7a, 0x9f, 0x68, 0x40, 0xf3, 0xb7, 0xc9, 0x89, 0xc7, 0x01, 0xc1, 0x6e, 0x25,
	0x01, 0x4e, 0x3b, 0xd1, 0x55, 0x38, 0x2a, 0x9c, 0xcf, 0x5d, 0xdf, 0xa0, 0x71, 0x2e, 0xce, 0x28,
	0x01, 0xff, 0x5f, 0xc8, 0x1f, 0xe7, 0xb3, 0x1a, 0x90, 0x50, 0x0f, 0xab, 0xed, 0xe8, 0x0a, 0xf4,
	0xed, 0x19, 0x9b, 0x65, 0x9f, 0xe7, 0xef, 0xf9, 0xa6, 0x97, 0xfa, 0x9b, 0x24, 0xaa, 0xc2, 0xbf,
	0x49, 0x91, 0x41, 0xbe, 0x41, 0x59, 0x44, 0x46, 0x30, 0x23, 0x57, 0xa1, 0x0b, 0x69, 0x5e, 0x2b,
	0x01, 0xbb, 0x1f, 0xd0, 0x99, 0x00, 0x87, 0x39, 0x1f, 0x3d, 0x4b, 0x9b, 0xb7, 0xb2, 0x75, 0x71,
	0xbd, 0x55, 0xa7, 0xdf, 0x16, 0x82, 0xad, 0x13, 0xd8, 0xd2, 0xcb, 0x79, 0x56, 0xa7, 0x60, 0xd1,
	0xfb, 0x5a, 0xb2, 0x70, 0x20, 0x62, 0x16, 0xce, 0x36, 0x54, 0x7a, 0xa5, 0x5e, 0x8a, 0x63, 0x5a,
	0xef, 0x67, 0xc5, 0x29, 0xc9, 0x44, 0x6a, 0x29, 0xbc, 0x14, 0x7d, 0x68, 0xe0, 0x53, 0xa1, 0x74,
	0xb3, 0xcd, 0xea, 0xa3, 0xda, 0xac, 0xfe, 0xcf, 0x6d, 0x6e, 0xfe, 0xe7, 0xcf, 0xa2, 0x4f, 0x0e,
	0x07, 0x3b, 0x8d, 0x0b, 0x2c, 0x53, 0xef, 0x07, 0xd1, 0x65, 0xe6, 0xa0, 0xb2, 0xb4, 0x22, 0xf7,
	0x44, 0xef, 0x18, 0xad, 0x9a, 0xc4, 0x5e, 0xcf, 0xf4, 0x6b, 0x77, 0x1a, 0x0a, 0x4d, 0x18, 0xad,
	0xdf, 0xe9, 0xee, 0x46, 0x3f, 0x67, 0x8f, 0x79, 0x04, 0x9e, 0xd0, 0xee, 0x6d, 0x87, 0x97, 0x24,
	0x05, 0x3c, 0xe4, 0x27, 0xd1, 0x1f, 0x73, 0x28, 0xb3, 0xd8, 0xdd, 0x9b, 0x2e, 0x0f, 0x46, 0x00,
	0x01, 0x14, 0x7b, 0x6a, 0x78, 0xf6, 0x16, 0x9b, 0x67, 0xb9, 0x87, 0xcd, 0xb3, 0xbc, 0x8d, 0xcd,
	0x9f, 0x0a, 0x36, 0x59, 0x31, 0x7e, 0x3d, 0xaf, 0x11, 0x36, 0x9c, 0x80, 0x5b, 0xbf, 0x86, 0xee,
	0x26, 0x82, 0x2a, 0xcb, 0xfa, 0x79, 0x50, 0x2e, 0xcb, 0xad, 0xe8, 0x8a, 0x1a, 0xc4, 0x67, 0xf9,
	0x79, 0x5a, 0xd3, 0xca, 0xd2, 0x2f, 0x16, 0xd5, 0x65, 0x31, 0x16, 0xbd, 0xa2, 0xdf, 0xcf, 0x8a,
	0xd2, 0x0a, 0x9b, 0xdc, 0x5e, 0x21, 0xa8, 0xde, 0xba, 0x39, 0x5e, 0x4f, 0x18, 0x84, 0x26, 0xf6,
	0xb8, 0x9d, 0x88, 0x86, 0xd2, 0xe9, 0x22, 0x0d, 0x21, 0xa8, 0xb6, 0x89, 0x69, 0xf4, 0x76, 0xf3,
	0xfc, 0x34, 0xcd, 0x93, 0x23, 0x3a, 0x9d, 0x35, 0xf4, 0x17, 0xf4, 0xc2, 0xd2, 0xdb, 0x08, 0x02,
	0xcb, 0x22, 0xde, 0x01, 0xbd, 0xd8, 0x2e, 0x82, 0xe1, 0xa4, 0x1f, 0xd8, 0xd6, 0xe3, 0x61, 0xd4,
	0x05, 0xeb, 0x49, 0xa6, 0x86, 0x56, 0x3c, 0xeb, 0x4d, 0xa6, 0x85, 0x5a, 0x98, 0xbe, 0x8f, 0x96,
	0x85, 0x00, 0x7d, 0x37, 0xa7, 0x95, 0x4a, 0xe3, 0x1d, 0xd2, 0xb8, 0x38, 0xa7, 0xe5, 0x85, 0x15,
	0x96, 0x04, 0x90, 0x30, 0x10, 0x6c, 0x60, 0x36, 0x9d, 0x85, 0x13, 0x4b, 0x82, 0x03, 0x7b, 0xa4,
	0x3e, 0x61, 0x15, 0x69, 0xc3, 0x40, 0xb4, 0x7d, 0xc4, 0x53, 0xa1, 0x86, 0x78, 0x50, 0xc3, 0x54,
	0xc7, 0x1d, 0x74, 0x89, 0xb4, 0x2a, 0x8f, 0x5f, 0x4b, 0x85, 0xc6, 0xa2, 0x18, 0x0f, 0x27, 0x4d,
	0xc4, 0xb7, 0x63, 0x1a, 0x4c, 0x52, 0x16, 0x33, 0x20, 0x34, 0xf6, 0xde, 0x11, 0x06, 0x71, 0x99,
	0xbd, 0x11, 0xcc, 0xf8, 0x3a, 0x3a, 0x28, 0xc6, 0x69, 0x7e, 0x54, 0x9c, 0xd1, 0x1c, 0x61, 0x66,
	0x43, 0x60, 0x98, 0xdb, 0xd0, 0x35, 0x05, 0xf0, 0xe5, 0x72, 0x18, 0xe4, 0x6b, 0x43, 0x82, 0x7c,
	0x8f, 0x04, 0x5f, 0x9e, 0x2b, 0x09, 0xf2, 0xb5, 0x21, 0x60, 0x4e, 0xac, 0xd9, 0xdd, 0xfc, 0xc3,
	0x8f, 0x98, 0xdd, 0xd9, 0x2e, 0xea, 0x4a, 0xda, 0x9d, 0x2f, 0xa3, 0x1b, 0xa7, 0x45, 0x5d, 0x71,
	0x73, 0x30, 0xaf, 0xea, 0x62, 0x7a, 0xc8, 0xa5, 0xd2, 0x4c, 0x9d, 0xe1, 0x18, 0xe8, 0xa0, 0x92,
	0x9a, 0x3c, 0x1f, 0xbe, 0x7e, 0xc5, 0x63, 0x5d, 0x06, 0x27, 0x79, 0xf5, 0x81, 0x96, 0x6f, 0xe9,
	0xe9, 0xa4, 0x28, 0xce, 0x1a, 0xda, 0x97, 0xf3, 0x66, 0x1d, 0x3c, 0x70, 0xf8, 0xe2, 0x40, 0x77,
	0x12, 0xf7, 0xa3, 0x6b, 0xa2, 0x1f, 0xcd, 0x8a, 0xdf, 0x29, 0xa6, 0x53, 0x92, 0x27, 0x95, 0xe9,
	0xaf, 0x22, 0x00, 0x87, 0xd1, 0xe6, 0xdf, 0xad, 0x44, 0xdd, 0xc3, 0xc1, 0xce, 0xce, 0x84, 0xe4,
	0x39, 0xcd, 0xd4, 0x58, 0x3c, 0x8b, 0x96, 0x62, 0xf1, 0xe8, 0xa4, 0xa4, 0x24, 0x79, 0x9a, 0x56,
	0x75, 0x51, 0x5a, 0x8a, 0x0c, 0x43, 0x60, 0x1b, 0x9f, 0x37, 0x15, 0x90, 0xa7, 0xed, 0x5e, 0xd2,
	0xaa, 0x22, 0x63, 0x6a, 0x85, 0x47, 0x1e, 0x10, 0xc8, 0xbe, 0x4d, 0xc5, 0xa3, 0x93, 0xad, 0xd1,
	0x88, 0xc6, 0x35, 0x4d, 0x24, 0x86, 0x45, 0xe4, 0x3d, 0x8b, 0xc1, 0x71, 0x45, 0x4b, 0xd9, 0xed,
	0xfb, 0x81, 0x86, 0x00, 0x0e, 0xec, 0x2f, 0x38, 0x6d, 0x09, 0x08, 0x1f, 0x7b, 0xf0, 0xe5, 0x8d,
	0x24, 0x0f, 0x67, 0x64, 0x6a, 0x8e, 0x3d, 0x02, 0xc0, 0x56, 0xa2, 0x1e, 0xe4, 0xc6, 0x3f, 0x94,
	0xc3, 0x82, 0x0f, 0x32, 0x40, 0x00, 0x97, 0x47, 0xf5, 0xd3, 0x18, 0x8b, 0x5b, 0xf0, 0xad, 0x01,
	0x29, 0xeb, 0x34, 0x4e, 0x67, 0x24, 0xaf, 0x2d, 0x2b, 0xef, 0x43, 0x81, 0x88, 0x51, 0x41, 0x84,
	0x84, 0x40, 0x58, 0xbf, 0xd3, 0x1d, 0x81, 0xc9, 0x35, 0x99, 0x78, 0x26, 0xd7, 0x04, 0xf5, 0x36,
	0x16, 0x69, 0x88, 0x99, 0x29, 0x63, 0xa8, 0xa4, 0xb8, 0xfa, 0x87, 0x4a, 0x22, 0x40, 0x1c, 0xa2,
	0x86, 0x6a, 0x67, 0x42, 0x58, 0xe7, 0xbf, 0x36, 0x3b, 0xbf, 0x37, 0xcf, 0x32, 0xf1, 0x9a, 0xbf,
	0xf3, 0x00, 0x84, 0xcd, 0x42, 0xc3, 0xba, 0x81, 0xf4, 0x3b, 0xdd, 0x41, 0x74, 0x43, 0xbd, 0xc8,
	0x83, 0x4f, 0xc9, 0xbc, 0x8f, 0x32, 0x37, 0x30, 0x68, 0xba, 0xe6, 0x49, 0xd4, 0x55, 0x68, 0x9a,
	0xa4, 0xf5, 0xd6, 0x69, 0x31, 0xaf, 0x4d, 0x5b, 0xed, 0xd2, 0x5d, 0xb1, 0x7b, 0x6a, 0xb3, 0x49,
	0xa6, 0x69, 0x1e, 0x62, 0xd3, 0xd0, 0xd1, 0x0e, 0xd9, 0x9c, 0x8e, 0xd2, 0x3a, 0xa3, 0x01, 0x4e,
	0x8c, 0xbe, 0x10, 0xa7, 0xc1, 0xa4, 0xa8, 0x8b, 0x00, 0x27, 0x46, 0x47, 0x39, 0xbd, 0x84, 0xc3,
	0x6e, 0xd4, 0x2e, 0x78, 0x86, 0x3d, 0x5c, 0xbc, 0xf0, 0x1a, 0xc8, 0x88, 0x55, 0xbd, 0x80, 0xcb,
	0x88, 0xb7, 0x7c, 0x41, 0x30, 0x3c, 0x00, 0x92, 0xfc, 0xbe, 0x48, 0x73, 0x29, 0x14, 0xb8, 0x24,
	0x03, 0x04, 0xfa, 0xb5, 0xaf, 0xa2, 0xeb, 0x0a, 0x9b, 0x51, 0x72, 0xae, 0x64, 0x6c, 0x0d, 0x65,
	0x07, 0x21, 0x9e, 0x8c, 0xa0, 0x56, 0x1d, 0x29, 0xf3, 0xd7, 0x8f, 0x0a, 0xc9, 0x12, 0x57, 0x1d,
	0x16, 0x0a, 0xe5, 0xfa, 0x0e, 0xf4, 0x92, 0xfb, 0x14, 0x3c, 0x16, 0xf0, 0xf4, 0x12, 0x42, 0x80,
	0x97, 0x26, 0xbd, 0xfa, 0x66, 0x8d, 0x71, 0xa2, 0xb5, 0xca, 0xb8, 0x3e, 0x0f, 0xaf, 0x32, 0x03,
	0x83, 0x76, 0x16, 0x72, 0xac, 0x8b, 0xf1, 0x38, 0xa3, 0x32, 0xac, 0xc1, 0x39, 0x1a, 0x18, 0x94,
	0x63, 0x02, 0x6c, 0x13, 0xff, 0x36, 0xa1, 0xac, 0x0f, 0xd2, 0xfc, 0xcc, 0x63, 0x9b, 0x1c, 0x1c,
	0xd8, 0x8a, 0x95, 0x03, 0x01, 0xa8, 0xcc, 0x9a, 0xdc, 0xb6, 0xfa, 0x34, 0x4c, 0xc7, 0x39, 0xa9,
	0xe7, 0x25, 0xb5, 0xca, 0x0e, 0xbc, 0x30, 0xb4, 0xf7, 0x5f, 0x47, 0xcb, 0x96, 0x70, 0x0f, 0xd2,
	0x3c, 0x57, 0xad, 0x9b, 0xce, 0x7c, 0x08, 0x89, 0x72, 0x9f, 0x46, 0x6b, 0x50, 0xbd, 0x32, 0x5d,
	0x43, 0x93, 0xc1, 0xfc, 0x34, 0x4b, 0x63, 0xa5, 0xe5, 0x7f, 0xe9, 0xd3, 0xc6, 0x28, 0x3c, 0xa4,
	0xf2, 0x9f, 0x03, 0xdb, 0xdd, 0xe8, 0x91, 0xed, 0xe6, 0xff, 0x89, 0xc7, 0x76, 0x6b, 0x00, 0xda,
	0xf5, 0x6f, 0x4c, 0x9b, 0xc4, 0xfa, 0x72, 0x50, 0x8c, 0xfd, 0x36, 0x49, 0x22, 0x80, 0x9b, 0xa1,
	0xc8, 0x92, 0x76, 0x48, 0xab, 0x79, 0xc6, 0xba, 0x0a, 0x5d, 0xb0, 0x8a, 0xd6, 0xc3, 0x3a, 0x8d,
	0xcf, 0x68, 0xe9, 0x33, 0x79, 0x00, 0x81, 0x6e, 0x13, 0x19, 0xbe, 0x9a, 0x98, 0x10, 0x91, 0xd8,
	0xaa, 0x3c, 0x53, 0x88, 0x20, 0xd1, 0x72, 0x11, 0xf8, 0x89, 0xbb, 0x29, 0xc9, 0x8a, 0x71, 0xe5,
	0x19, 0x50, 0x0d, 0x00, 0xc9, 0x2f, 0x35, 0x47, 0x82, 0xc4, 0xbc, 0x8a, 0x65, 0xf8, 0xce, 0x33,
	0x16, 0x2e, 0x90, 0xbc, 0x96, 0xee, 0xdc, 0x43, 0x1f, 0x77, 0x1b, 0xd9, 0xe2, 0x28, 0x1d, 0x02,
	0xe5, 0xce, 0xd7, 0x42, 0xe3, 0x28, 0xb3, 0x21, 0x59, 0x0f, 0x2c, 0x18, 0x09, 0x6a, 0xd5, 0xa0,
	0x67, 0x69, 0x7c, 0xb6, 0x57, 0x16, 0xd3, 0xb0, 0x06, 0xb5, 0x50, 0xad, 0x56, 0x8d, 0xab, 0x30,
	0x39, 0x16, 0x21, 0x35, 0xe7, 0xf5, 0xc9, 0x4f, 0xa3, 0x7b, 0xd6, 0x37, 0x0d, 0x4a, 0x89, 0x7e,
	0x9a, 0x26, 0x09, 0xcd, 0xcd, 0x1d, 0x86, 0x16, 0x30, 0xda, 0xe5, 0xaf, 0x4c, 0x2f, 0xf4, 0x80,
	0x8e, 0xb4, 0xdb, 0xe6, 0xf5, 0x42, 0x21, 0x2a, 0xb4, 0x8e, 0x53, 0xf0, 0x01, 0x63, 0x5a, 0xef,
	0x97, 0xc5, 0x7c, 0x56, 0xed, 0x15, 0xe5, 0x6e, 0x5a, 0xc5, 0x73, 0xbe, 0xad, 0xfa, 0xb9, 0xaf,
	0x0d, 0x04, 0x1c, 0x6a, 0xea, 0xbb, 0x68, 0x1d, 0xbe, 0xbd, 0x5d, 0x16, 0x24, 0x89, 0x49, 0x55,
	0x5b, 0xcd, 0x7d, 0xe1, 0x6b, 0xce, 0xf3, 0x42, 0xa8, 0xc9, 0xb7, 0xd1, 0x1d, 0xb8, 0xb0, 0xf5,
	0x4b, 0xac, 0xeb, 0x66, 0xd8, 0x18, 0x00, 0x86, 0x9d, 0x8f, 0x46, 0xbb, 0xed, 0x34, 0x3e, 0x67,
	0x51, 0x7a, 0x74, 0x0a, 0x40, 0xa0, 0x33, 0xfc, 0x02, 0x9a, 0xf5, 0x24, 0xad, 0x0f, 0x0a, 0xb1,
	0xed, 0xb9, 0xe6, 0x65, 0x27, 0x21, 0x6e, 0xd7, 0xdc, 0xb5, 0x38, 0xcc, 0x8a, 0x0f, 0x2f, 0x8b,
	0x84, 0x06, 0xd7, 0xa2, 0x04, 0xa1, 0x1d, 0x3c, 0xb3, 0xf4, 0x48, 0x4e, 0xe2, 0x3a, 0x55, 0x0e,
	0x50, 0x15, 0xd0, 0x23, 0x16, 0x12, 0xd4, 0xe3, 0xa9, 0xc9, 0x02, 0x98, 0x66, 0xd2, 0x36, 0xff,
	0xf2, 0x32, 0x8f, 0xa4, 0xf9, 0xd6, 0xae, 0x8a, 0xa4, 0xdf, 0x45, 0x4b, 0xb1, 0x78, 0xc4, 0xaa,
	0x6d, 0x58, 0x79, 0xb0, 0x13, 0xe4, 0x21, 0x08, 0x50, 0x5b, 0x2a, 0xf6, 0x07, 0xe4, 0xae, 0x31,
	0x03, 0x88, 0xf8, 0x11, 0xbc, 0x28, 0x5b, 0xf6, 0xb3, 0x96, 0x08, 0xa0, 0x16, 0x15, 0x59, 0xd2,
	0x44, 0xc4, 0x2e, 0x1f, 0xf3, 0x54, 0x8d, 0x62, 0xbd, 0x8e, 0xb2, 0x36, 0x41, 0x20, 0x62, 0x57,
	0x08, 0xae, 0x98, 0x69, 0x02, 0x5a, 0x79, 0x13, 0xdd, 0x50, 0x64, 0xe1, 0x95, 0xf1, 0x3f, 0x2d,
	0x95, 0x86, 0x62, 0x40, 0x66, 0x47, 0x01, 0x84, 0x1f, 0xf4, 0x1e, 0xf4, 0xde, 0x78, 0xc7, 0xd7,
	0x7b, 0x13, 0xd4, 0x7b, 0xe8, 0x16, 0x5b, 0x4b, 0xda, 0xae, 0x81, 0xec, 0x77, 0xba, 0x7f, 0x16,
	0x7d, 0xa2, 0xd8, 0x9c, 0x66, 0x45, 0x7c, 0xd6, 0xed, 0xa1, 0x4d, 0x30, 0x1a, 0x9a, 0x3b, 0x57,
	0x90, 0x79, 0xce, 0x19, 0x2c, 0xa3, 0x0c, 0x04, 0x15, 0xb7, 0xbf, 0x60, 0x86, 0xb7, 0x33, 0x5e,
	0xbc, 0x7a, 0xcf, 0x27, 0x02, 0x02, 0x00, 0xec, 0xaf, 0xa2, 0x0a, 0x12, 0xb3, 0x36, 0x9a, 0x29,
	0x77, 0x44, 0x77, 0x48, 0xe9, 0x63, 0xaa, 0x01, 0xbd, 0x6b, 0xb6, 0xc4, 0xa6, 0x2c, 0x78, 0xdf,
	0x07, 0xec, 0x84, 0xa8, 0xf8, 0xd9, 0x69, 0x00, 0x56, 0x8e, 0x7f, 0x59, 0xe1, 0x2a, 0x4a, 0xca,
	0x78, 0x62, 0x26, 0x52, 0x2d, 0x22, 0x50, 0xb1, 0x8a, 0xb2, 0x57, 0xcc, 0xf3, 0x84, 0x59, 0xc0,
	0x5b, 0xea, 0x59, 0x49, 0xab, 0x22, 0x3b, 0xd7, 0x81, 0xdd, 0x06, 0xca, 0xd3, 0x42, 0x81, 0xd4,
	0xb4, 0x82, 0x1c, 0x72, 0x48, 0x32, 0xa0, 0xac, 0xbb, 0xd6, 0xfa, 0x3c, 0x2a, 0x66, 0x0d, 0x21,
	0xb0, 0x3e, 0x25, 0x02, 0x5b, 0x9f, 0x92, 0x26, 0xcc, 0x03, 0xe8, 0x95, 0x7a, 0xef, 0x90, 0xd4,
	0x69, 0x3e, 0xb6, 0xcc, 0x83, 0x1f, 0x88, 0x66, 0x15, 0x4d, 0xfc, 0x90, 0x9c, 0x7b, 0x85, 0x49,
	0x03, 0x30, 0x65, 0x7e, 0xd5, 0x50, 0x69, 0x8c, 0xcd, 0x5d, 0xaf, 0xc6, 0x63, 0x4c, 0x96, 0x9d,
	0xda, 0xc3, 0xe6, 0xb1, 0x58, 0x6c, 0x22, 0x12, 0x97, 0x2f, 0x71, 0xdd, 0xaf, 0x06, 0x14, 0x5f,
	0xd7, 0x26, 0x08, 0x5b, 0x3a, 0x37, 0x10, 0xe5, 0xf8, 0x6c, 0xb7, 0xf2, 0x28, 0x20, 0x03, 0xe3,
	0x93, 0xf5, 0xd7, 0x8e, 0xf6, 0xd9, 0xe6, 0xc5, 0x72, 0x61, 0xed, 0x23, 0x41, 0x6e, 0x2f, 0x9f,
	0x83, 0x39, 0x21, 0x89, 0x1c, 0x0f, 0xcf, 0x9c, 0x68, 0x80, 0x37, 0xb4, 0x55, 0x50, 0x96, 0x2b,
	0x0f, 0xab, 0x5c, 0x03, 0x83, 0x72, 0x7c, 0x6e, 0xaa, 0x1f, 0x66, 0xde, 0x43, 0xea, 0x47, 0x00,
	0x50, 0x5e, 0x4d, 0x00, 0x6b, 0x28, 0xcc, 0xc6, 0x29, 0x3e, 0xa4, 0xb3, 0x2c, 0x75, 0x02, 0x58,
	0x1f, 0x0c, 0xe3, 0xbb, 0xf9, 0x37, 0x97, 0xd8, 0x01, 0xaf, 0xbd, 0x22, 0x4b, 0x68, 0xa9, 0xec,
	0xf2, 0x61, 0x74, 0x73, 0xc4, 0x9f, 0xf0, 0x84, 0x12, 0xa5, 0xa5, 0x40, 0x98, 0x13, 0xe5, 0x01,
	0xa1, 0x5f, 0x70, 0x10, 0x2d, 0x49, 0x38, 0x9f, 0x56, 0x0e, 0x36, 0x17, 0x3c, 0x86, 0x40, 0xfb,
	0xfd, 0x1f, 0x97, 0xd9, 0x16, 0xc5, 0x53, 0x9a, 0xcd, 0x64, 0xa7, 0x7f, 0x1d, 0x7d, 0x32, 0xa1,
	0xd9, 0x4c, 0x88, 0xe2, 0x28, 0x1d, 0x9b, 0xf6, 0xc6, 0xa4, 0xf5, 0x2e, 0x2b, 0x1a, 0x7f, 0xc0,
	0xf2, 0x6c, 0x57, 0x25, 0xe8, 0x15, 0x25, 0x25, 0xad, 0xea, 0xdd, 0xd8, 0x5c, 0x98, 0x0e, 0x19,
	0x54, 0x65, 0xa9, 0x67, 0xbc, 0x26, 0x44, 0x42, 0xb7, 0x66, 0x33, 0xde, 0x6b, 0x9c, 0x93, 0x22,
	0x03, 0x7d, 0xcc, 0x68, 0x8a, 0xc0, 0xf7, 0xc8, 0xd8, 0x33, 0x56, 0x49, 0x34, 0x9b, 0x35, 0x71,
	0xf4, 0x1d, 0x87, 0x99, 0x26, 0xba, 0xeb, 0x64, 0x10, 0x75, 0x65, 0x83, 0x3c, 0x17, 0x73, 0x44,
	0xbf, 0xb7, 0x92, 0xa3, 0x2e, 0x1d, 0x6c, 0x3c, 0x31, 0xa2, 0xa6, 0x30, 0x6d, 0x78, 0x59, 0xbe,
	0x31, 0x9c, 0xcf, 0x1a, 0xab, 0x84, 0x74, 0x49, 0x13, 0x7b, 0xd7, 0x4d, 0x5e, 0xe2, 0x31, 0x2b,
	0x17, 0x59, 0x02, 0x63, 0xc1, 0x0f, 0xba, 0x64, 0x76, 0xa2, 0x00, 0x43, 0x80, 0x3c, 0xbc, 0xf2,
	0x45, 0x1a, 0x71, 0xd8, 0x37, 0x61, 0xbc, 0xca, 0x5f, 0x32, 0x38, 0xa2, 0xe5, 0xb4, 0x7a, 0x3d,
	0x92, 0x22, 0xd3, 0xc7, 0x1a, 0x31, 0x31, 0x40, 0xf5, 0x32, 0x80, 0x49, 0xe5, 0x65, 0x03, 0x7c,
	0xfc, 0xd9, 0x66, 0x92, 0x90, 0x50, 0x71, 0x14, 0x6e, 0xc3, 0x9d, 0x25, 0x17, 0x85, 0x25, 0xa1,
	0x95, 0xf8, 0xec, 0x24, 0xb9, 0x10, 0x66, 0x54, 0x7c, 0x14, 0x19, 0x08, 0xa2, 0x7a, 0xc6, 0xad,
	0xac, 0x84, 0x1e, 0xd2, 0x98, 0xe6, 0xf5, 0x4b, 0x7a, 0x5c, 0xda, 0x5b, 0x03, 0x18, 0x02, 0x58,
	0x59, 0x46, 0x86, 0x34, 0x53, 0xc0, 0x07, 0x65, 0xf1, 0xfd, 0xc5, 0x2e, 0xa9, 0x09, 0xde, 0x43,
	0x45, 0xb6, 0x05, 0x5c, 0x11, 0x78, 0x39, 0x3a, 0x3e, 0xfa, 0x62, 0xe9, 0x3c, 0x6c, 0x9f, 0x27,
	0xb1, 0x8a, 0xfa, 0xa1, 0xd9, 0x52, 0x0b, 0x6a, 0x18, 0xdd, 0x66, 0x64, 0xae, 0xc3, 0x2d, 0xa1,
	0xf8, 0xd4, 0x69, 0x0c, 0x83, 0xa1, 0x3b, 0x56, 0xb2, 0x6b, 0xbb, 0x94, 0xce, 0x1a, 0x8f, 0xfb,
	0x59, 0x3e, 0x2a, 0xf0, 0xb1, 0x86, 0x08, 0x7b, 0xac, 0x21, 0xad, 0xdf, 0xe9, 0xfe, 0x2a, 0xfa,
	0x23, 0xf6, 0xb8, 0xa6, 0x55, 0xdd, 0xbd, 0xee, 0x30, 0x6b, 0x1e, 0xa3, 0x27, 0x5b, 0xd4, 0x0c,
	0x90, 0xaa, 0x12, 0x21, 0x48, 0x23, 0x47, 0xa8, 0xcc, 0x9b, 0x18, 0x5b, 0xe6, 0x4d, 0x2a, 0x77,
	0xac, 0xad, 0x05, 0xfe, 0x8a, 0xd8, 0x15, 0x81, 0x08, 0x00, 0x38, 0xd6, 0x50, 0x0b, 0x34, 0x24,
	0x66, 0x2e, 0xaf, 0xc8, 0x77, 0x1a, 0x3f, 0x92, 0x8d, 0xdd, 0x32, 0xc6, 0x51, 0x52, 0x41, 0x9c,
	0xc3, 0x48, 0xf2, 0x39, 0x33, 0x36, 0x5c, 0x3e, 0x1b, 0xc3, 0xa4, 0x98, 0xb9, 0xf2, 0x09, 0xc9,
	0x01, 0x6e, 0x4f, 0x0d, 0x75, 0x1e, 0x5a, 0x8f, 0x8a, 0x0c, 0xd6, 0xe3, 0xf3, 0xe1, 0xeb, 0x57,
	0xf2, 0x30, 0x87, 0xb9, 0x6e, 0xa6, 0x45, 0x70, 0xdd, 0x70, 0x32, 0xb2, 0x6e, 0x38, 0x81, 0x6f,
	0x7a, 0xb1, 0x67, 0x93, 0x34, 0xa1, 0x9a, 0x9f, 0xab, 0xd7, 0x0d, 0x3a, 0x7a, 0x08, 0x95, 0xc1,
	0x92, 0xb4, 0x9a, 0xa6, 0x55, 0x35, 0x9c, 0x8f, 0xc7, 0xb4, 0x62, 0xc9, 0x0a, 0x57, 0x58, 0x1c,
	0x0c, 0x96, 0x51, 0xbd, 0xae, 0x8d, 0xed, 0x3c, 0xaf, 0xcb, 0x94, 0x56, 0x07, 0x69, 0x65, 0x1d,
	0xeb, 0x44, 0x21, 0x60, 0x47, 0x83, 0xd1, 0x0d, 0x62, 0xbf, 0xb3, 0xf9, 0xcf, 0x3f, 0x66, 0x79,
	0x84, 0x03, 0x92, 0x8f, 0x67, 0x24, 0x3e, 0x93, 0x4b, 0xf6, 0x6d, 0xb4, 0x94, 0x89, 0x47, 0xcc,
	0x91, 0x22, 0xf9, 0x78, 0x40, 0xe2, 0x33, 0x73, 0xe9, 0x61, 0x08, 0xd0, 0x9e, 0x7c, 0xb4, 0x9b,
	0x8e, 0x46, 0xb4, 0xa4, 0x39, 0x53, 0xee, 0xbf, 0x89, 0xae, 0xc1, 0xd7, 0x86, 0x75, 0xc9, 0x0a,
	0xfd, 0xee, 0xf9, 0xf8, 0x0a, 0x00, 0x88, 0x7f, 0x84, 0x03, 0x2c, 0xb9, 0x73, 0x00, 0x3f, 0x8b,
	0x04, 0x5f, 0xd4, 0xad, 0x9a, 0x63, 0x8e, 0x63, 0xda, 0xba, 0xfd, 0xbb, 0xe8, 0xba, 0xfd, 0xb5,
	0x73, 0xb6, 0x7b, 0xbe, 0x16, 0x1a, 0x10, 0x06, 0x01, 0x35, 0x9e, 0x56, 0xd7, 0x25, 0x84, 0x15,
	0xa9, 0x2e, 0x61, 0x2f, 0x87, 0xc7, 0xbb, 0x41, 0x00, 0x0d, 0xe0, 0xb2, 0xdd, 0xfc, 0x9f, 0x13,
	0x36, 0xbb, 0x32, 0x09, 0x2d, 0x67, 0xf7, 0x4d, 0xb4, 0xa4, 0x12, 0x4b, 0xde, 0x52, 0x00, 0x0c,
	0xd1, 0x92, 0xe1, 0x1e, 0x46, 0xd7, 0xe0, 0x5b, 0x68, 0x7a, 0x1e, 0x01, 0x84, 0xd3, 0xf3, 0x47,
	0x26, 0x53, 0x99, 0x89, 0xf6, 0x32, 0x5d, 0x2c, 0x19, 0x7f, 0x10, 0x5d, 0x56, 0x8f, 0xb1, 0xe0,
	0xde, 0x22, 0xb6, 0x70, 0x23, 0x60, 0x40, 0xbd, 0x05, 0x2c, 0x18, 0x02, 0xf3, 0xb9, 0x24, 0xdf,
	0x43, 0x0d, 0xe3, 0x69, 0x32, 0xc5, 0x20, 0x54, 0xd8, 0xe2, 0x01, 0x2d, 0x58, 0xd8, 0x72, 0x16,
	0xdd, 0x06, 0xdd, 0x8c, 0x69, 0x7a, 0xae, 0xc9, 0xa6, 0x1d, 0xf7, 0xc2, 0xc0, 0x27, 0x09, 0x79,
	0x3f, 0x14, 0x08, 0x7e, 0x4a, 0x44, 0xe0, 0xb8, 0xb2, 0x05, 0xc3, 0x5c, 0x1f, 0x5d, 0xcc, 0xd2,
	0x7c, 0x6c, 0x2a, 0x5b, 0x97, 0x8e, 0xa6, 0x99, 0x01, 0x2c, 0x57, 0x5b, 0x85, 0xab, 0x1e, 0x46,
	0x79, 0x70, 0x8b, 0xf0, 0xa9, 0xd1, 0xa9, 0x06, 0x9b, 0xa4, 0xc4, 0xdb, 0x29, 0x41, 0xf7, 0xed,
	0xcd, 0x28, 0xe4, 0xa8, 0x28, 0x3f, 0x90, 0x52, 0x0f, 0xe5, 0x06, 0xca, 0xcf, 0x42, 0xa1, 0x5c,
	0xf7, 0xc1, 0x72, 0xf0, 0xd5, 0x03, 0x21, 0x00, 0xb4, 0xd6, 0x40, 0xe1, 0x1a, 0x73, 0x76, 0xa8,
	0x99, 0xe1, 0x02, 0x65, 0x82, 0x30, 0x2b, 0x75, 0x0b, 0xae, 0xc3, 0x26, 0x7c, 0x55, 0x85, 0xdc,
	0x1b, 0xbe, 0xd5, 0x0a, 0x51, 0x20, 0xa6, 0x81, 0x8f, 0xb9, 0x95, 0x87, 0x2f, 0xb1, 0x24, 0xb8,
	0x69, 0xe5, 0x1d, 0x72, 0x68, 0xc7, 0xc3, 0xd2, 0x7f, 0xa2, 0xca, 0xa6, 0xf6, 0xeb, 0x3f, 0x89,
	0x68, 0x2f, 0xc2, 0x51, 0x8f, 0xd9, 0x76, 0xc6, 0x84, 0x88, 0x2a, 0x95, 0x3e, 0xca, 0xd9, 0xc0,
	0xf8, 0x72, 0x28, 0x0e, 0x9a, 0x57, 0xab, 0x84, 0x39, 0xfa, 0x2b, 0x56, 0xe0, 0x6a, 0x21, 0x09,
	0x2b, 0x6f, 0x68, 0x1c, 0x33, 0xcf, 0xb7, 0x03, 0x04, 0xca, 0xed, 0xd0, 0xd1, 0x4a, 0x8a, 0x61,
	0x48, 0x2b, 0x05, 0x79, 0x3e, 0x07, 0x12, 0xae, 0xca, 0x94, 0x6a, 0x8f, 0x84, 0x6b, 0x40, 0x6b,
	0xff, 0xcc, 0xd5, 0xe5, 0xe9, 0x9f, 0x09, 0xf2, 0x64, 0x8e, 0x0c, 0xe9, 0xd9, 0x9d, 0x08, 0xff,
	0xd5, 0x2b, 0x3d, 0x12, 0x81, 0x49, 0x8f, 0xa4, 0x31, 0x1f, 0xa3, 0x07, 0x16, 0x2e, 0xab, 0xf3,
	0x7c, 0x92, 0xc7, 0xe5, 0xc5, 0xcc, 0xbd, 0x62, 0xc1, 0x8f, 0x03, 0x4e, 0xb7, 0x78, 0xc8, 0x4b,
	0x58, 0x58, 0x04, 0xa3, 0x75, 0x3b, 0x0f, 0xc0, 0x00, 0x7b, 0x5c, 0xb7, 0xdb, 0xb0, 0x00, 0xf7,
	0x63, 0xd0, 0xfb, 0x24, 0xad, 0x62, 0x52, 0x26, 0xad, 0xbd, 0x77, 0x70, 0xe8, 0xf9, 0x4d, 0x68,
	0x03, 0x54, 0xab, 0xc2, 0x58, 0x3c, 0xf0, 0x19, 0x0b, 0x0b, 0xe8, 0x32, 0xfe, 0x2a, 0xba, 0x6b,
	0x18, 0x64, 0xf5, 0x82, 0xb4, 0xdd, 0x8f, 0xbc, 0xb6, 0xdb, 0x86, 0xba, 0xcc, 0x47, 0x60, 0xd9,
	0x36, 0x46, 0x42, 0xbd, 0xe1, 0x59, 0xb6, 0x06, 0x06, 0x5c, 0xc0, 0xa3, 0x00, 0xec, 0x40, 0xb2,
	0x04, 0x68, 0x0b, 0x9a, 0x83, 0x41, 0x37, 0x78, 0xec, 0xa5, 0x19, 0xf5, 0x0c, 0xba, 0x83, 0xfb,
	0x88, 0xf6, 0x6a, 0x30, 0x68, 0x06, 0x1f, 0xe9, 0x59, 0x3e, 0x6a, 0x6f, 0x52, 0x86, 0xfb, 0x8b,
	0xb7, 0x7a, 0x04, 0x46, 0x53, 0x7a, 0x1b, 0x5f, 0xce, 0xe9, 0xdc, 0xa7, 0x56, 0x0d, 0x0c, 0xb8,
	0x06, 0x40, 0xb8, 0x23, 0x59, 0xc1, 0xe2, 0x85, 0x77, 0xd1, 0xb2, 0x65, 0x27, 0x75, 0x17, 0x1b,
	0x23, 0xf8, 0x30, 0x60, 0x51, 0x0d, 0x24, 0x7a, 0x19, 0x80, 0x21, 0x30, 0xc1, 0x0a, 0x98, 0x10,
	0x72, 0x41, 0xaf, 0xed, 0x04, 0x68, 0x39, 0x71, 0x89, 0x83, 0xac, 0xdf, 0x59, 0xf7, 0x29, 0x25,
	0x00, 0x02, 0x7b, 0xbf, 0xba, 0x15, 0x4d, 0x66, 0xc5, 0x47, 0x3d, 0xf8, 0xee, 0x5b, 0x7a, 0x3a,
	0x20, 0x63, 0x3a, 0x28, 0xe9, 0x79, 0x4a, 0x3f, 0x78, 0xe4, 0xcc, 0xc1, 0x01, 0xf3, 0x2e, 0xfa,
	0xce, 0x7c, 0x27, 0x7e, 0x03, 0x98, 0xb6, 0x60, 0x7c, 0x83, 0x4f, 0x55, 0xdd, 0x79, 0x34, 0x93,
	0x0d, 0x6b, 0xab, 0xdc, 0x7b, 0x0b, 0x9c, 0x13, 0x56, 0x84, 0x09, 0x5a, 0xc0, 0x9d, 0x13, 0x0b,
	0x05, 0xb6, 0x60, 0x0c, 0xc6, 0x6f, 0x40, 0xdf, 0xc5, 0x6e, 0x62, 0x5b, 0xdf, 0x6d, 0x98, 0xa7,
	0x10, 0xee, 0x06, 0x1c, 0x4a, 0x31, 0x19, 0x43, 0x5a, 0x7b, 0x84, 0xde, 0xc0, 0x80, 0x7c, 0x93,
	0x5e, 0x5c, 0x8a, 0xda, 0xef, 0x74, 0x2b, 0x30, 0xa1, 0xe2, 0x44, 0x27, 0x68, 0x01, 0x9f, 0x50,
	0x07, 0xd7, 0xfb, 0xdc, 0x1f, 0xbc, 0x3c, 0xb3, 0xc1, 0xd6, 0x8a, 0x9b, 0xe7, 0x6e, 0xb3, 0xf8,
	0xb2, 0x40, 0x90, 0xee, 0x8a, 0xdb, 0x03, 0x0e, 0x62, 0x55, 0x13, 0x76, 0x32, 0xc9, 0xe3, 0x20,
	0x4a, 0x32, 0x3a, 0xea, 0x33, 0x30, 0x9b, 0x20, 0xee, 0x7d, 0x93, 0xd2, 0x0f, 0xbe, 0xf8, 0xc7,
	0x86, 0xf5, 0x3e, 0xf3, 0x8f, 0xca, 0xbe, 0x85, 0xb5, 0xe4, 0x47, 0x14, 0x7c, 0x4d, 0x08, 0x2f,
	0xde, 0xf3, 0xb5, 0x68, 0xc3, 0x7c, 0x35, 0x5c, 0x8e, 0x57, 0xc8, 0x6b, 0xaf, 0xc3, 0x9e, 0x23,
	0xaf, 0xbf, 0x0e, 0x06, 0x59, 0xd3, 0x74, 0x5c, 0x4a, 0xaf, 0x0c, 0x77, 0x7a, 0x00, 0x02, 0xed,
	0xdc, 0x6f, 0xa2, 0xeb, 0x56, 0x80, 0xcd, 0x4f, 0x6c, 0x9a, 0xe9, 0x14, 0x14, 0xd2, 0x12, 0x89,
	0x43, 0x7f, 0xa1, 0xa4, 0x45, 0x99, 0xd0, 0x52, 0xcb, 0x4d, 0xe5, 0xf1, 0x17, 0x5c, 0x20, 0x16,
	0xdd, 0x18, 0x2a, 0x50, 0x9e, 0x0b, 0xdf, 0xbe, 0x78, 0x4a, 0xaa, 0x89, 0x5f, 0x05, 0x9a, 0x38,
	0xfc, 0x60, 0xf9, 0x31, 0x70, 0x78, 0xc5, 0xa7, 0xa6, 0x23, 0x5f, 0xda, 0x44, 0x03, 0x80, 0xca,
	0x53, 0x54, 0x56, 0x70, 0xd0, 0x10, 0x79, 0xd6, 0xd0, 0xd0, 0x0e, 0xe4, 0x9c, 0x32, 0x92, 0x67,
	0x90, 0x21, 0x04, 0x63, 0xad, 0x88, 0xbc, 0x94, 0x44, 0x77, 0x88, 0x9c, 0xd3, 0xfd, 0x74, 0x64,
	0x66, 0x96, 0x6d, 0x2a, 0x76, 0x7e, 0x7a, 0x19, 0x36, 0xfd, 0x2c, 0xcf, 0xd2, 0x9c, 0x6e, 0x17,
	0xb5, 0x28, 0x49, 0xf5, 0x28, 0x03, 0x04, 0x89, 0xe9, 0x3a, 0x4d, 0xb5, 0xd4, 0x4e, 0xb5, 0x70,
	0x4b, 0x08, 0x12, 0xdb, 0x14, 0x58, 0x36, 0x9c, 0x1c, 0xeb, 0x0d, 0x2f, 0x6b, 0x07, 0xe9, 0x29,
	0x28, 0xbb, 0x83, 0x68, 0x99, 0x27, 0x49, 0x5a, 0xb3, 0xac, 0xf4, 0x83, 0x16, 0x75, 0x24, 0x81,
	0xd8, 0x39, 0x23, 0x0b, 0x62, 0x2d, 0xf0, 0x46, 0x17, 0x84, 0xb3, 0x28, 0x00, 0xe1, 0x29, 0xc7,
	0xbc, 0x6b, 0x60, 0xd5, 0xe7, 0x4a, 0xb6, 0x8f, 0xbc, 0x6c, 0x6d, 0xa8, 0x3b, 0xea, 0xdf, 0x01,
	0xe6, 0x63, 0x7e, 0xe2, 0x8c, 0x64, 0xd9, 0x29, 0x89, 0xcf, 0xb6, 0xd8, 0x81, 0x36, 0x0f, 0x73,
	0x0c, 0x0a, 0xce, 0xf2, 0x42, 0xe1, 0x31, 0x41, 0xd6, 0xf7, 0x54, 0x8b, 0x37, 0x89, 0x41, 0xdd,
	0xef, 0xb1, 0xdc, 0xb7, 0x01, 0xa5, 0xa5, 0x4c, 0x9d, 0xae, 0x87, 0xf2, 0x26, 0x32, 0x7d, 0x8a,
	0xb8, 0x6f, 0x80, 0x6c, 0x27, 0xda, 0xc8, 0x39, 0xdd, 0x2d, 0xc9, 0xa8, 0xf6, 0xe5, 0xb4, 0x24,
	0xdd, 0xed, 0xe7, 0x2b, 0x53, 0xa1, 0x6c, 0x65, 0x19, 0x03, 0x06, 0x14, 0x8a, 0x82, 0xa0, 0x42,
	0x92, 0x9b, 0x2a, 0x60, 0x8f, 0xb2, 0x73, 0x01, 0x89, 0xf2, 0x5d, 0xbd, 0x2a, 0xc0, 0x46, 0x62,
	0x6e, 0xb2, 0x8d, 0x41, 0x42, 0x3e, 0xa7, 0x41, 0x7f, 0xc8, 0xe7, 0xb4, 0x88, 0xdd, 0x07, 0x01,
	0xbb, 0xc8, 0xb7, 0x77, 0x15, 0x67, 0xaf, 0x7d, 0x30, 0x71, 0x60, 0xaf, 0x40, 0x81, 0x4c, 0x84,
	0x15, 0x69, 0x37, 0xb3, 0x65, 0x00, 0x7c, 0x41, 0x9f, 0x8d, 0x43, 0xcb, 0xf6, 0xb5, 0xef, 0x9b,
	0x51, 0x52, 0x5a, 0x9f, 0x80, 0xcf, 0x06, 0x82, 0x0c, 0xc7, 0x43, 0x8d, 0x54, 0x94, 0xf1, 0xa4,
	0x89, 0xcf, 0xda, 0x27, 0xda, 0x46, 0xa2, 0xf1, 0x90, 0x85, 0x61, 0xf1, 0x84, 0x91, 0x89, 0x7c,
	0x49, 0xaa, 0x33, 0xd5, 0x96, 0x37, 0x13, 0x09, 0x51, 0xed, 0x11, 0xd1, 0xd4, 0xfa, 0xa4, 0xba,
	0x26, 0xf1, 0x64, 0xa1, 0x4f, 0xb2, 0x90, 0x40, 0x3b, 0xcb, 0x4a, 0x34, 0xe5, 0x86, 0xec, 0x14,
	0xe7, 0xb4, 0x64, 0x35, 0x92, 0xaf, 0x0c, 0x87, 0xa9, 0xde, 0x27, 0x53, 0x3a, 0x8c, 0x8b, 0x92,
	0x7a, 0x1d, 0x26, 0x0d, 0x41, 0x97, 0x9e, 0x95, 0x56, 0xe1, 0x3a, 0x57, 0x73, 0x7d, 0x10, 0x36,
	0x89, 0x9a, 0x37, 0x72, 0xfe, 0xd6, 0x58, 0x06, 0x0d, 0xf2, 0x69, 0x3a, 0x9e, 0x30, 0x74, 0x60,
	0x19, 0x98, 0x38, 0xcc, 0xa4, 0x6b, 0x2a, 0x73, 0xd3, 0x57, 0x5d, 0x97, 0xc0, 0x6a, 0xeb, 0x17,
	0x61, 0x07, 0xe2, 0x23, 0x5b, 0x7c, 0x67, 0xea, 0xe8, 0x9d, 0x62, 0x3a, 0x2d, 0x72, 0x9e, 0x87,
	0xf6, 0xea, 0x68, 0x00, 0x0a, 0x65, 0xa3, 0x87, 0x66, 0x3e, 0x71, 0x8b, 0xa7, 0x9a, 0x03, 0xbb,
	0x71, 0x12, 0xd1, 0x72, 0xf4, 0x08, 0x89, 0xc4, 0xfd, 0xbb, 0x66, 0x02, 0x00, 0x84, 0x45, 0x3c,
	0xe1, 0x05, 0x39, 0x56, 0xec, 0xc1, 0x4d, 0xcb, 0x20, 0xcd, 0x3d, 0xcb, 0xc9, 0x42, 0xb5, 0x65,
	0xdf, 0x98, 0xf7, 0xcd, 0x4f, 0x6f, 0x49, 0xc3, 0xf7, 0x28, 0xe4, 0xa8, 0x1b, 0x50, 0xec, 0xea,
	0x4b, 0x23, 0x88, 0x33, 0x19, 0x7b, 0x83, 0x38, 0x93, 0x69, 0xab, 0x4d, 0xfd, 0x26, 0x5a, 0xb1,
	0xcc, 0xfc, 0x70, 0x92, 0xce, 0x66, 0x69, 0x2e, 0x0f, 0x55, 0x99, 0xd7, 0x77, 0x86, 0xb1, 0xd8,
	0x37, 0xac, 0x59, 0xaf, 0x0c, 0x4a, 0xca, 0x52, 0x12, 0xc5, 0x5c, 0x79, 0xae, 0xbf, 0x0c, 0xb4,
	0xe0, 0xc2, 0xb1, 0x0b, 0x5a, 0xb4, 0xe4, 0xf1, 0xeb, 0xaf, 0xf8, 0x6e, 0x17, 0x2e, 0x79, 0x00,
	0xe1, 0x4f, 0xe5, 0xbc, 0x8f, 0xd6, 0x0d, 0x3f, 0x77, 0x18, 0x97, 0x94, 0xe6, 0xd5, 0xa4, 0xa8,
	0x8d, 0xab, 0xea, 0xbe, 0xf0, 0x3a, 0xc6, 0xf8, 0x0b, 0xa8, 0x12, 0xa3, 0xe6, 0x3c, 0xef, 0x11,
	0x68, 0x53, 0xbc, 0xf3, 0x6c, 0xc0, 0xb0, 0xa3, 0x16, 0x06, 0x80, 0x1f, 0x8d, 0xd3, 0xdb, 0x03,
	0xe4, 0x9c, 0x4a, 0x4b, 0x8b, 0x8f, 0x12, 0x40, 0x60, 0x27, 0xa1, 0x0c, 0xed, 0x78, 0x9c, 0xf3,
	0x9c, 0x5f, 0xce, 0xef, 0xc4, 0xf1, 0x6a, 0x47, 0x13, 0xd7, 0xba, 0x17, 0x7d, 0xc3, 0xda, 0x6d,
	0x41, 0x0f, 0x6f, 0xe1, 0x98, 0xc5, 0xee, 0x24, 0x18, 0x58, 0xe9, 0x6d, 0x75, 0xe8, 0x28, 0x90,
	0xde, 0x56, 0x98, 0x45, 0xf6, 0x54, 0xf0, 0xe3, 0x87, 0x18, 0x02, 0x1b, 0x0c, 0x30, 0x77, 0x89,
	0x19, 0x42, 0x71, 0x47, 0x45, 0x1e, 0x0b, 0xaa, 0xfc, 0x21, 0x94, 0x05, 0x6c, 0x19, 0xf2, 0x5f,
	0x83, 0x62, 0x02, 0x9e, 0x20, 0xf6, 0x14, 0x13, 0x70, 0x22, 0x16, 0x01, 0x5c, 0xb7, 0xd2, 0xc0,
	0x42, 0x24, 0xd6, 0x02, 0x99, 0x62, 0x21, 0x0d, 0x0b, 0xcd, 0x18, 0xdc, 0x07, 0x63, 0xbb, 0xd6,
	0xf3, 0xac, 0x4e, 0xf9, 0x62, 0x5f, 0xf7, 0x6f, 0x6d, 0x2b, 0x10, 0x3a, 0x67, 0xa7, 0x30, 0x9d,
	0xc7, 0x74, 0x83, 0xb9, 0xfd, 0xf0, 0x30, 0xa0, 0x45, 0xcc, 0x0d, 0x08, 0x64, 0x57, 0xa9, 0x79,
	0xce, 0xd4, 0x49, 0xcf, 0xca, 0x7c, 0xc0, 0x6c, 0xce, 0xfd, 0x40, 0x86, 0x04, 0x26, 0x73, 0xfa,
	0x9e, 0x44, 0x09, 0xc0, 0xb0, 0xfd, 0x37, 0xc3, 0xc4, 0x0f, 0x67, 0x59, 0x5a, 0x1f, 0x92, 0xdc,
	0x5f, 0x61, 0x61, 0x82, 0xdc, 0x23, 0x05, 0x42, 0x42, 0x18, 0x99, 0xd7, 0x48, 0xea, 0x04, 0x19,
	0x29, 0xcf, 0xb8, 0x2d, 0xe1, 0x6b, 0xdb, 0xa3, 0xae, 0x6c, 0x18, 0x16, 0x76, 0xdc, 0x75, 0x2b,
	0x6a, 0x84, 0xbe, 0x20, 0xe5, 0x59, 0xe5, 0x8f, 0x85, 0x1d, 0x28, 0x10, 0x72, 0xf1, 0x01, 0xc2,
	0x80, 0xf3, 0xf3, 0x25, 0xb0, 0x5e, 0x80, 0x79, 0xfd, 0x3a, 0xfe, 0x5b, 0xf7, 0x87, 0x06, 0x3a,
	0x02, 0x0c, 0x26, 0x4f, 0x5a, 0x8f, 0x7a, 0x87, 0x90, 0xa8, 0x74, 0x1a, 0x19, 0x61, 0x9a, 0x27,
	0x6f, 0x0a, 0xbb, 0x62, 0xdc, 0x21, 0xb7, 0xee, 0x20, 0x37, 0x5e, 0x42, 0x91, 0x65, 0xd2, 0xfc,
	0xfa, 0x83, 0x73, 0x0d, 0xf2, 0xdc, 0xa3, 0x60, 0x38, 0x67, 0xaf, 0x99, 0x43, 0x1a, 0xa8, 0x93,
	0x12, 0x00, 0xb0, 0x95, 0xd5, 0xb8, 0x79, 0xe2, 0x29, 0xcb, 0xf5, 0x5a, 0xda, 0x93, 0xd4, 0xd5,
	0xf1, 0xe1, 0x41, 0x48, 0x7b, 0x72, 0x04, 0xc8, 0x47, 0xca, 0x47, 0xbe, 0xd4, 0x31, 0xbb, 0xfd,
	0xa3, 0x25, 0x75, 0x8c, 0xdf, 0x00, 0x92, 0x45, 0x1b, 0x0e, 0x74, 0x97, 0x8e, 0xc8, 0x3c, 0x13,
	0xe7, 0xdd, 0x0f, 0xd3, 0xf1, 0xa4, 0xae, 0xcc, 0xeb, 0x6b, 0x17, 0x79, 0x03, 0x1d, 0xdb, 0x91,
	0xe9, 0x14, 0x3c, 0x99, 0x16, 0xef, 0xd3, 0x17, 0xf4, 0xe2, 0x43, 0x51, 0x26, 0x01, 0xa7, 0xc0,
	0x80, 0x81, 0x28, 0xdc, 0x78, 0x6e, 0x54, 0x04, 0xfe, 0x1e, 0x38, 0x3a, 0x36, 0x03, 0x50, 0x7b,
	0xf8, 0xc5, 0x42, 0x2d, 0x82, 0x42, 0xc4, 0x45, 0xda, 0xb6, 0xe6, 0x9b, 0x01, 0x83, 0xf3, 0x2d,
	0x11, 0x60, 0xbe, 0xe5, 0xa3, 0x7e, 0xa7, 0x3b, 0x8f, 0xfa, 0xde, 0x9e, 0xe9, 0x4a, 0xc7, 0xc7,
	0x0b, 0x7d, 0x89, 0x2e, 0x7b, 0x74, 0x0e, 0x94, 0x32, 0x1c, 0xa8, 0x79, 0xcc, 0x4d, 0x67, 0x68,
	0xc8, 0xd4, 0x36, 0xab, 0x4f, 0x0d, 0x66, 0x4c, 0x4c, 0x1c, 0xd8, 0x46, 0x16, 0xcd, 0x80, 0xdd,
	0x64, 0x00, 0x64, 0x9b, 0x0e, 0x37, 0xed, 0xba, 0x89, 0xe3, 0x32, 0xdb, 0x9a, 0xd7, 0x13, 0xcf,
	0x4a, 0x36, 0x41, 0xc0, 0x4a, 0x89, 0x27, 0x7c, 0x89, 0xf3, 0xc3, 0xa5, 0x56, 0xc9, 0x84, 0x64,
	0xdc, 0x0f, 0x94, 0x55, 0xb4, 0xf3, 0x85, 0x29, 0x19, 0x56, 0x71, 0x0c, 0xaa, 0xa2, 0xb6, 0x49,
	0xe9, 0xd1, 0x90, 0x08, 0x12, 0xab, 0x50, 0x30, 0xf2, 0x17, 0xc3, 0x78, 0x42, 0x93, 0x79, 0xa6,
	0xab, 0x1f, 0xbc, 0xf9, 0x0b, 0x1b, 0xd9, 0xe2, 0x1a, 0x59, 0xf6, 0x49, 0xbd, 0xad, 0x2a, 0xe1,
	0x1e, 0xb5, 0x36, 0xb4, 0x60, 0xf1, 0xe9, 0xb7, 0x46, 0x40, 0xd6, 0x04, 0x12, 0x76, 0x53, 0x9f,
	0x05, 0x82, 0x0e, 0xbb, 0x2d, 0xfc, 0x66, 0x95, 0x55, 0xcb, 0x6b, 0x76, 0xdb, 0xf8, 0x45, 0xc0,
	0xc7, 0x5e, 0xac, 0x15, 0x6b, 0xdb, 0xa6, 0xb1, 0x25, 0x8d, 0x71, 0x0a, 0x64, 0x59, 0x15, 0x04,
	0xdb, 0xb6, 0x61, 0x04, 0x5e, 0xec, 0x6d, 0x64, 0x0e, 0xc5, 0x81, 0xf6, 0x56, 0x6f, 0xca, 0xc1,
	0x61, 0x51, 0xcd, 0x6d, 0xd7, 0xb1, 0xd8, 0x4b, 0xb3, 0x3a, 0x18, 0x87, 0x19, 0x30, 0xd7, 0x79,
	0x82, 0xe4, 0x7e, 0xa7, 0xfb, 0xe7, 0xa6, 0x8e, 0x12, 0xd5, 0xf2, 0x32, 0x5e, 0x97, 0x8d, 0x79,
	0x75, 0x14, 0x8e, 0x77, 0x4b, 0x55, 0x21, 0x59, 0xbd, 0x63, 0xe5, 0xcb, 0xc4, 0xaf, 0xf2, 0x00,
	0xa4, 0x27, 0x8e, 0x70, 0x81, 0xe1, 0x38, 0xdf, 0xc5, 0x57, 0xaf, 0xcb, 0x84, 0x96, 0x9e, 0x38,
	0xdf, 0x07, 0x77, 0x1b, 0xa9, 0xa3, 0x7b, 0x86, 0x3b, 0x91, 0xb9, 0xa9, 0xef, 0xcf, 0xbd, 0xbe,
	0x87, 0x0b, 0x5e, 0x30, 0xdd, 0x6e, 0x15, 0x6e, 0xcb, 0xb3, 0x95, 0xf7, 0xfc, 0x31, 0x17, 0x3f,
	0x55, 0x19, 0x5e, 0xe6, 0xdf, 0xd9, 0x0e, 0xaf, 0xbc, 0x84, 0x22, 0xbc, 0xb3, 0x84, 0x41, 0xb1,
	0xcd, 0x1f, 0x07, 0x64, 0x79, 0xbe, 0x8d, 0xb7, 0x0c, 0xee, 0xe1, 0x58, 0xf7, 0xc6, 0x67, 0xe0,
	0xee, 0x0d, 0xe4, 0x0a, 0xda, 0xdb, 0xa0, 0xbc, 0x61, 0x96, 0xe6, 0x5b, 0x59, 0xd6, 0x52, 0x65,
	0x6d, 0xc3, 0x16, 0x0a, 0xfb, 0x36, 0xff, 0xe1, 0x27, 0xac, 0xfe, 0x7f, 0x40, 0x2e, 0xd8, 0x15,
	0x32, 0xb2, 0x4a, 0xeb, 0x24, 0xba, 0x39, 0x13, 0x8f, 0xf8, 0x59, 0x25, 0xf6, 0x7f, 0xf6, 0x3b,
	0x25, 0xc6, 0x07, 0x79, 0x40, 0xc0, 0xb4, 0x2b, 0x04, 0x20, 0xf3, 0xcd, 0x10, 0xe4, 0x5d, 0x56,
	0x07, 0x3e, 0xb3, 0xca, 0x4b, 0xfc, 0x38, 0xe0, 0x0a, 0xd9, 0xcd, 0x08, 0x44, 0xbf, 0xd3, 0xfd,
	0x3e, 0x5a, 0x51, 0xc4, 0x73, 0x92, 0xa5, 0xcd, 0x92, 0x10, 0x97, 0x64, 0xd2, 0x84, 0x1d, 0x52,
	0xfa, 0x0c, 0x6d, 0x0d, 0xc5, 0x82, 0xdb, 0x18, 0x14, 0xf0, 0x8d, 0x00, 0x26, 0x06, 0x92, 0xad,
	0xdc, 0x5b, 0x0a, 0xc4, 0x7f, 0x88, 0x42, 0x8f, 0xe2, 0x06, 0xda, 0xa6, 0x85, 0x02, 0xb9, 0x27,
	0xf7, 0xfb, 0x94, 0x07, 0x70, 0x1d, 0x0e, 0x10, 0xdb, 0x83, 0x67, 0x5f, 0xb5, 0xe6, 0x1b, 0x43,
	0x05, 0x01, 0xc6, 0x40, 0xd1, 0x15, 0x91, 0x4b, 0xb5, 0x7a, 0xce, 0x42, 0x35, 0xcd, 0x1c, 0x17,
	0x02, 0x13, 0x84, 0x99, 0x81, 0x5b, 0xb0, 0x23, 0xdb, 0x24, 0x3f, 0xdb, 0x21, 0x65, 0xc2, 0xf6,
	0xaa, 0x37, 0x7c, 0xdd, 0x85, 0x28, 0x70, 0xc8, 0x47, 0x41, 0x20, 0xbd, 0xdf, 0xd9, 0xfc, 0x8b,
	0x9f, 0x45, 0x97, 0x1b, 0x81, 0x9e, 0x14, 0x39, 0x95, 0xd2, 0xfc, 0x22, 0xba, 0x36, 0x6b, 0xfe,
	0x66, 0x29, 0x77, 0x92, 0x65, 0xa2, 0x1c, 0xd7, 0xd0, 0x33, 0x08, 0x00, 0xbf, 0x43, 0xf5, 0x55,
	0x74, 0x95, 0x63, 0x85, 0xf3, 0xd7, 0xe0, 0xcd, 0xb0, 0xd1, 0x21, 0x83, 0x63, 0xbd, 0x9c, 0xc6,
	0x7f, 0x04, 0x87, 0x64, 0xbc, 0x6e, 0xe6, 0x0a, 0x7f, 0x28, 0x4e, 0xb7, 0x37, 0xec, 0x96, 0x5d,
	0x76, 0x9a, 0x1a, 0xe4, 0xa6, 0x7a, 0x27, 0x7e, 0x55, 0xc5, 0xd7, 0x3b, 0x40, 0x0e, 0xf2, 0x7b,
	0x12, 0x75, 0xe5, 0xe7, 0xf0, 0x92, 0x49, 0xc6, 0x70, 0x05, 0xfb, 0x5c, 0x4d, 0x47, 0xab, 0xaf,
	0x38, 0x4c, 0x14, 0xf4, 0xfa, 0xba, 0x05, 0xc8, 0xbe, 0xca, 0x6f, 0x0e, 0xac, 0xf8, 0x44, 0x89,
	0x2b, 0x26, 0x90, 0x99, 0x34, 0x00, 0xbe, 0x73, 0x12, 0x02, 0x4a, 0xce, 0xd9, 0xe7, 0xee, 0xd2,
	0xd3, 0x39, 0xce, 0x0b, 0x02, 0xd0, 0x73, 0x12, 0xb2, 0xcd, 0x3c, 0x61, 0xb7, 0xd7, 0x65, 0x69,
	0x3e, 0x66, 0x52, 0xbd, 0x8e, 0x75, 0xcc, 0x02, 0xa1, 0xdb, 0xe8, 0x62, 0x96, 0x58, 0xed, 0x3a,
	0xbb, 0x3c, 0x89, 0x8d, 0xd8, 0x1a, 0x32, 0x91, 0x26, 0x24, 0x3c, 0x6a, 0xef, 0x8b, 0x34, 0xd7,
	0xdc, 0x90, 0x2f, 0x35, 0x00, 0xbe, 0xd3, 0x01, 0x1c, 0xca, 0xee, 0x6e, 0xd4, 0xcc, 0x56, 0x5d,
	0x66, 0x26, 0xc2, 0x77, 0xc7, 0x02, 0xc7, 0x36, 0x41, 0xbc, 0x82, 0xbe, 0xa4, 0xd3, 0x53, 0x5a,
	0x9a, 0x76, 0xce, 0x0b, 0xf3, 0xe5, 0x64, 0xf8, 0x0b, 0xf2, 0x3a, 0x48, 0xdd, 0x51, 0x64, 0x4a,
	0x1c, 0x90, 0xef, 0xa4, 0x85, 0x21, 0xa4, 0x9a, 0x65, 0xdf, 0x2b, 0xc8, 0x61, 0x8e, 0xbf, 0x8b,
	0xee, 0x72, 0x34, 0x77, 0xa1, 0x15, 0x58, 0x1d, 0x8a, 0x79, 0xe4, 0x32, 0xf6, 0x40, 0x3d, 0x3d,
	0xee, 0x2a, 0xb5, 0xa6, 0x7b, 0xbb, 0x82, 0xaa, 0x3d, 0xdd, 0x53, 0x5b, 0x1d, 0x28, 0x8a, 0x30,
	0xdb, 0xc6, 0x1b, 0xc6, 0x65, 0xbe, 0xf7, 0xfd, 0x9c, 0x8d, 0xeb, 0x7c, 0x57, 0xb1, 0x16, 0xac,
	0x9b, 0x7c, 0x9f, 0x49, 0x39, 0x63, 0x7b, 0x54, 0x41, 0x39, 0x33, 0x11, 0xee, 0x9d, 0xd2, 0x7f,
	0xf8, 0x71, 0x74, 0x85, 0x9b, 0x84, 0xba, 0x50, 0x1e, 0xce, 0x8c, 0x49, 0x5e, 0x5d, 0x54, 0xe6,
	0x6f, 0xee, 0xf2, 0xa3, 0x33, 0xb6, 0xe4, 0xe1, 0x30, 0xac, 0x8e, 0x93, 0x37, 0x72, 0xec, 0x60,
	0xd9, 0x8e, 0xa6, 0x6e, 0x31, 0x2b, 0x48, 0xb2, 0x40, 0x8b, 0x36, 0x0c, 0xec, 0xaa, 0x09, 0x8c,
	0x64, 0xfe, 0x8a, 0x2d, 0xf1, 0xe6, 0x09, 0x8f, 0x24, 0x79, 0x3f, 0x9c, 0x25, 0x6e, 0x03, 0xbc,
	0xb5, 0xef, 0x87, 0x6c, 0xf8, 0x1b, 0xb8, 0x38, 0xfd, 0x2d, 0x18, 0xae, 0x22, 0x0c, 0x0d, 0x04,
	0x48, 0x56, 0xc0, 0x2e, 0x56, 0xfd, 0xce, 0xe6, 0xbf, 0xfd, 0x98, 0x99, 0x66, 0x96, 0x47, 0x04,
	0x8e, 0x66, 0xd5, 0xfc, 0x6d, 0xdc, 0x4c, 0xc7, 0x10, 0xe6, 0x42, 0xf5, 0x80, 0x80, 0xa3, 0xc9,
	0x11, 0x26, 0x99, 0x29, 0xe7, 0x25, 0x4e, 0x69, 0xc6, 0x72, 0xab, 0xba, 0xc8, 0xe3, 0xfd, 0x92,
	0xcc, 0x26, 0xe6, 0x87, 0x60, 0x08, 0x50, 0xce, 0xcd, 0x78, 0xb1, 0x87, 0xbc, 0x16, 0x4b, 0x75,
	0xe6, 0x25, 0x1d, 0x93, 0x71, 0x23, 0x78, 0xa1, 0x1e, 0x9b, 0x20, 0xa7, 0xc7, 0x26, 0x99, 0xed,
	0x68, 0xac, 0x80, 0x77, 0x99, 0xe7, 0xce, 0x2f, 0x14, 0xdd, 0xe3, 0x27, 0x8f, 0xac, 0x34, 0x45,
	0x18, 0xdb, 0x12, 0x2b, 0xbd, 0x8b, 0xae, 0xdb, 0xef, 0xf3, 0x4f, 0x59, 0x0b, 0x35, 0xc1, 0x3f,
	0xe4, 0x8e, 0xf3, 0x21, 0x9a, 0xd8, 0xef, 0x6c, 0xfe, 0xd5, 0xff, 0x63, 0x91, 0x85, 0x0c, 0xf7,
	0xe4, 0x84, 0x9f, 0x46, 0xb7, 0x2b, 0xf1, 0x48, 0xd8, 0x2e, 0x50, 0xdf, 0xfd, 0xa9, 0xd9, 0xaa,
	0x07, 0xd6, 0x5a, 0xbb, 0xfe, 0x3e, 0xba, 0xab, 0x5e, 0x2e, 0xe9, 0xb4, 0x50, 0xfb, 0xad, 0x7b,
	0x65, 0x31, 0x6d, 0xda, 0x79, 0x84, 0xb6, 0x83, 0x41, 0x5b, 0xdb, 0xca, 0x9a, 0xd9, 0x92, 0x1d,
	0x65, 0x37, 0xa0, 0x08, 0xf2, 0xa0, 0xa8, 0x52, 0xb6, 0x93, 0xfd, 0x19, 0xfe, 0x51, 0x18, 0xb6,
	0xb5, 0xb5, 0x6f, 0xa3, 0x5b, 0x8a, 0x03, 0x49, 0x64, 0x2c, 0x7d, 0x54, 0x34, 0x1f, 0xb5, 0x81,
	0xb6, 0x63, 0xa1, 0x5a, 0x5b, 0x18, 0x45, 0x77, 0xd4, 0xbb, 0x15, 0x3c, 0x31, 0x70, 0x34, 0x99,
	0x4f, 0x4f, 0xcd, 0x3c, 0x46, 0x00, 0xd8, 0xd6, 0xce, 0xe6, 0x5f, 0xff, 0x88, 0xdd, 0x82, 0x24,
	0xaf, 0x65, 0x11, 0xd2, 0xf1, 0x3c, 0xba, 0xc2, 0xf5, 0xac, 0xda, 0x84, 0xb0, 0x7e, 0x1d, 0xca,
	0xa6, 0x02, 0x75, 0x23, 0x49, 0xec, 0x39, 0x97, 0x6d, 0x80, 0x06, 0x19, 0xf7, 0x35, 0x0f, 0x43,
	0xf4, 0xb0, 0xbf, 0xa4, 0x1b, 0xe9, 0xf5, 0x3c, 0x5a, 0x06, 0xef, 0x89, 0x5b, 0x19, 0x41, 0x0b,
	0x0f, 0x3d, 0x2d, 0x38, 0x48, 0x90, 0x28, 0x91, 0x30, 0x07, 0xd3, 0xef, 0x6c, 0xfe, 0xed, 0x4f,
	0x98, 0x05, 0x3b, 0x9e, 0xf1, 0x1f, 0x33, 0xe3, 0x63, 0xb5, 0x1f, 0x5d, 0xe3, 0x16, 0x82, 0xf9,
	0xa7, 0x7b, 0x8d, 0x8d, 0x20, 0xa5, 0x75, 0x0a, 0x12, 0x01, 0xb8, 0xee, 0xe6, 0x6e, 0xf4, 0x89,
	0xc0, 0x8d, 0x69, 0xcd, 0x36, 0x66, 0x7b, 0x08, 0x0f, 0x41, 0x03, 0x16, 0x43, 0x10, 0xc4, 0x46,
	0xec, 0xcb, 0xe8, 0x06, 0x68, 0x6d, 0x3b, 0x1d, 0xab, 0x1e, 0xf5, 0x3d, 0x3d, 0x02, 0x18, 0xec,
	0x82, 0x8c, 0xab, 0xba, 0xe1, 0xb7, 0xf4, 0x94, 0xf5, 0xeb, 0x2e, 0xde, 0x2f, 0x41, 0x06, 0xd5,
	0x4e, 0x82, 0x26, 0x08, 0x36, 0xbb, 0x9d, 0x24, 0x0f, 0xb1, 0x13, 0x64, 0x97, 0x9d, 0x20, 0xb0,
	0xfc, 0x8c, 0xfc, 0xd8, 0x92, 0xf2, 0xff, 0x48, 0x9e, 0xd8, 0xc7, 0x5a, 0x98, 0xde, 0x03, 0xd7,
	0x6f, 0xe0, 0x53, 0x7b, 0x68, 0x02, 0xf9, 0xed, 0x91, 0x4e, 0xc7, 0x9e, 0x92, 0x6a, 0x62, 0x6f,
	0x39, 0x7b, 0x40, 0xd8, 0xed, 0x91, 0xbc, 0xa9, 0x7d, 0x0b, 0xc9, 0xd2, 0x71, 0x4b, 0xe6, 0x5c,
	0x8b, 0x86, 0x56, 0xfd, 0xd2, 0x20, 0x5a, 0xb9, 0x65, 0x7b, 0x11, 0x92, 0xd6, 0xef, 0x6c, 0xfe,
	0xd7, 0x25, 0x66, 0xf5, 0x1b, 0x0f, 0x41, 0x2d, 0xf3, 0x46, 0xe2, 0x9a, 0xbf, 0xa5, 0xeb, 0x50,
	0x59, 0x12, 0x67, 0xd0, 0x5c, 0x1f, 0x45, 0x5c, 0xbf, 0xb8, 0x1f, 0x5d, 0x55, 0xc8, 0xbd, 0x79,
	0x96, 0xb1, 0x43, 0xc5, 0x77, 0x51, 0x46, 0x92, 0x0c, 0x42, 0xfa, 0xe6, 0x4f, 0x71, 0x2a, 0xfb,
	0x38, 0xea, 0x71, 0x64, 0x65, 0xfc, 0xfc, 0xf0, 0x93, 0xb2, 0x2c, 0xec, 0x7d, 0x26, 0x3f, 0xce,
	0xf5, 0x3b, 0xff, 0xe9, 0x12, 0x5b, 0xb5, 0x6f, 0x49, 0x96, 0x35, 0x78, 0xfe, 0xe9, 0x5f, 0x47,
	0x37, 0x3e, 0xb0, 0x07, 0x2c, 0x10, 0x3c, 0x48, 0x55, 0x82, 0xc9, 0x94, 0x1c, 0x1c, 0x03, 0xb4,
	0xaa, 0x00, 0x70, 0x22, 0x9f, 0x59, 0xee, 0x9c, 0x08, 0xc2, 0x98, 0xd6, 0x2f, 0xe8, 0xc5, 0x90,
	0xc6, 0x25, 0xad, 0x87, 0x24, 0xb3, 0x7e, 0xff, 0xc2, 0x03, 0x02, 0xce, 0x89, 0x40, 0x18, 0xe4,
	0x7e, 0x67, 0xfb, 0xf6, 0xbf, 0xff, 0xeb, 0xca, 0xa5, 0xbf, 0xff, 0x61, 0xe5, 0xd2, 0x3f, 0xfe,
	0xb0, 0x72, 0xe9, 0x5f, 0x7e, 0x58, 0xb9, 0xf4, 0xdb, 0x9f, 0x8a, 0x37, 0x4e, 0xff, 0x3f, 0xfb,
	0xe7, 0x57, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x84, 0xcb, 0x8f, 0x24, 0x86, 0x85, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCAccountServiceClient is the client API for RPCAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCAccountServiceClient interface {
	//  account.registerDevice#637ea878 token_type:int token:string = Bool;
	//  account.registerDevice#446c712c token_type:int token:string device_model:string system_version:string app_version:string app_sandbox:Bool lang_code:string = Bool;
	//  account.registerDevice#5cbea590 token_type:int token:string app_sandbox:Bool secret:bytes other_uids:Vector<int> = Bool;
	//  account.registerDevice#68976c6f flags:# no_muted:flags.0?true token_type:int token:string app_sandbox:Bool secret:bytes other_uids:Vector<int> = Bool;
	//
	AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error)
	//  account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	//  account.unregisterDevice#3076c4bf token_type:int token:string other_uids:Vector<int> = Bool;
	//
	AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error)
	//  account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	//
	AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	//  account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	//
	AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error)
	//  account.resetNotifySettings#db7e1747 = Bool;
	//
	AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	//  account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	//
	AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error)
	//  account.updateStatus#6628562c offline:Bool = Bool;
	//
	AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error)
	//  account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	//  account.getWallPapers#aabb1763 hash:int = account.WallPapers;
	//
	AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Response_AccountGetWallPapers, error)
	//  account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	//
	AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error)
	//  account.checkUsername#2714d86c username:string = Bool;
	//
	AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	//  account.updateUsername#3e0bdd7c username:string = User;
	//
	AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error)
	//  account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	//
	AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	//  account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	//
	AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	//  account.deleteAccount#418d4e0b reason:string = Bool;
	//
	AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error)
	//  account.getAccountTTL#8fc711d = AccountDaysTTL;
	//
	AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error)
	//  account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	//
	AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error)
	//  account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	//  account.sendChangePhoneCode#82574ae5 phone_number:string settings:CodeSettings = auth.SentCode;
	//
	AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	//  account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	//
	AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error)
	//  account.updateDeviceLocked#38df3532 period:int = Bool;
	//
	AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error)
	//  account.getAuthorizations#e320c158 = account.Authorizations;
	//
	AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error)
	//  account.resetAuthorization#df77f3bc hash:long = Bool;
	//
	AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error)
	//  account.getPassword#548a30f5 = account.Password;
	//
	AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error)
	//  account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	//  account.getPasswordSettings#9cd4eaf9 password:InputCheckPasswordSRP = account.PasswordSettings;
	//
	AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error)
	//  account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	//  account.updatePasswordSettings#a59b102f password:InputCheckPasswordSRP new_settings:account.PasswordInputSettings = Bool;
	//
	AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error)
	//  account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	//  account.sendConfirmPhoneCode#1b3faa88 hash:string settings:CodeSettings = auth.SentCode;
	//
	AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	//  account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	//
	AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error)
	//  account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	//  account.getTmpPassword#449e0b51 password:InputCheckPasswordSRP period:int = account.TmpPassword;
	//
	AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error)
	//  account.getWebAuthorizations#182e6d6f = account.WebAuthorizations;
	//
	AccountGetWebAuthorizations(ctx context.Context, in *TLAccountGetWebAuthorizations, opts ...grpc.CallOption) (*Account_WebAuthorizations, error)
	//  account.resetWebAuthorization#2d01b9ef hash:long = Bool;
	//
	AccountResetWebAuthorization(ctx context.Context, in *TLAccountResetWebAuthorization, opts ...grpc.CallOption) (*Bool, error)
	//  account.resetWebAuthorizations#682d2594 = Bool;
	//
	AccountResetWebAuthorizations(ctx context.Context, in *TLAccountResetWebAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	//  account.getAllSecureValues#b288bc7d = Vector<SecureValue>;
	//
	AccountGetAllSecureValues(ctx context.Context, in *TLAccountGetAllSecureValues, opts ...grpc.CallOption) (*Vector_SecureValue, error)
	//  account.getSecureValue#73665bc2 types:Vector<SecureValueType> = Vector<SecureValue>;
	//
	AccountGetSecureValue(ctx context.Context, in *TLAccountGetSecureValue, opts ...grpc.CallOption) (*Vector_SecureValue, error)
	//  account.saveSecureValue#899fe31d value:InputSecureValue secure_secret_id:long = SecureValue;
	//
	AccountSaveSecureValue(ctx context.Context, in *TLAccountSaveSecureValue, opts ...grpc.CallOption) (*SecureValue, error)
	//  account.deleteSecureValue#b880bc4b types:Vector<SecureValueType> = Bool;
	//
	AccountDeleteSecureValue(ctx context.Context, in *TLAccountDeleteSecureValue, opts ...grpc.CallOption) (*Bool, error)
	//  account.getAuthorizationForm#b86ba8e1 bot_id:int scope:string public_key:string = account.AuthorizationForm;
	//
	AccountGetAuthorizationForm(ctx context.Context, in *TLAccountGetAuthorizationForm, opts ...grpc.CallOption) (*Account_AuthorizationForm, error)
	//  account.acceptAuthorization#e7027c94 bot_id:int scope:string public_key:string value_hashes:Vector<SecureValueHash> credentials:SecureCredentialsEncrypted = Bool;
	//
	AccountAcceptAuthorization(ctx context.Context, in *TLAccountAcceptAuthorization, opts ...grpc.CallOption) (*Bool, error)
	//  account.sendVerifyPhoneCode#823380b4 flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	//  account.sendVerifyPhoneCode#a5a356f9 phone_number:string settings:CodeSettings = auth.SentCode;
	//
	AccountSendVerifyPhoneCode(ctx context.Context, in *TLAccountSendVerifyPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	//  account.verifyPhone#4dd3a7f6 phone_number:string phone_code_hash:string phone_code:string = Bool;
	//
	AccountVerifyPhone(ctx context.Context, in *TLAccountVerifyPhone, opts ...grpc.CallOption) (*Bool, error)
	//  account.sendVerifyEmailCode#7011509f email:string = account.SentEmailCode;
	//
	AccountSendVerifyEmailCode(ctx context.Context, in *TLAccountSendVerifyEmailCode, opts ...grpc.CallOption) (*Account_SentEmailCode, error)
	//  account.verifyEmail#ecba39db email:string code:string = Bool;
	//
	AccountVerifyEmail(ctx context.Context, in *TLAccountVerifyEmail, opts ...grpc.CallOption) (*Bool, error)
	//  account.initTakeoutSession#f05b4804 flags:# contacts:flags.0?true message_users:flags.1?true message_chats:flags.2?true message_megagroups:flags.3?true message_channels:flags.4?true files:flags.5?true file_max_size:flags.5?int = account.Takeout;
	//
	AccountInitTakeoutSession(ctx context.Context, in *TLAccountInitTakeoutSession, opts ...grpc.CallOption) (*Account_Takeout, error)
	//  account.finishTakeoutSession#1d2652ee flags:# success:flags.0?true = Bool;
	//
	AccountFinishTakeoutSession(ctx context.Context, in *TLAccountFinishTakeoutSession, opts ...grpc.CallOption) (*Bool, error)
	//  account.confirmPasswordEmail#8fdf1920 code:string = Bool;
	//
	AccountConfirmPasswordEmail(ctx context.Context, in *TLAccountConfirmPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	//  account.resendPasswordEmail#7a7f2a15 = Bool;
	//
	AccountResendPasswordEmail(ctx context.Context, in *TLAccountResendPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	//  account.cancelPasswordEmail#c1cbd5b6 = Bool;
	//
	AccountCancelPasswordEmail(ctx context.Context, in *TLAccountCancelPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	//  account.getContactSignUpNotification#9f07c728 = Bool;
	//
	AccountGetContactSignUpNotification(ctx context.Context, in *TLAccountGetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error)
	//  account.setContactSignUpNotification#cff43f61 silent:Bool = Bool;
	//
	AccountSetContactSignUpNotification(ctx context.Context, in *TLAccountSetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error)
	//  account.getNotifyExceptions#53577479 flags:# compare_sound:flags.1?true peer:flags.0?InputNotifyPeer = Updates;
	//
	AccountGetNotifyExceptions(ctx context.Context, in *TLAccountGetNotifyExceptions, opts ...grpc.CallOption) (*Updates, error)
	//  account.uploadWallPaper#c7ba9b4d file:InputFile mime_type:string = WallPaper;
	//  account.uploadWallPaper#dd853661 file:InputFile mime_type:string settings:WallPaperSettings = WallPaper;
	//
	AccountUploadWallPaper(ctx context.Context, in *TLAccountUploadWallPaper, opts ...grpc.CallOption) (*WallPaper, error)
	//  account.getWallPaper#fc8ddbea wallpaper:InputWallPaper = WallPaper;
	//
	AccountGetWallPaper(ctx context.Context, in *TLAccountGetWallPaper, opts ...grpc.CallOption) (*WallPaper, error)
	//  account.saveWallPaper#189581b3 wallpaper:InputWallPaper unsave:Bool = Bool;
	//  account.saveWallPaper#6c5a5b37 wallpaper:InputWallPaper unsave:Bool settings:WallPaperSettings = Bool;
	//
	AccountSaveWallPaper(ctx context.Context, in *TLAccountSaveWallPaper, opts ...grpc.CallOption) (*Bool, error)
	//  account.installWallPaper#4a0378ce wallpaper:InputWallPaper = Bool;
	//  account.installWallPaper#feed5769 wallpaper:InputWallPaper settings:WallPaperSettings = Bool;
	//
	AccountInstallWallPaper(ctx context.Context, in *TLAccountInstallWallPaper, opts ...grpc.CallOption) (*Bool, error)
	//  account.resetWallPapers#bb3b9804 = Bool;
	//
	AccountResetWallPapers(ctx context.Context, in *TLAccountResetWallPapers, opts ...grpc.CallOption) (*Bool, error)
	//  account.getAutoDownloadSettings#56da0b3f = account.AutoDownloadSettings;
	//
	AccountGetAutoDownloadSettings(ctx context.Context, in *TLAccountGetAutoDownloadSettings, opts ...grpc.CallOption) (*Account_AutoDownloadSettings, error)
	//  account.saveAutoDownloadSettings#76f36233 flags:# low:flags.0?true high:flags.1?true settings:AutoDownloadSettings = Bool;
	//
	AccountSaveAutoDownloadSettings(ctx context.Context, in *TLAccountSaveAutoDownloadSettings, opts ...grpc.CallOption) (*Bool, error)
	//  account.uploadTheme#1c3db333 flags:# file:InputFile thumb:flags.0?InputFile file_name:string mime_type:string = Document;
	//
	AccountUploadTheme(ctx context.Context, in *TLAccountUploadTheme, opts ...grpc.CallOption) (*Document, error)
	//  account.createTheme#2b7ffd7f slug:string title:string document:InputDocument = Theme;
	//  account.createTheme#8432c21f flags:# slug:string title:string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	//
	AccountCreateTheme(ctx context.Context, in *TLAccountCreateTheme, opts ...grpc.CallOption) (*Theme, error)
	//  account.updateTheme#f8997176 flags:# theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument = Theme;
	//  account.updateTheme#3b8ea202 flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument = Theme;
	//  account.updateTheme#5cb367d5 flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	//
	AccountUpdateTheme(ctx context.Context, in *TLAccountUpdateTheme, opts ...grpc.CallOption) (*Theme, error)
	//  account.saveTheme#f257106c theme:InputTheme unsave:Bool = Bool;
	//
	AccountSaveTheme(ctx context.Context, in *TLAccountSaveTheme, opts ...grpc.CallOption) (*Bool, error)
	//  account.installTheme#e0f8439c format:string theme:InputTheme = Bool;
	//  account.installTheme#7ae43737 flags:# dark:flags.0?true format:flags.1?string theme:flags.1?InputTheme = Bool;
	//
	AccountInstallTheme(ctx context.Context, in *TLAccountInstallTheme, opts ...grpc.CallOption) (*Bool, error)
	//  account.getTheme#8d9d742b format:string theme:InputTheme document_id:long = Theme;
	//
	AccountGetTheme(ctx context.Context, in *TLAccountGetTheme, opts ...grpc.CallOption) (*Theme, error)
	//  account.getThemes#285946f8 format:string hash:int = account.Themes;
	//
	AccountGetThemes(ctx context.Context, in *TLAccountGetThemes, opts ...grpc.CallOption) (*Account_Themes, error)
	//  account.setContentSettings#b574b16b flags:# sensitive_enabled:flags.0?true = Bool;
	//
	AccountSetContentSettings(ctx context.Context, in *TLAccountSetContentSettings, opts ...grpc.CallOption) (*Bool, error)
	//  account.getContentSettings#8b9b4dae = account.ContentSettings;
	//
	AccountGetContentSettings(ctx context.Context, in *TLAccountGetContentSettings, opts ...grpc.CallOption) (*Account_ContentSettings, error)
	//  account.getMultiWallPapers#65ad71dc wallpapers:Vector<InputWallPaper> = Vector<WallPaper>;
	//
	AccountGetMultiWallPapers(ctx context.Context, in *TLAccountGetMultiWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error)
	//  account.getGlobalPrivacySettings#eb2b4cf6 = GlobalPrivacySettings;
	//
	AccountGetGlobalPrivacySettings(ctx context.Context, in *TLAccountGetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error)
	//  account.setGlobalPrivacySettings#1edaaac2 settings:GlobalPrivacySettings = GlobalPrivacySettings;
	//
	AccountSetGlobalPrivacySettings(ctx context.Context, in *TLAccountSetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error)
}

type rPCAccountServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCAccountServiceClient(cc *grpc.ClientConn) RPCAccountServiceClient {
	return &rPCAccountServiceClient{cc}
}

func (c *rPCAccountServiceClient) AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_registerDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_unregisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_updateNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error) {
	out := new(PeerNotifySettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_resetNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_updateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_updateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Response_AccountGetWallPapers, error) {
	out := new(Response_AccountGetWallPapers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getWallPapers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_reportPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_checkUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_updateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_setPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_deleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error) {
	out := new(AccountDaysTTL)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getAccountTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_setAccountTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_sendChangePhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_changePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_updateDeviceLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error) {
	out := new(Account_Authorizations)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_resetAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error) {
	out := new(Account_Password)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error) {
	out := new(Account_PasswordSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getPasswordSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_updatePasswordSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_sendConfirmPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_confirmPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error) {
	out := new(Account_TmpPassword)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getTmpPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetWebAuthorizations(ctx context.Context, in *TLAccountGetWebAuthorizations, opts ...grpc.CallOption) (*Account_WebAuthorizations, error) {
	out := new(Account_WebAuthorizations)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getWebAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountResetWebAuthorization(ctx context.Context, in *TLAccountResetWebAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_resetWebAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountResetWebAuthorizations(ctx context.Context, in *TLAccountResetWebAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_resetWebAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetAllSecureValues(ctx context.Context, in *TLAccountGetAllSecureValues, opts ...grpc.CallOption) (*Vector_SecureValue, error) {
	out := new(Vector_SecureValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getAllSecureValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetSecureValue(ctx context.Context, in *TLAccountGetSecureValue, opts ...grpc.CallOption) (*Vector_SecureValue, error) {
	out := new(Vector_SecureValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getSecureValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSaveSecureValue(ctx context.Context, in *TLAccountSaveSecureValue, opts ...grpc.CallOption) (*SecureValue, error) {
	out := new(SecureValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_saveSecureValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountDeleteSecureValue(ctx context.Context, in *TLAccountDeleteSecureValue, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_deleteSecureValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetAuthorizationForm(ctx context.Context, in *TLAccountGetAuthorizationForm, opts ...grpc.CallOption) (*Account_AuthorizationForm, error) {
	out := new(Account_AuthorizationForm)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getAuthorizationForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountAcceptAuthorization(ctx context.Context, in *TLAccountAcceptAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_acceptAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSendVerifyPhoneCode(ctx context.Context, in *TLAccountSendVerifyPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_sendVerifyPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountVerifyPhone(ctx context.Context, in *TLAccountVerifyPhone, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_verifyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSendVerifyEmailCode(ctx context.Context, in *TLAccountSendVerifyEmailCode, opts ...grpc.CallOption) (*Account_SentEmailCode, error) {
	out := new(Account_SentEmailCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_sendVerifyEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountVerifyEmail(ctx context.Context, in *TLAccountVerifyEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_verifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountInitTakeoutSession(ctx context.Context, in *TLAccountInitTakeoutSession, opts ...grpc.CallOption) (*Account_Takeout, error) {
	out := new(Account_Takeout)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_initTakeoutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountFinishTakeoutSession(ctx context.Context, in *TLAccountFinishTakeoutSession, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_finishTakeoutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountConfirmPasswordEmail(ctx context.Context, in *TLAccountConfirmPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_confirmPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountResendPasswordEmail(ctx context.Context, in *TLAccountResendPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_resendPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountCancelPasswordEmail(ctx context.Context, in *TLAccountCancelPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_cancelPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetContactSignUpNotification(ctx context.Context, in *TLAccountGetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getContactSignUpNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSetContactSignUpNotification(ctx context.Context, in *TLAccountSetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_setContactSignUpNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetNotifyExceptions(ctx context.Context, in *TLAccountGetNotifyExceptions, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getNotifyExceptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUploadWallPaper(ctx context.Context, in *TLAccountUploadWallPaper, opts ...grpc.CallOption) (*WallPaper, error) {
	out := new(WallPaper)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_uploadWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetWallPaper(ctx context.Context, in *TLAccountGetWallPaper, opts ...grpc.CallOption) (*WallPaper, error) {
	out := new(WallPaper)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSaveWallPaper(ctx context.Context, in *TLAccountSaveWallPaper, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_saveWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountInstallWallPaper(ctx context.Context, in *TLAccountInstallWallPaper, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_installWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountResetWallPapers(ctx context.Context, in *TLAccountResetWallPapers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_resetWallPapers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetAutoDownloadSettings(ctx context.Context, in *TLAccountGetAutoDownloadSettings, opts ...grpc.CallOption) (*Account_AutoDownloadSettings, error) {
	out := new(Account_AutoDownloadSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getAutoDownloadSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSaveAutoDownloadSettings(ctx context.Context, in *TLAccountSaveAutoDownloadSettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_saveAutoDownloadSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUploadTheme(ctx context.Context, in *TLAccountUploadTheme, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_uploadTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountCreateTheme(ctx context.Context, in *TLAccountCreateTheme, opts ...grpc.CallOption) (*Theme, error) {
	out := new(Theme)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_createTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountUpdateTheme(ctx context.Context, in *TLAccountUpdateTheme, opts ...grpc.CallOption) (*Theme, error) {
	out := new(Theme)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_updateTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSaveTheme(ctx context.Context, in *TLAccountSaveTheme, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_saveTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountInstallTheme(ctx context.Context, in *TLAccountInstallTheme, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_installTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetTheme(ctx context.Context, in *TLAccountGetTheme, opts ...grpc.CallOption) (*Theme, error) {
	out := new(Theme)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetThemes(ctx context.Context, in *TLAccountGetThemes, opts ...grpc.CallOption) (*Account_Themes, error) {
	out := new(Account_Themes)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getThemes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSetContentSettings(ctx context.Context, in *TLAccountSetContentSettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_setContentSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetContentSettings(ctx context.Context, in *TLAccountGetContentSettings, opts ...grpc.CallOption) (*Account_ContentSettings, error) {
	out := new(Account_ContentSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getContentSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetMultiWallPapers(ctx context.Context, in *TLAccountGetMultiWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error) {
	out := new(Vector_WallPaper)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getMultiWallPapers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountGetGlobalPrivacySettings(ctx context.Context, in *TLAccountGetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error) {
	out := new(GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_getGlobalPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountServiceClient) AccountSetGlobalPrivacySettings(ctx context.Context, in *TLAccountSetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error) {
	out := new(GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccountService/account_setGlobalPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAccountServiceServer is the server API for RPCAccountService service.
type RPCAccountServiceServer interface {
	//  account.registerDevice#637ea878 token_type:int token:string = Bool;
	//  account.registerDevice#446c712c token_type:int token:string device_model:string system_version:string app_version:string app_sandbox:Bool lang_code:string = Bool;
	//  account.registerDevice#5cbea590 token_type:int token:string app_sandbox:Bool secret:bytes other_uids:Vector<int> = Bool;
	//  account.registerDevice#68976c6f flags:# no_muted:flags.0?true token_type:int token:string app_sandbox:Bool secret:bytes other_uids:Vector<int> = Bool;
	//
	AccountRegisterDevice(context.Context, *TLAccountRegisterDevice) (*Bool, error)
	//  account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	//  account.unregisterDevice#3076c4bf token_type:int token:string other_uids:Vector<int> = Bool;
	//
	AccountUnregisterDevice(context.Context, *TLAccountUnregisterDevice) (*Bool, error)
	//  account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	//
	AccountUpdateNotifySettings(context.Context, *TLAccountUpdateNotifySettings) (*Bool, error)
	//  account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	//
	AccountGetNotifySettings(context.Context, *TLAccountGetNotifySettings) (*PeerNotifySettings, error)
	//  account.resetNotifySettings#db7e1747 = Bool;
	//
	AccountResetNotifySettings(context.Context, *TLAccountResetNotifySettings) (*Bool, error)
	//  account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	//
	AccountUpdateProfile(context.Context, *TLAccountUpdateProfile) (*User, error)
	//  account.updateStatus#6628562c offline:Bool = Bool;
	//
	AccountUpdateStatus(context.Context, *TLAccountUpdateStatus) (*Bool, error)
	//  account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	//  account.getWallPapers#aabb1763 hash:int = account.WallPapers;
	//
	AccountGetWallPapers(context.Context, *TLAccountGetWallPapers) (*Response_AccountGetWallPapers, error)
	//  account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	//
	AccountReportPeer(context.Context, *TLAccountReportPeer) (*Bool, error)
	//  account.checkUsername#2714d86c username:string = Bool;
	//
	AccountCheckUsername(context.Context, *TLAccountCheckUsername) (*Bool, error)
	//  account.updateUsername#3e0bdd7c username:string = User;
	//
	AccountUpdateUsername(context.Context, *TLAccountUpdateUsername) (*User, error)
	//  account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	//
	AccountGetPrivacy(context.Context, *TLAccountGetPrivacy) (*Account_PrivacyRules, error)
	//  account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	//
	AccountSetPrivacy(context.Context, *TLAccountSetPrivacy) (*Account_PrivacyRules, error)
	//  account.deleteAccount#418d4e0b reason:string = Bool;
	//
	AccountDeleteAccount(context.Context, *TLAccountDeleteAccount) (*Bool, error)
	//  account.getAccountTTL#8fc711d = AccountDaysTTL;
	//
	AccountGetAccountTTL(context.Context, *TLAccountGetAccountTTL) (*AccountDaysTTL, error)
	//  account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	//
	AccountSetAccountTTL(context.Context, *TLAccountSetAccountTTL) (*Bool, error)
	//  account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	//  account.sendChangePhoneCode#82574ae5 phone_number:string settings:CodeSettings = auth.SentCode;
	//
	AccountSendChangePhoneCode(context.Context, *TLAccountSendChangePhoneCode) (*Auth_SentCode, error)
	//  account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	//
	AccountChangePhone(context.Context, *TLAccountChangePhone) (*User, error)
	//  account.updateDeviceLocked#38df3532 period:int = Bool;
	//
	AccountUpdateDeviceLocked(context.Context, *TLAccountUpdateDeviceLocked) (*Bool, error)
	//  account.getAuthorizations#e320c158 = account.Authorizations;
	//
	AccountGetAuthorizations(context.Context, *TLAccountGetAuthorizations) (*Account_Authorizations, error)
	//  account.resetAuthorization#df77f3bc hash:long = Bool;
	//
	AccountResetAuthorization(context.Context, *TLAccountResetAuthorization) (*Bool, error)
	//  account.getPassword#548a30f5 = account.Password;
	//
	AccountGetPassword(context.Context, *TLAccountGetPassword) (*Account_Password, error)
	//  account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	//  account.getPasswordSettings#9cd4eaf9 password:InputCheckPasswordSRP = account.PasswordSettings;
	//
	AccountGetPasswordSettings(context.Context, *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error)
	//  account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	//  account.updatePasswordSettings#a59b102f password:InputCheckPasswordSRP new_settings:account.PasswordInputSettings = Bool;
	//
	AccountUpdatePasswordSettings(context.Context, *TLAccountUpdatePasswordSettings) (*Bool, error)
	//  account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	//  account.sendConfirmPhoneCode#1b3faa88 hash:string settings:CodeSettings = auth.SentCode;
	//
	AccountSendConfirmPhoneCode(context.Context, *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error)
	//  account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	//
	AccountConfirmPhone(context.Context, *TLAccountConfirmPhone) (*Bool, error)
	//  account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	//  account.getTmpPassword#449e0b51 password:InputCheckPasswordSRP period:int = account.TmpPassword;
	//
	AccountGetTmpPassword(context.Context, *TLAccountGetTmpPassword) (*Account_TmpPassword, error)
	//  account.getWebAuthorizations#182e6d6f = account.WebAuthorizations;
	//
	AccountGetWebAuthorizations(context.Context, *TLAccountGetWebAuthorizations) (*Account_WebAuthorizations, error)
	//  account.resetWebAuthorization#2d01b9ef hash:long = Bool;
	//
	AccountResetWebAuthorization(context.Context, *TLAccountResetWebAuthorization) (*Bool, error)
	//  account.resetWebAuthorizations#682d2594 = Bool;
	//
	AccountResetWebAuthorizations(context.Context, *TLAccountResetWebAuthorizations) (*Bool, error)
	//  account.getAllSecureValues#b288bc7d = Vector<SecureValue>;
	//
	AccountGetAllSecureValues(context.Context, *TLAccountGetAllSecureValues) (*Vector_SecureValue, error)
	//  account.getSecureValue#73665bc2 types:Vector<SecureValueType> = Vector<SecureValue>;
	//
	AccountGetSecureValue(context.Context, *TLAccountGetSecureValue) (*Vector_SecureValue, error)
	//  account.saveSecureValue#899fe31d value:InputSecureValue secure_secret_id:long = SecureValue;
	//
	AccountSaveSecureValue(context.Context, *TLAccountSaveSecureValue) (*SecureValue, error)
	//  account.deleteSecureValue#b880bc4b types:Vector<SecureValueType> = Bool;
	//
	AccountDeleteSecureValue(context.Context, *TLAccountDeleteSecureValue) (*Bool, error)
	//  account.getAuthorizationForm#b86ba8e1 bot_id:int scope:string public_key:string = account.AuthorizationForm;
	//
	AccountGetAuthorizationForm(context.Context, *TLAccountGetAuthorizationForm) (*Account_AuthorizationForm, error)
	//  account.acceptAuthorization#e7027c94 bot_id:int scope:string public_key:string value_hashes:Vector<SecureValueHash> credentials:SecureCredentialsEncrypted = Bool;
	//
	AccountAcceptAuthorization(context.Context, *TLAccountAcceptAuthorization) (*Bool, error)
	//  account.sendVerifyPhoneCode#823380b4 flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	//  account.sendVerifyPhoneCode#a5a356f9 phone_number:string settings:CodeSettings = auth.SentCode;
	//
	AccountSendVerifyPhoneCode(context.Context, *TLAccountSendVerifyPhoneCode) (*Auth_SentCode, error)
	//  account.verifyPhone#4dd3a7f6 phone_number:string phone_code_hash:string phone_code:string = Bool;
	//
	AccountVerifyPhone(context.Context, *TLAccountVerifyPhone) (*Bool, error)
	//  account.sendVerifyEmailCode#7011509f email:string = account.SentEmailCode;
	//
	AccountSendVerifyEmailCode(context.Context, *TLAccountSendVerifyEmailCode) (*Account_SentEmailCode, error)
	//  account.verifyEmail#ecba39db email:string code:string = Bool;
	//
	AccountVerifyEmail(context.Context, *TLAccountVerifyEmail) (*Bool, error)
	//  account.initTakeoutSession#f05b4804 flags:# contacts:flags.0?true message_users:flags.1?true message_chats:flags.2?true message_megagroups:flags.3?true message_channels:flags.4?true files:flags.5?true file_max_size:flags.5?int = account.Takeout;
	//
	AccountInitTakeoutSession(context.Context, *TLAccountInitTakeoutSession) (*Account_Takeout, error)
	//  account.finishTakeoutSession#1d2652ee flags:# success:flags.0?true = Bool;
	//
	AccountFinishTakeoutSession(context.Context, *TLAccountFinishTakeoutSession) (*Bool, error)
	//  account.confirmPasswordEmail#8fdf1920 code:string = Bool;
	//
	AccountConfirmPasswordEmail(context.Context, *TLAccountConfirmPasswordEmail) (*Bool, error)
	//  account.resendPasswordEmail#7a7f2a15 = Bool;
	//
	AccountResendPasswordEmail(context.Context, *TLAccountResendPasswordEmail) (*Bool, error)
	//  account.cancelPasswordEmail#c1cbd5b6 = Bool;
	//
	AccountCancelPasswordEmail(context.Context, *TLAccountCancelPasswordEmail) (*Bool, error)
	//  account.getContactSignUpNotification#9f07c728 = Bool;
	//
	AccountGetContactSignUpNotification(context.Context, *TLAccountGetContactSignUpNotification) (*Bool, error)
	//  account.setContactSignUpNotification#cff43f61 silent:Bool = Bool;
	//
	AccountSetContactSignUpNotification(context.Context, *TLAccountSetContactSignUpNotification) (*Bool, error)
	//  account.getNotifyExceptions#53577479 flags:# compare_sound:flags.1?true peer:flags.0?InputNotifyPeer = Updates;
	//
	AccountGetNotifyExceptions(context.Context, *TLAccountGetNotifyExceptions) (*Updates, error)
	//  account.uploadWallPaper#c7ba9b4d file:InputFile mime_type:string = WallPaper;
	//  account.uploadWallPaper#dd853661 file:InputFile mime_type:string settings:WallPaperSettings = WallPaper;
	//
	AccountUploadWallPaper(context.Context, *TLAccountUploadWallPaper) (*WallPaper, error)
	//  account.getWallPaper#fc8ddbea wallpaper:InputWallPaper = WallPaper;
	//
	AccountGetWallPaper(context.Context, *TLAccountGetWallPaper) (*WallPaper, error)
	//  account.saveWallPaper#189581b3 wallpaper:InputWallPaper unsave:Bool = Bool;
	//  account.saveWallPaper#6c5a5b37 wallpaper:InputWallPaper unsave:Bool settings:WallPaperSettings = Bool;
	//
	AccountSaveWallPaper(context.Context, *TLAccountSaveWallPaper) (*Bool, error)
	//  account.installWallPaper#4a0378ce wallpaper:InputWallPaper = Bool;
	//  account.installWallPaper#feed5769 wallpaper:InputWallPaper settings:WallPaperSettings = Bool;
	//
	AccountInstallWallPaper(context.Context, *TLAccountInstallWallPaper) (*Bool, error)
	//  account.resetWallPapers#bb3b9804 = Bool;
	//
	AccountResetWallPapers(context.Context, *TLAccountResetWallPapers) (*Bool, error)
	//  account.getAutoDownloadSettings#56da0b3f = account.AutoDownloadSettings;
	//
	AccountGetAutoDownloadSettings(context.Context, *TLAccountGetAutoDownloadSettings) (*Account_AutoDownloadSettings, error)
	//  account.saveAutoDownloadSettings#76f36233 flags:# low:flags.0?true high:flags.1?true settings:AutoDownloadSettings = Bool;
	//
	AccountSaveAutoDownloadSettings(context.Context, *TLAccountSaveAutoDownloadSettings) (*Bool, error)
	//  account.uploadTheme#1c3db333 flags:# file:InputFile thumb:flags.0?InputFile file_name:string mime_type:string = Document;
	//
	AccountUploadTheme(context.Context, *TLAccountUploadTheme) (*Document, error)
	//  account.createTheme#2b7ffd7f slug:string title:string document:InputDocument = Theme;
	//  account.createTheme#8432c21f flags:# slug:string title:string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	//
	AccountCreateTheme(context.Context, *TLAccountCreateTheme) (*Theme, error)
	//  account.updateTheme#f8997176 flags:# theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument = Theme;
	//  account.updateTheme#3b8ea202 flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument = Theme;
	//  account.updateTheme#5cb367d5 flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	//
	AccountUpdateTheme(context.Context, *TLAccountUpdateTheme) (*Theme, error)
	//  account.saveTheme#f257106c theme:InputTheme unsave:Bool = Bool;
	//
	AccountSaveTheme(context.Context, *TLAccountSaveTheme) (*Bool, error)
	//  account.installTheme#e0f8439c format:string theme:InputTheme = Bool;
	//  account.installTheme#7ae43737 flags:# dark:flags.0?true format:flags.1?string theme:flags.1?InputTheme = Bool;
	//
	AccountInstallTheme(context.Context, *TLAccountInstallTheme) (*Bool, error)
	//  account.getTheme#8d9d742b format:string theme:InputTheme document_id:long = Theme;
	//
	AccountGetTheme(context.Context, *TLAccountGetTheme) (*Theme, error)
	//  account.getThemes#285946f8 format:string hash:int = account.Themes;
	//
	AccountGetThemes(context.Context, *TLAccountGetThemes) (*Account_Themes, error)
	//  account.setContentSettings#b574b16b flags:# sensitive_enabled:flags.0?true = Bool;
	//
	AccountSetContentSettings(context.Context, *TLAccountSetContentSettings) (*Bool, error)
	//  account.getContentSettings#8b9b4dae = account.ContentSettings;
	//
	AccountGetContentSettings(context.Context, *TLAccountGetContentSettings) (*Account_ContentSettings, error)
	//  account.getMultiWallPapers#65ad71dc wallpapers:Vector<InputWallPaper> = Vector<WallPaper>;
	//
	AccountGetMultiWallPapers(context.Context, *TLAccountGetMultiWallPapers) (*Vector_WallPaper, error)
	//  account.getGlobalPrivacySettings#eb2b4cf6 = GlobalPrivacySettings;
	//
	AccountGetGlobalPrivacySettings(context.Context, *TLAccountGetGlobalPrivacySettings) (*GlobalPrivacySettings, error)
	//  account.setGlobalPrivacySettings#1edaaac2 settings:GlobalPrivacySettings = GlobalPrivacySettings;
	//
	AccountSetGlobalPrivacySettings(context.Context, *TLAccountSetGlobalPrivacySettings) (*GlobalPrivacySettings, error)
}

// UnimplementedRPCAccountServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCAccountServiceServer struct {
}

func (*UnimplementedRPCAccountServiceServer) AccountRegisterDevice(ctx context.Context, req *TLAccountRegisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegisterDevice not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUnregisterDevice(ctx context.Context, req *TLAccountUnregisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnregisterDevice not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUpdateNotifySettings(ctx context.Context, req *TLAccountUpdateNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateNotifySettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetNotifySettings(ctx context.Context, req *TLAccountGetNotifySettings) (*PeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetNotifySettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountResetNotifySettings(ctx context.Context, req *TLAccountResetNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetNotifySettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUpdateProfile(ctx context.Context, req *TLAccountUpdateProfile) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateProfile not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUpdateStatus(ctx context.Context, req *TLAccountUpdateStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateStatus not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetWallPapers(ctx context.Context, req *TLAccountGetWallPapers) (*Response_AccountGetWallPapers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPapers not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountReportPeer(ctx context.Context, req *TLAccountReportPeer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountReportPeer not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountCheckUsername(ctx context.Context, req *TLAccountCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCheckUsername not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUpdateUsername(ctx context.Context, req *TLAccountUpdateUsername) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateUsername not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetPrivacy(ctx context.Context, req *TLAccountGetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPrivacy not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSetPrivacy(ctx context.Context, req *TLAccountSetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetPrivacy not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountDeleteAccount(ctx context.Context, req *TLAccountDeleteAccount) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteAccount not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetAccountTTL(ctx context.Context, req *TLAccountGetAccountTTL) (*AccountDaysTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAccountTTL not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSetAccountTTL(ctx context.Context, req *TLAccountSetAccountTTL) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetAccountTTL not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSendChangePhoneCode(ctx context.Context, req *TLAccountSendChangePhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendChangePhoneCode not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountChangePhone(ctx context.Context, req *TLAccountChangePhone) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountChangePhone not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUpdateDeviceLocked(ctx context.Context, req *TLAccountUpdateDeviceLocked) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateDeviceLocked not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetAuthorizations(ctx context.Context, req *TLAccountGetAuthorizations) (*Account_Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAuthorizations not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountResetAuthorization(ctx context.Context, req *TLAccountResetAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetAuthorization not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetPassword(ctx context.Context, req *TLAccountGetPassword) (*Account_Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPassword not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetPasswordSettings(ctx context.Context, req *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPasswordSettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUpdatePasswordSettings(ctx context.Context, req *TLAccountUpdatePasswordSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdatePasswordSettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSendConfirmPhoneCode(ctx context.Context, req *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendConfirmPhoneCode not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountConfirmPhone(ctx context.Context, req *TLAccountConfirmPhone) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConfirmPhone not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetTmpPassword(ctx context.Context, req *TLAccountGetTmpPassword) (*Account_TmpPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTmpPassword not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetWebAuthorizations(ctx context.Context, req *TLAccountGetWebAuthorizations) (*Account_WebAuthorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWebAuthorizations not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountResetWebAuthorization(ctx context.Context, req *TLAccountResetWebAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWebAuthorization not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountResetWebAuthorizations(ctx context.Context, req *TLAccountResetWebAuthorizations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWebAuthorizations not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetAllSecureValues(ctx context.Context, req *TLAccountGetAllSecureValues) (*Vector_SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAllSecureValues not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetSecureValue(ctx context.Context, req *TLAccountGetSecureValue) (*Vector_SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetSecureValue not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSaveSecureValue(ctx context.Context, req *TLAccountSaveSecureValue) (*SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveSecureValue not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountDeleteSecureValue(ctx context.Context, req *TLAccountDeleteSecureValue) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteSecureValue not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetAuthorizationForm(ctx context.Context, req *TLAccountGetAuthorizationForm) (*Account_AuthorizationForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAuthorizationForm not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountAcceptAuthorization(ctx context.Context, req *TLAccountAcceptAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAcceptAuthorization not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSendVerifyPhoneCode(ctx context.Context, req *TLAccountSendVerifyPhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendVerifyPhoneCode not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountVerifyPhone(ctx context.Context, req *TLAccountVerifyPhone) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVerifyPhone not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSendVerifyEmailCode(ctx context.Context, req *TLAccountSendVerifyEmailCode) (*Account_SentEmailCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendVerifyEmailCode not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountVerifyEmail(ctx context.Context, req *TLAccountVerifyEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVerifyEmail not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountInitTakeoutSession(ctx context.Context, req *TLAccountInitTakeoutSession) (*Account_Takeout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInitTakeoutSession not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountFinishTakeoutSession(ctx context.Context, req *TLAccountFinishTakeoutSession) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFinishTakeoutSession not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountConfirmPasswordEmail(ctx context.Context, req *TLAccountConfirmPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConfirmPasswordEmail not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountResendPasswordEmail(ctx context.Context, req *TLAccountResendPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResendPasswordEmail not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountCancelPasswordEmail(ctx context.Context, req *TLAccountCancelPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCancelPasswordEmail not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetContactSignUpNotification(ctx context.Context, req *TLAccountGetContactSignUpNotification) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetContactSignUpNotification not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSetContactSignUpNotification(ctx context.Context, req *TLAccountSetContactSignUpNotification) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetContactSignUpNotification not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetNotifyExceptions(ctx context.Context, req *TLAccountGetNotifyExceptions) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetNotifyExceptions not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUploadWallPaper(ctx context.Context, req *TLAccountUploadWallPaper) (*WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUploadWallPaper not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetWallPaper(ctx context.Context, req *TLAccountGetWallPaper) (*WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPaper not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSaveWallPaper(ctx context.Context, req *TLAccountSaveWallPaper) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveWallPaper not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountInstallWallPaper(ctx context.Context, req *TLAccountInstallWallPaper) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInstallWallPaper not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountResetWallPapers(ctx context.Context, req *TLAccountResetWallPapers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWallPapers not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetAutoDownloadSettings(ctx context.Context, req *TLAccountGetAutoDownloadSettings) (*Account_AutoDownloadSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAutoDownloadSettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSaveAutoDownloadSettings(ctx context.Context, req *TLAccountSaveAutoDownloadSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveAutoDownloadSettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUploadTheme(ctx context.Context, req *TLAccountUploadTheme) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUploadTheme not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountCreateTheme(ctx context.Context, req *TLAccountCreateTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCreateTheme not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountUpdateTheme(ctx context.Context, req *TLAccountUpdateTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateTheme not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSaveTheme(ctx context.Context, req *TLAccountSaveTheme) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveTheme not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountInstallTheme(ctx context.Context, req *TLAccountInstallTheme) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInstallTheme not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetTheme(ctx context.Context, req *TLAccountGetTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTheme not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetThemes(ctx context.Context, req *TLAccountGetThemes) (*Account_Themes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetThemes not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSetContentSettings(ctx context.Context, req *TLAccountSetContentSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetContentSettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetContentSettings(ctx context.Context, req *TLAccountGetContentSettings) (*Account_ContentSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetContentSettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetMultiWallPapers(ctx context.Context, req *TLAccountGetMultiWallPapers) (*Vector_WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetMultiWallPapers not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountGetGlobalPrivacySettings(ctx context.Context, req *TLAccountGetGlobalPrivacySettings) (*GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetGlobalPrivacySettings not implemented")
}
func (*UnimplementedRPCAccountServiceServer) AccountSetGlobalPrivacySettings(ctx context.Context, req *TLAccountSetGlobalPrivacySettings) (*GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetGlobalPrivacySettings not implemented")
}

func RegisterRPCAccountServiceServer(s *grpc.Server, srv RPCAccountServiceServer) {
	s.RegisterService(&_RPCAccountService_serviceDesc, srv)
}

func _RPCAccountService_AccountRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountRegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountRegisterDevice(ctx, req.(*TLAccountRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUnregisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUnregisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUnregisterDevice(ctx, req.(*TLAccountUnregisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUpdateNotifySettings(ctx, req.(*TLAccountUpdateNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetNotifySettings(ctx, req.(*TLAccountGetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountResetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountResetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountResetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountResetNotifySettings(ctx, req.(*TLAccountResetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUpdateProfile(ctx, req.(*TLAccountUpdateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUpdateStatus(ctx, req.(*TLAccountUpdateStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetWallPapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetWallPapers(ctx, req.(*TLAccountGetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountReportPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountReportPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountReportPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountReportPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountReportPeer(ctx, req.(*TLAccountReportPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountCheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountCheckUsername(ctx, req.(*TLAccountCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUpdateUsername(ctx, req.(*TLAccountUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetPrivacy(ctx, req.(*TLAccountGetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSetPrivacy(ctx, req.(*TLAccountSetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountDeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountDeleteAccount(ctx, req.(*TLAccountDeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetAccountTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetAccountTTL(ctx, req.(*TLAccountGetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSetAccountTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSetAccountTTL(ctx, req.(*TLAccountSetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSendChangePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendChangePhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSendChangePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSendChangePhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSendChangePhoneCode(ctx, req.(*TLAccountSendChangePhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountChangePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountChangePhone(ctx, req.(*TLAccountChangePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUpdateDeviceLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateDeviceLocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUpdateDeviceLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUpdateDeviceLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUpdateDeviceLocked(ctx, req.(*TLAccountUpdateDeviceLocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetAuthorizations(ctx, req.(*TLAccountGetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountResetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountResetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountResetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountResetAuthorization(ctx, req.(*TLAccountResetAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetPassword(ctx, req.(*TLAccountGetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetPasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetPasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetPasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetPasswordSettings(ctx, req.(*TLAccountGetPasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUpdatePasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdatePasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUpdatePasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUpdatePasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUpdatePasswordSettings(ctx, req.(*TLAccountUpdatePasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSendConfirmPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendConfirmPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSendConfirmPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSendConfirmPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSendConfirmPhoneCode(ctx, req.(*TLAccountSendConfirmPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountConfirmPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountConfirmPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountConfirmPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountConfirmPhone(ctx, req.(*TLAccountConfirmPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetTmpPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTmpPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetTmpPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetTmpPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetTmpPassword(ctx, req.(*TLAccountGetTmpPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetWebAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWebAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetWebAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetWebAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetWebAuthorizations(ctx, req.(*TLAccountGetWebAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountResetWebAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWebAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountResetWebAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountResetWebAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountResetWebAuthorization(ctx, req.(*TLAccountResetWebAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountResetWebAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWebAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountResetWebAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountResetWebAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountResetWebAuthorizations(ctx, req.(*TLAccountResetWebAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetAllSecureValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAllSecureValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetAllSecureValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetAllSecureValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetAllSecureValues(ctx, req.(*TLAccountGetAllSecureValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetSecureValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetSecureValue(ctx, req.(*TLAccountGetSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSaveSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSaveSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSaveSecureValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSaveSecureValue(ctx, req.(*TLAccountSaveSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountDeleteSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountDeleteSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountDeleteSecureValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountDeleteSecureValue(ctx, req.(*TLAccountDeleteSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetAuthorizationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizationForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetAuthorizationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetAuthorizationForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetAuthorizationForm(ctx, req.(*TLAccountGetAuthorizationForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountAcceptAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountAcceptAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountAcceptAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountAcceptAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountAcceptAuthorization(ctx, req.(*TLAccountAcceptAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSendVerifyPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendVerifyPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSendVerifyPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSendVerifyPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSendVerifyPhoneCode(ctx, req.(*TLAccountSendVerifyPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountVerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountVerifyPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountVerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountVerifyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountVerifyPhone(ctx, req.(*TLAccountVerifyPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSendVerifyEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendVerifyEmailCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSendVerifyEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSendVerifyEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSendVerifyEmailCode(ctx, req.(*TLAccountSendVerifyEmailCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountVerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountVerifyEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountVerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountVerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountVerifyEmail(ctx, req.(*TLAccountVerifyEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountInitTakeoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInitTakeoutSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountInitTakeoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountInitTakeoutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountInitTakeoutSession(ctx, req.(*TLAccountInitTakeoutSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountFinishTakeoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountFinishTakeoutSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountFinishTakeoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountFinishTakeoutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountFinishTakeoutSession(ctx, req.(*TLAccountFinishTakeoutSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountConfirmPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountConfirmPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountConfirmPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountConfirmPasswordEmail(ctx, req.(*TLAccountConfirmPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountResendPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResendPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountResendPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountResendPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountResendPasswordEmail(ctx, req.(*TLAccountResendPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountCancelPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCancelPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountCancelPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountCancelPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountCancelPasswordEmail(ctx, req.(*TLAccountCancelPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetContactSignUpNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetContactSignUpNotification(ctx, req.(*TLAccountGetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSetContactSignUpNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSetContactSignUpNotification(ctx, req.(*TLAccountSetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetNotifyExceptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifyExceptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetNotifyExceptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetNotifyExceptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetNotifyExceptions(ctx, req.(*TLAccountGetNotifyExceptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUploadWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUploadWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUploadWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUploadWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUploadWallPaper(ctx, req.(*TLAccountUploadWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetWallPaper(ctx, req.(*TLAccountGetWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSaveWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSaveWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSaveWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSaveWallPaper(ctx, req.(*TLAccountSaveWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountInstallWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInstallWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountInstallWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountInstallWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountInstallWallPaper(ctx, req.(*TLAccountInstallWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountResetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountResetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountResetWallPapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountResetWallPapers(ctx, req.(*TLAccountResetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetAutoDownloadSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAutoDownloadSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetAutoDownloadSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetAutoDownloadSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetAutoDownloadSettings(ctx, req.(*TLAccountGetAutoDownloadSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSaveAutoDownloadSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveAutoDownloadSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSaveAutoDownloadSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSaveAutoDownloadSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSaveAutoDownloadSettings(ctx, req.(*TLAccountSaveAutoDownloadSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUploadTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUploadTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUploadTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUploadTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUploadTheme(ctx, req.(*TLAccountUploadTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountCreateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCreateTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountCreateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountCreateTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountCreateTheme(ctx, req.(*TLAccountCreateTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountUpdateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountUpdateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountUpdateTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountUpdateTheme(ctx, req.(*TLAccountUpdateTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSaveTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSaveTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSaveTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSaveTheme(ctx, req.(*TLAccountSaveTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountInstallTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInstallTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountInstallTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountInstallTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountInstallTheme(ctx, req.(*TLAccountInstallTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetTheme(ctx, req.(*TLAccountGetTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetThemes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetThemes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetThemes(ctx, req.(*TLAccountGetThemes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSetContentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSetContentSettings(ctx, req.(*TLAccountSetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetContentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetContentSettings(ctx, req.(*TLAccountGetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetMultiWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetMultiWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetMultiWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetMultiWallPapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetMultiWallPapers(ctx, req.(*TLAccountGetMultiWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountGetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountGetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountGetGlobalPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountGetGlobalPrivacySettings(ctx, req.(*TLAccountGetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccountService_AccountSetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServiceServer).AccountSetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccountService/AccountSetGlobalPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServiceServer).AccountSetGlobalPrivacySettings(ctx, req.(*TLAccountSetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCAccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAccountService",
	HandlerType: (*RPCAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_registerDevice",
			Handler:    _RPCAccountService_AccountRegisterDevice_Handler,
		},
		{
			MethodName: "account_unregisterDevice",
			Handler:    _RPCAccountService_AccountUnregisterDevice_Handler,
		},
		{
			MethodName: "account_updateNotifySettings",
			Handler:    _RPCAccountService_AccountUpdateNotifySettings_Handler,
		},
		{
			MethodName: "account_getNotifySettings",
			Handler:    _RPCAccountService_AccountGetNotifySettings_Handler,
		},
		{
			MethodName: "account_resetNotifySettings",
			Handler:    _RPCAccountService_AccountResetNotifySettings_Handler,
		},
		{
			MethodName: "account_updateProfile",
			Handler:    _RPCAccountService_AccountUpdateProfile_Handler,
		},
		{
			MethodName: "account_updateStatus",
			Handler:    _RPCAccountService_AccountUpdateStatus_Handler,
		},
		{
			MethodName: "account_getWallPapers",
			Handler:    _RPCAccountService_AccountGetWallPapers_Handler,
		},
		{
			MethodName: "account_reportPeer",
			Handler:    _RPCAccountService_AccountReportPeer_Handler,
		},
		{
			MethodName: "account_checkUsername",
			Handler:    _RPCAccountService_AccountCheckUsername_Handler,
		},
		{
			MethodName: "account_updateUsername",
			Handler:    _RPCAccountService_AccountUpdateUsername_Handler,
		},
		{
			MethodName: "account_getPrivacy",
			Handler:    _RPCAccountService_AccountGetPrivacy_Handler,
		},
		{
			MethodName: "account_setPrivacy",
			Handler:    _RPCAccountService_AccountSetPrivacy_Handler,
		},
		{
			MethodName: "account_deleteAccount",
			Handler:    _RPCAccountService_AccountDeleteAccount_Handler,
		},
		{
			MethodName: "account_getAccountTTL",
			Handler:    _RPCAccountService_AccountGetAccountTTL_Handler,
		},
		{
			MethodName: "account_setAccountTTL",
			Handler:    _RPCAccountService_AccountSetAccountTTL_Handler,
		},
		{
			MethodName: "account_sendChangePhoneCode",
			Handler:    _RPCAccountService_AccountSendChangePhoneCode_Handler,
		},
		{
			MethodName: "account_changePhone",
			Handler:    _RPCAccountService_AccountChangePhone_Handler,
		},
		{
			MethodName: "account_updateDeviceLocked",
			Handler:    _RPCAccountService_AccountUpdateDeviceLocked_Handler,
		},
		{
			MethodName: "account_getAuthorizations",
			Handler:    _RPCAccountService_AccountGetAuthorizations_Handler,
		},
		{
			MethodName: "account_resetAuthorization",
			Handler:    _RPCAccountService_AccountResetAuthorization_Handler,
		},
		{
			MethodName: "account_getPassword",
			Handler:    _RPCAccountService_AccountGetPassword_Handler,
		},
		{
			MethodName: "account_getPasswordSettings",
			Handler:    _RPCAccountService_AccountGetPasswordSettings_Handler,
		},
		{
			MethodName: "account_updatePasswordSettings",
			Handler:    _RPCAccountService_AccountUpdatePasswordSettings_Handler,
		},
		{
			MethodName: "account_sendConfirmPhoneCode",
			Handler:    _RPCAccountService_AccountSendConfirmPhoneCode_Handler,
		},
		{
			MethodName: "account_confirmPhone",
			Handler:    _RPCAccountService_AccountConfirmPhone_Handler,
		},
		{
			MethodName: "account_getTmpPassword",
			Handler:    _RPCAccountService_AccountGetTmpPassword_Handler,
		},
		{
			MethodName: "account_getWebAuthorizations",
			Handler:    _RPCAccountService_AccountGetWebAuthorizations_Handler,
		},
		{
			MethodName: "account_resetWebAuthorization",
			Handler:    _RPCAccountService_AccountResetWebAuthorization_Handler,
		},
		{
			MethodName: "account_resetWebAuthorizations",
			Handler:    _RPCAccountService_AccountResetWebAuthorizations_Handler,
		},
		{
			MethodName: "account_getAllSecureValues",
			Handler:    _RPCAccountService_AccountGetAllSecureValues_Handler,
		},
		{
			MethodName: "account_getSecureValue",
			Handler:    _RPCAccountService_AccountGetSecureValue_Handler,
		},
		{
			MethodName: "account_saveSecureValue",
			Handler:    _RPCAccountService_AccountSaveSecureValue_Handler,
		},
		{
			MethodName: "account_deleteSecureValue",
			Handler:    _RPCAccountService_AccountDeleteSecureValue_Handler,
		},
		{
			MethodName: "account_getAuthorizationForm",
			Handler:    _RPCAccountService_AccountGetAuthorizationForm_Handler,
		},
		{
			MethodName: "account_acceptAuthorization",
			Handler:    _RPCAccountService_AccountAcceptAuthorization_Handler,
		},
		{
			MethodName: "account_sendVerifyPhoneCode",
			Handler:    _RPCAccountService_AccountSendVerifyPhoneCode_Handler,
		},
		{
			MethodName: "account_verifyPhone",
			Handler:    _RPCAccountService_AccountVerifyPhone_Handler,
		},
		{
			MethodName: "account_sendVerifyEmailCode",
			Handler:    _RPCAccountService_AccountSendVerifyEmailCode_Handler,
		},
		{
			MethodName: "account_verifyEmail",
			Handler:    _RPCAccountService_AccountVerifyEmail_Handler,
		},
		{
			MethodName: "account_initTakeoutSession",
			Handler:    _RPCAccountService_AccountInitTakeoutSession_Handler,
		},
		{
			MethodName: "account_finishTakeoutSession",
			Handler:    _RPCAccountService_AccountFinishTakeoutSession_Handler,
		},
		{
			MethodName: "account_confirmPasswordEmail",
			Handler:    _RPCAccountService_AccountConfirmPasswordEmail_Handler,
		},
		{
			MethodName: "account_resendPasswordEmail",
			Handler:    _RPCAccountService_AccountResendPasswordEmail_Handler,
		},
		{
			MethodName: "account_cancelPasswordEmail",
			Handler:    _RPCAccountService_AccountCancelPasswordEmail_Handler,
		},
		{
			MethodName: "account_getContactSignUpNotification",
			Handler:    _RPCAccountService_AccountGetContactSignUpNotification_Handler,
		},
		{
			MethodName: "account_setContactSignUpNotification",
			Handler:    _RPCAccountService_AccountSetContactSignUpNotification_Handler,
		},
		{
			MethodName: "account_getNotifyExceptions",
			Handler:    _RPCAccountService_AccountGetNotifyExceptions_Handler,
		},
		{
			MethodName: "account_uploadWallPaper",
			Handler:    _RPCAccountService_AccountUploadWallPaper_Handler,
		},
		{
			MethodName: "account_getWallPaper",
			Handler:    _RPCAccountService_AccountGetWallPaper_Handler,
		},
		{
			MethodName: "account_saveWallPaper",
			Handler:    _RPCAccountService_AccountSaveWallPaper_Handler,
		},
		{
			MethodName: "account_installWallPaper",
			Handler:    _RPCAccountService_AccountInstallWallPaper_Handler,
		},
		{
			MethodName: "account_resetWallPapers",
			Handler:    _RPCAccountService_AccountResetWallPapers_Handler,
		},
		{
			MethodName: "account_getAutoDownloadSettings",
			Handler:    _RPCAccountService_AccountGetAutoDownloadSettings_Handler,
		},
		{
			MethodName: "account_saveAutoDownloadSettings",
			Handler:    _RPCAccountService_AccountSaveAutoDownloadSettings_Handler,
		},
		{
			MethodName: "account_uploadTheme",
			Handler:    _RPCAccountService_AccountUploadTheme_Handler,
		},
		{
			MethodName: "account_createTheme",
			Handler:    _RPCAccountService_AccountCreateTheme_Handler,
		},
		{
			MethodName: "account_updateTheme",
			Handler:    _RPCAccountService_AccountUpdateTheme_Handler,
		},
		{
			MethodName: "account_saveTheme",
			Handler:    _RPCAccountService_AccountSaveTheme_Handler,
		},
		{
			MethodName: "account_installTheme",
			Handler:    _RPCAccountService_AccountInstallTheme_Handler,
		},
		{
			MethodName: "account_getTheme",
			Handler:    _RPCAccountService_AccountGetTheme_Handler,
		},
		{
			MethodName: "account_getThemes",
			Handler:    _RPCAccountService_AccountGetThemes_Handler,
		},
		{
			MethodName: "account_setContentSettings",
			Handler:    _RPCAccountService_AccountSetContentSettings_Handler,
		},
		{
			MethodName: "account_getContentSettings",
			Handler:    _RPCAccountService_AccountGetContentSettings_Handler,
		},
		{
			MethodName: "account_getMultiWallPapers",
			Handler:    _RPCAccountService_AccountGetMultiWallPapers_Handler,
		},
		{
			MethodName: "account_getGlobalPrivacySettings",
			Handler:    _RPCAccountService_AccountGetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "account_setGlobalPrivacySettings",
			Handler:    _RPCAccountService_AccountSetGlobalPrivacySettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCAccountService_serviceDesc = map[string][]interface{}{
	"TLAccountRegisterDevice": {
		"/mtproto.RPCAccountService/account_registerDevice",
		func() interface{} { return new(Bool) },
		"AccountRegisterDevice",
	},
	"TLAccountUnregisterDevice": {
		"/mtproto.RPCAccountService/account_unregisterDevice",
		func() interface{} { return new(Bool) },
		"AccountUnregisterDevice",
	},
	"TLAccountUpdateNotifySettings": {
		"/mtproto.RPCAccountService/account_updateNotifySettings",
		func() interface{} { return new(Bool) },
		"AccountUpdateNotifySettings",
	},
	"TLAccountGetNotifySettings": {
		"/mtproto.RPCAccountService/account_getNotifySettings",
		func() interface{} { return new(PeerNotifySettings) },
		"AccountGetNotifySettings",
	},
	"TLAccountResetNotifySettings": {
		"/mtproto.RPCAccountService/account_resetNotifySettings",
		func() interface{} { return new(Bool) },
		"AccountResetNotifySettings",
	},
	"TLAccountUpdateProfile": {
		"/mtproto.RPCAccountService/account_updateProfile",
		func() interface{} { return new(User) },
		"AccountUpdateProfile",
	},
	"TLAccountUpdateStatus": {
		"/mtproto.RPCAccountService/account_updateStatus",
		func() interface{} { return new(Bool) },
		"AccountUpdateStatus",
	},
	"TLAccountGetWallPapers": {
		"/mtproto.RPCAccountService/account_getWallPapers",
		func() interface{} { return new(Response_AccountGetWallPapers) },
		"AccountGetWallPapers",
	},
	"TLAccountReportPeer": {
		"/mtproto.RPCAccountService/account_reportPeer",
		func() interface{} { return new(Bool) },
		"AccountReportPeer",
	},
	"TLAccountCheckUsername": {
		"/mtproto.RPCAccountService/account_checkUsername",
		func() interface{} { return new(Bool) },
		"AccountCheckUsername",
	},
	"TLAccountUpdateUsername": {
		"/mtproto.RPCAccountService/account_updateUsername",
		func() interface{} { return new(User) },
		"AccountUpdateUsername",
	},
	"TLAccountGetPrivacy": {
		"/mtproto.RPCAccountService/account_getPrivacy",
		func() interface{} { return new(Account_PrivacyRules) },
		"AccountGetPrivacy",
	},
	"TLAccountSetPrivacy": {
		"/mtproto.RPCAccountService/account_setPrivacy",
		func() interface{} { return new(Account_PrivacyRules) },
		"AccountSetPrivacy",
	},
	"TLAccountDeleteAccount": {
		"/mtproto.RPCAccountService/account_deleteAccount",
		func() interface{} { return new(Bool) },
		"AccountDeleteAccount",
	},
	"TLAccountGetAccountTTL": {
		"/mtproto.RPCAccountService/account_getAccountTTL",
		func() interface{} { return new(AccountDaysTTL) },
		"AccountGetAccountTTL",
	},
	"TLAccountSetAccountTTL": {
		"/mtproto.RPCAccountService/account_setAccountTTL",
		func() interface{} { return new(Bool) },
		"AccountSetAccountTTL",
	},
	"TLAccountSendChangePhoneCode": {
		"/mtproto.RPCAccountService/account_sendChangePhoneCode",
		func() interface{} { return new(Auth_SentCode) },
		"AccountSendChangePhoneCode",
	},
	"TLAccountChangePhone": {
		"/mtproto.RPCAccountService/account_changePhone",
		func() interface{} { return new(User) },
		"AccountChangePhone",
	},
	"TLAccountUpdateDeviceLocked": {
		"/mtproto.RPCAccountService/account_updateDeviceLocked",
		func() interface{} { return new(Bool) },
		"AccountUpdateDeviceLocked",
	},
	"TLAccountGetAuthorizations": {
		"/mtproto.RPCAccountService/account_getAuthorizations",
		func() interface{} { return new(Account_Authorizations) },
		"AccountGetAuthorizations",
	},
	"TLAccountResetAuthorization": {
		"/mtproto.RPCAccountService/account_resetAuthorization",
		func() interface{} { return new(Bool) },
		"AccountResetAuthorization",
	},
	"TLAccountGetPassword": {
		"/mtproto.RPCAccountService/account_getPassword",
		func() interface{} { return new(Account_Password) },
		"AccountGetPassword",
	},
	"TLAccountGetPasswordSettings": {
		"/mtproto.RPCAccountService/account_getPasswordSettings",
		func() interface{} { return new(Account_PasswordSettings) },
		"AccountGetPasswordSettings",
	},
	"TLAccountUpdatePasswordSettings": {
		"/mtproto.RPCAccountService/account_updatePasswordSettings",
		func() interface{} { return new(Bool) },
		"AccountUpdatePasswordSettings",
	},
	"TLAccountSendConfirmPhoneCode": {
		"/mtproto.RPCAccountService/account_sendConfirmPhoneCode",
		func() interface{} { return new(Auth_SentCode) },
		"AccountSendConfirmPhoneCode",
	},
	"TLAccountConfirmPhone": {
		"/mtproto.RPCAccountService/account_confirmPhone",
		func() interface{} { return new(Bool) },
		"AccountConfirmPhone",
	},
	"TLAccountGetTmpPassword": {
		"/mtproto.RPCAccountService/account_getTmpPassword",
		func() interface{} { return new(Account_TmpPassword) },
		"AccountGetTmpPassword",
	},
	"TLAccountGetWebAuthorizations": {
		"/mtproto.RPCAccountService/account_getWebAuthorizations",
		func() interface{} { return new(Account_WebAuthorizations) },
		"AccountGetWebAuthorizations",
	},
	"TLAccountResetWebAuthorization": {
		"/mtproto.RPCAccountService/account_resetWebAuthorization",
		func() interface{} { return new(Bool) },
		"AccountResetWebAuthorization",
	},
	"TLAccountResetWebAuthorizations": {
		"/mtproto.RPCAccountService/account_resetWebAuthorizations",
		func() interface{} { return new(Bool) },
		"AccountResetWebAuthorizations",
	},
	"TLAccountGetAllSecureValues": {
		"/mtproto.RPCAccountService/account_getAllSecureValues",
		func() interface{} { return new(Vector_SecureValue) },
		"AccountGetAllSecureValues",
	},
	"TLAccountGetSecureValue": {
		"/mtproto.RPCAccountService/account_getSecureValue",
		func() interface{} { return new(Vector_SecureValue) },
		"AccountGetSecureValue",
	},
	"TLAccountSaveSecureValue": {
		"/mtproto.RPCAccountService/account_saveSecureValue",
		func() interface{} { return new(SecureValue) },
		"AccountSaveSecureValue",
	},
	"TLAccountDeleteSecureValue": {
		"/mtproto.RPCAccountService/account_deleteSecureValue",
		func() interface{} { return new(Bool) },
		"AccountDeleteSecureValue",
	},
	"TLAccountGetAuthorizationForm": {
		"/mtproto.RPCAccountService/account_getAuthorizationForm",
		func() interface{} { return new(Account_AuthorizationForm) },
		"AccountGetAuthorizationForm",
	},
	"TLAccountAcceptAuthorization": {
		"/mtproto.RPCAccountService/account_acceptAuthorization",
		func() interface{} { return new(Bool) },
		"AccountAcceptAuthorization",
	},
	"TLAccountSendVerifyPhoneCode": {
		"/mtproto.RPCAccountService/account_sendVerifyPhoneCode",
		func() interface{} { return new(Auth_SentCode) },
		"AccountSendVerifyPhoneCode",
	},
	"TLAccountVerifyPhone": {
		"/mtproto.RPCAccountService/account_verifyPhone",
		func() interface{} { return new(Bool) },
		"AccountVerifyPhone",
	},
	"TLAccountSendVerifyEmailCode": {
		"/mtproto.RPCAccountService/account_sendVerifyEmailCode",
		func() interface{} { return new(Account_SentEmailCode) },
		"AccountSendVerifyEmailCode",
	},
	"TLAccountVerifyEmail": {
		"/mtproto.RPCAccountService/account_verifyEmail",
		func() interface{} { return new(Bool) },
		"AccountVerifyEmail",
	},
	"TLAccountInitTakeoutSession": {
		"/mtproto.RPCAccountService/account_initTakeoutSession",
		func() interface{} { return new(Account_Takeout) },
		"AccountInitTakeoutSession",
	},
	"TLAccountFinishTakeoutSession": {
		"/mtproto.RPCAccountService/account_finishTakeoutSession",
		func() interface{} { return new(Bool) },
		"AccountFinishTakeoutSession",
	},
	"TLAccountConfirmPasswordEmail": {
		"/mtproto.RPCAccountService/account_confirmPasswordEmail",
		func() interface{} { return new(Bool) },
		"AccountConfirmPasswordEmail",
	},
	"TLAccountResendPasswordEmail": {
		"/mtproto.RPCAccountService/account_resendPasswordEmail",
		func() interface{} { return new(Bool) },
		"AccountResendPasswordEmail",
	},
	"TLAccountCancelPasswordEmail": {
		"/mtproto.RPCAccountService/account_cancelPasswordEmail",
		func() interface{} { return new(Bool) },
		"AccountCancelPasswordEmail",
	},
	"TLAccountGetContactSignUpNotification": {
		"/mtproto.RPCAccountService/account_getContactSignUpNotification",
		func() interface{} { return new(Bool) },
		"AccountGetContactSignUpNotification",
	},
	"TLAccountSetContactSignUpNotification": {
		"/mtproto.RPCAccountService/account_setContactSignUpNotification",
		func() interface{} { return new(Bool) },
		"AccountSetContactSignUpNotification",
	},
	"TLAccountGetNotifyExceptions": {
		"/mtproto.RPCAccountService/account_getNotifyExceptions",
		func() interface{} { return new(Updates) },
		"AccountGetNotifyExceptions",
	},
	"TLAccountUploadWallPaper": {
		"/mtproto.RPCAccountService/account_uploadWallPaper",
		func() interface{} { return new(WallPaper) },
		"AccountUploadWallPaper",
	},
	"TLAccountGetWallPaper": {
		"/mtproto.RPCAccountService/account_getWallPaper",
		func() interface{} { return new(WallPaper) },
		"AccountGetWallPaper",
	},
	"TLAccountSaveWallPaper": {
		"/mtproto.RPCAccountService/account_saveWallPaper",
		func() interface{} { return new(Bool) },
		"AccountSaveWallPaper",
	},
	"TLAccountInstallWallPaper": {
		"/mtproto.RPCAccountService/account_installWallPaper",
		func() interface{} { return new(Bool) },
		"AccountInstallWallPaper",
	},
	"TLAccountResetWallPapers": {
		"/mtproto.RPCAccountService/account_resetWallPapers",
		func() interface{} { return new(Bool) },
		"AccountResetWallPapers",
	},
	"TLAccountGetAutoDownloadSettings": {
		"/mtproto.RPCAccountService/account_getAutoDownloadSettings",
		func() interface{} { return new(Account_AutoDownloadSettings) },
		"AccountGetAutoDownloadSettings",
	},
	"TLAccountSaveAutoDownloadSettings": {
		"/mtproto.RPCAccountService/account_saveAutoDownloadSettings",
		func() interface{} { return new(Bool) },
		"AccountSaveAutoDownloadSettings",
	},
	"TLAccountUploadTheme": {
		"/mtproto.RPCAccountService/account_uploadTheme",
		func() interface{} { return new(Document) },
		"AccountUploadTheme",
	},
	"TLAccountCreateTheme": {
		"/mtproto.RPCAccountService/account_createTheme",
		func() interface{} { return new(Theme) },
		"AccountCreateTheme",
	},
	"TLAccountUpdateTheme": {
		"/mtproto.RPCAccountService/account_updateTheme",
		func() interface{} { return new(Theme) },
		"AccountUpdateTheme",
	},
	"TLAccountSaveTheme": {
		"/mtproto.RPCAccountService/account_saveTheme",
		func() interface{} { return new(Bool) },
		"AccountSaveTheme",
	},
	"TLAccountInstallTheme": {
		"/mtproto.RPCAccountService/account_installTheme",
		func() interface{} { return new(Bool) },
		"AccountInstallTheme",
	},
	"TLAccountGetTheme": {
		"/mtproto.RPCAccountService/account_getTheme",
		func() interface{} { return new(Theme) },
		"AccountGetTheme",
	},
	"TLAccountGetThemes": {
		"/mtproto.RPCAccountService/account_getThemes",
		func() interface{} { return new(Account_Themes) },
		"AccountGetThemes",
	},
	"TLAccountSetContentSettings": {
		"/mtproto.RPCAccountService/account_setContentSettings",
		func() interface{} { return new(Bool) },
		"AccountSetContentSettings",
	},
	"TLAccountGetContentSettings": {
		"/mtproto.RPCAccountService/account_getContentSettings",
		func() interface{} { return new(Account_ContentSettings) },
		"AccountGetContentSettings",
	},
	"TLAccountGetMultiWallPapers": {
		"/mtproto.RPCAccountService/account_getMultiWallPapers",
		func() interface{} { return new(Vector_WallPaper) },
		"AccountGetMultiWallPapers",
	},
	"TLAccountGetGlobalPrivacySettings": {
		"/mtproto.RPCAccountService/account_getGlobalPrivacySettings",
		func() interface{} { return new(GlobalPrivacySettings) },
		"AccountGetGlobalPrivacySettings",
	},
	"TLAccountSetGlobalPrivacySettings": {
		"/mtproto.RPCAccountService/account_setGlobalPrivacySettings",
		func() interface{} { return new(GlobalPrivacySettings) },
		"AccountSetGlobalPrivacySettings",
	},
}

// RPCAuthServiceClient is the client API for RPCAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCAuthServiceClient interface {
	//  auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	//
	AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error)
	//  auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	//  auth.sendCode#ccfd70cf flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string lang_code:string = auth.SentCode;
	//  auth.sendCode#a677244f phone_number:string api_id:int api_hash:string settings:CodeSettings = auth.SentCode;
	//
	AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	//  auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	//  auth.signUp#80eee427 phone_number:string phone_code_hash:string first_name:string last_name:string = auth.Authorization;
	//
	AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error)
	//  auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	//
	AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error)
	//  auth.logOut#5717da40 = Bool;
	//
	AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error)
	//  auth.resetAuthorizations#9fab0d1a = Bool;
	//
	AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	//  auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	//
	AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error)
	//  auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	//
	AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error)
	//  auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	//
	AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	//  auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	//
	AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error)
	//  auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	//
	AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	//  auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	//  auth.checkPassword#d18b4d16 password:InputCheckPasswordSRP = auth.Authorization;
	//
	AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	//  auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	//
	AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error)
	//  auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	//
	AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	//  auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	//
	AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	//  auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	//
	AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error)
	//  auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	//
	AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error)
	//  auth.exportLoginToken#b1b41517 api_id:int api_hash:string except_ids:Vector<int> = auth.LoginToken;
	//
	AuthExportLoginToken(ctx context.Context, in *TLAuthExportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error)
	//  auth.importLoginToken#95ac5ce4 token:bytes = auth.LoginToken;
	//
	AuthImportLoginToken(ctx context.Context, in *TLAuthImportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error)
	//  auth.acceptLoginToken#e894ad4d token:bytes = Authorization;
	//
	AuthAcceptLoginToken(ctx context.Context, in *TLAuthAcceptLoginToken, opts ...grpc.CallOption) (*Authorization, error)
}

type rPCAuthServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCAuthServiceClient(cc *grpc.ClientConn) RPCAuthServiceClient {
	return &rPCAuthServiceClient{cc}
}

func (c *rPCAuthServiceClient) AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error) {
	out := new(Auth_CheckedPhone)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_checkPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_sendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_signUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_signIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_logOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_resetAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_sendInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error) {
	out := new(Auth_ExportedAuthorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_exportAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_importAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_bindTempAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_importBotAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_checkPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error) {
	out := new(Auth_PasswordRecovery)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_requestPasswordRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_recoverPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_resendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_cancelCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_dropTempAuthKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthExportLoginToken(ctx context.Context, in *TLAuthExportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error) {
	out := new(Auth_LoginToken)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_exportLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthImportLoginToken(ctx context.Context, in *TLAuthImportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error) {
	out := new(Auth_LoginToken)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_importLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthServiceClient) AuthAcceptLoginToken(ctx context.Context, in *TLAuthAcceptLoginToken, opts ...grpc.CallOption) (*Authorization, error) {
	out := new(Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuthService/auth_acceptLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAuthServiceServer is the server API for RPCAuthService service.
type RPCAuthServiceServer interface {
	//  auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	//
	AuthCheckPhone(context.Context, *TLAuthCheckPhone) (*Auth_CheckedPhone, error)
	//  auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	//  auth.sendCode#ccfd70cf flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string lang_code:string = auth.SentCode;
	//  auth.sendCode#a677244f phone_number:string api_id:int api_hash:string settings:CodeSettings = auth.SentCode;
	//
	AuthSendCode(context.Context, *TLAuthSendCode) (*Auth_SentCode, error)
	//  auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	//  auth.signUp#80eee427 phone_number:string phone_code_hash:string first_name:string last_name:string = auth.Authorization;
	//
	AuthSignUp(context.Context, *TLAuthSignUp) (*Auth_Authorization, error)
	//  auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	//
	AuthSignIn(context.Context, *TLAuthSignIn) (*Auth_Authorization, error)
	//  auth.logOut#5717da40 = Bool;
	//
	AuthLogOut(context.Context, *TLAuthLogOut) (*Bool, error)
	//  auth.resetAuthorizations#9fab0d1a = Bool;
	//
	AuthResetAuthorizations(context.Context, *TLAuthResetAuthorizations) (*Bool, error)
	//  auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	//
	AuthSendInvites(context.Context, *TLAuthSendInvites) (*Bool, error)
	//  auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	//
	AuthExportAuthorization(context.Context, *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error)
	//  auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	//
	AuthImportAuthorization(context.Context, *TLAuthImportAuthorization) (*Auth_Authorization, error)
	//  auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	//
	AuthBindTempAuthKey(context.Context, *TLAuthBindTempAuthKey) (*Bool, error)
	//  auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	//
	AuthImportBotAuthorization(context.Context, *TLAuthImportBotAuthorization) (*Auth_Authorization, error)
	//  auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	//  auth.checkPassword#d18b4d16 password:InputCheckPasswordSRP = auth.Authorization;
	//
	AuthCheckPassword(context.Context, *TLAuthCheckPassword) (*Auth_Authorization, error)
	//  auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	//
	AuthRequestPasswordRecovery(context.Context, *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error)
	//  auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	//
	AuthRecoverPassword(context.Context, *TLAuthRecoverPassword) (*Auth_Authorization, error)
	//  auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	//
	AuthResendCode(context.Context, *TLAuthResendCode) (*Auth_SentCode, error)
	//  auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	//
	AuthCancelCode(context.Context, *TLAuthCancelCode) (*Bool, error)
	//  auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	//
	AuthDropTempAuthKeys(context.Context, *TLAuthDropTempAuthKeys) (*Bool, error)
	//  auth.exportLoginToken#b1b41517 api_id:int api_hash:string except_ids:Vector<int> = auth.LoginToken;
	//
	AuthExportLoginToken(context.Context, *TLAuthExportLoginToken) (*Auth_LoginToken, error)
	//  auth.importLoginToken#95ac5ce4 token:bytes = auth.LoginToken;
	//
	AuthImportLoginToken(context.Context, *TLAuthImportLoginToken) (*Auth_LoginToken, error)
	//  auth.acceptLoginToken#e894ad4d token:bytes = Authorization;
	//
	AuthAcceptLoginToken(context.Context, *TLAuthAcceptLoginToken) (*Authorization, error)
}

// UnimplementedRPCAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCAuthServiceServer struct {
}

func (*UnimplementedRPCAuthServiceServer) AuthCheckPhone(ctx context.Context, req *TLAuthCheckPhone) (*Auth_CheckedPhone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPhone not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthSendCode(ctx context.Context, req *TLAuthSendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendCode not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthSignUp(ctx context.Context, req *TLAuthSignUp) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUp not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthSignIn(ctx context.Context, req *TLAuthSignIn) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignIn not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthLogOut(ctx context.Context, req *TLAuthLogOut) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogOut not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthResetAuthorizations(ctx context.Context, req *TLAuthResetAuthorizations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResetAuthorizations not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthSendInvites(ctx context.Context, req *TLAuthSendInvites) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendInvites not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthExportAuthorization(ctx context.Context, req *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportAuthorization not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthImportAuthorization(ctx context.Context, req *TLAuthImportAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportAuthorization not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthBindTempAuthKey(ctx context.Context, req *TLAuthBindTempAuthKey) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthBindTempAuthKey not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthImportBotAuthorization(ctx context.Context, req *TLAuthImportBotAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportBotAuthorization not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthCheckPassword(ctx context.Context, req *TLAuthCheckPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPassword not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthRequestPasswordRecovery(ctx context.Context, req *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRequestPasswordRecovery not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthRecoverPassword(ctx context.Context, req *TLAuthRecoverPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRecoverPassword not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthResendCode(ctx context.Context, req *TLAuthResendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResendCode not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthCancelCode(ctx context.Context, req *TLAuthCancelCode) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCancelCode not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthDropTempAuthKeys(ctx context.Context, req *TLAuthDropTempAuthKeys) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthDropTempAuthKeys not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthExportLoginToken(ctx context.Context, req *TLAuthExportLoginToken) (*Auth_LoginToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportLoginToken not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthImportLoginToken(ctx context.Context, req *TLAuthImportLoginToken) (*Auth_LoginToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportLoginToken not implemented")
}
func (*UnimplementedRPCAuthServiceServer) AuthAcceptLoginToken(ctx context.Context, req *TLAuthAcceptLoginToken) (*Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthAcceptLoginToken not implemented")
}

func RegisterRPCAuthServiceServer(s *grpc.Server, srv RPCAuthServiceServer) {
	s.RegisterService(&_RPCAuthService_serviceDesc, srv)
}

func _RPCAuthService_AuthCheckPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthCheckPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthCheckPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthCheckPhone(ctx, req.(*TLAuthCheckPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthSendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthSendCode(ctx, req.(*TLAuthSendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthSignUp(ctx, req.(*TLAuthSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthSignIn(ctx, req.(*TLAuthSignIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthLogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthLogOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthLogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthLogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthLogOut(ctx, req.(*TLAuthLogOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthResetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthResetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthResetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthResetAuthorizations(ctx, req.(*TLAuthResetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthSendInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthSendInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthSendInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthSendInvites(ctx, req.(*TLAuthSendInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthExportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthExportAuthorization(ctx, req.(*TLAuthExportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthImportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthImportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthImportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthImportAuthorization(ctx, req.(*TLAuthImportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthBindTempAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthBindTempAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthBindTempAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthBindTempAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthBindTempAuthKey(ctx, req.(*TLAuthBindTempAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthImportBotAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportBotAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthImportBotAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthImportBotAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthImportBotAuthorization(ctx, req.(*TLAuthImportBotAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthCheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthCheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthCheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthCheckPassword(ctx, req.(*TLAuthCheckPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthRequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRequestPasswordRecovery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthRequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthRequestPasswordRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthRequestPasswordRecovery(ctx, req.(*TLAuthRequestPasswordRecovery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthRecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRecoverPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthRecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthRecoverPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthRecoverPassword(ctx, req.(*TLAuthRecoverPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthResendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthResendCode(ctx, req.(*TLAuthResendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthCancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCancelCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthCancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthCancelCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthCancelCode(ctx, req.(*TLAuthCancelCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthDropTempAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthDropTempAuthKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthDropTempAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthDropTempAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthDropTempAuthKeys(ctx, req.(*TLAuthDropTempAuthKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthExportLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthExportLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthExportLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthExportLoginToken(ctx, req.(*TLAuthExportLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthImportLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthImportLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthImportLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthImportLoginToken(ctx, req.(*TLAuthImportLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuthService_AuthAcceptLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthAcceptLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServiceServer).AuthAcceptLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuthService/AuthAcceptLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServiceServer).AuthAcceptLoginToken(ctx, req.(*TLAuthAcceptLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCAuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAuthService",
	HandlerType: (*RPCAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth_checkPhone",
			Handler:    _RPCAuthService_AuthCheckPhone_Handler,
		},
		{
			MethodName: "auth_sendCode",
			Handler:    _RPCAuthService_AuthSendCode_Handler,
		},
		{
			MethodName: "auth_signUp",
			Handler:    _RPCAuthService_AuthSignUp_Handler,
		},
		{
			MethodName: "auth_signIn",
			Handler:    _RPCAuthService_AuthSignIn_Handler,
		},
		{
			MethodName: "auth_logOut",
			Handler:    _RPCAuthService_AuthLogOut_Handler,
		},
		{
			MethodName: "auth_resetAuthorizations",
			Handler:    _RPCAuthService_AuthResetAuthorizations_Handler,
		},
		{
			MethodName: "auth_sendInvites",
			Handler:    _RPCAuthService_AuthSendInvites_Handler,
		},
		{
			MethodName: "auth_exportAuthorization",
			Handler:    _RPCAuthService_AuthExportAuthorization_Handler,
		},
		{
			MethodName: "auth_importAuthorization",
			Handler:    _RPCAuthService_AuthImportAuthorization_Handler,
		},
		{
			MethodName: "auth_bindTempAuthKey",
			Handler:    _RPCAuthService_AuthBindTempAuthKey_Handler,
		},
		{
			MethodName: "auth_importBotAuthorization",
			Handler:    _RPCAuthService_AuthImportBotAuthorization_Handler,
		},
		{
			MethodName: "auth_checkPassword",
			Handler:    _RPCAuthService_AuthCheckPassword_Handler,
		},
		{
			MethodName: "auth_requestPasswordRecovery",
			Handler:    _RPCAuthService_AuthRequestPasswordRecovery_Handler,
		},
		{
			MethodName: "auth_recoverPassword",
			Handler:    _RPCAuthService_AuthRecoverPassword_Handler,
		},
		{
			MethodName: "auth_resendCode",
			Handler:    _RPCAuthService_AuthResendCode_Handler,
		},
		{
			MethodName: "auth_cancelCode",
			Handler:    _RPCAuthService_AuthCancelCode_Handler,
		},
		{
			MethodName: "auth_dropTempAuthKeys",
			Handler:    _RPCAuthService_AuthDropTempAuthKeys_Handler,
		},
		{
			MethodName: "auth_exportLoginToken",
			Handler:    _RPCAuthService_AuthExportLoginToken_Handler,
		},
		{
			MethodName: "auth_importLoginToken",
			Handler:    _RPCAuthService_AuthImportLoginToken_Handler,
		},
		{
			MethodName: "auth_acceptLoginToken",
			Handler:    _RPCAuthService_AuthAcceptLoginToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCAuthService_serviceDesc = map[string][]interface{}{
	"TLAuthCheckPhone": {
		"/mtproto.RPCAuthService/auth_checkPhone",
		func() interface{} { return new(Auth_CheckedPhone) },
		"AuthCheckPhone",
	},
	"TLAuthSendCode": {
		"/mtproto.RPCAuthService/auth_sendCode",
		func() interface{} { return new(Auth_SentCode) },
		"AuthSendCode",
	},
	"TLAuthSignUp": {
		"/mtproto.RPCAuthService/auth_signUp",
		func() interface{} { return new(Auth_Authorization) },
		"AuthSignUp",
	},
	"TLAuthSignIn": {
		"/mtproto.RPCAuthService/auth_signIn",
		func() interface{} { return new(Auth_Authorization) },
		"AuthSignIn",
	},
	"TLAuthLogOut": {
		"/mtproto.RPCAuthService/auth_logOut",
		func() interface{} { return new(Bool) },
		"AuthLogOut",
	},
	"TLAuthResetAuthorizations": {
		"/mtproto.RPCAuthService/auth_resetAuthorizations",
		func() interface{} { return new(Bool) },
		"AuthResetAuthorizations",
	},
	"TLAuthSendInvites": {
		"/mtproto.RPCAuthService/auth_sendInvites",
		func() interface{} { return new(Bool) },
		"AuthSendInvites",
	},
	"TLAuthExportAuthorization": {
		"/mtproto.RPCAuthService/auth_exportAuthorization",
		func() interface{} { return new(Auth_ExportedAuthorization) },
		"AuthExportAuthorization",
	},
	"TLAuthImportAuthorization": {
		"/mtproto.RPCAuthService/auth_importAuthorization",
		func() interface{} { return new(Auth_Authorization) },
		"AuthImportAuthorization",
	},
	"TLAuthBindTempAuthKey": {
		"/mtproto.RPCAuthService/auth_bindTempAuthKey",
		func() interface{} { return new(Bool) },
		"AuthBindTempAuthKey",
	},
	"TLAuthImportBotAuthorization": {
		"/mtproto.RPCAuthService/auth_importBotAuthorization",
		func() interface{} { return new(Auth_Authorization) },
		"AuthImportBotAuthorization",
	},
	"TLAuthCheckPassword": {
		"/mtproto.RPCAuthService/auth_checkPassword",
		func() interface{} { return new(Auth_Authorization) },
		"AuthCheckPassword",
	},
	"TLAuthRequestPasswordRecovery": {
		"/mtproto.RPCAuthService/auth_requestPasswordRecovery",
		func() interface{} { return new(Auth_PasswordRecovery) },
		"AuthRequestPasswordRecovery",
	},
	"TLAuthRecoverPassword": {
		"/mtproto.RPCAuthService/auth_recoverPassword",
		func() interface{} { return new(Auth_Authorization) },
		"AuthRecoverPassword",
	},
	"TLAuthResendCode": {
		"/mtproto.RPCAuthService/auth_resendCode",
		func() interface{} { return new(Auth_SentCode) },
		"AuthResendCode",
	},
	"TLAuthCancelCode": {
		"/mtproto.RPCAuthService/auth_cancelCode",
		func() interface{} { return new(Bool) },
		"AuthCancelCode",
	},
	"TLAuthDropTempAuthKeys": {
		"/mtproto.RPCAuthService/auth_dropTempAuthKeys",
		func() interface{} { return new(Bool) },
		"AuthDropTempAuthKeys",
	},
	"TLAuthExportLoginToken": {
		"/mtproto.RPCAuthService/auth_exportLoginToken",
		func() interface{} { return new(Auth_LoginToken) },
		"AuthExportLoginToken",
	},
	"TLAuthImportLoginToken": {
		"/mtproto.RPCAuthService/auth_importLoginToken",
		func() interface{} { return new(Auth_LoginToken) },
		"AuthImportLoginToken",
	},
	"TLAuthAcceptLoginToken": {
		"/mtproto.RPCAuthService/auth_acceptLoginToken",
		func() interface{} { return new(Authorization) },
		"AuthAcceptLoginToken",
	},
}

// RPCBotsServiceClient is the client API for RPCBotsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCBotsServiceClient interface {
	//  bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	//
	BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error)
	//  bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	//
	BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error)
	//  bots.setBotCommands#805d46f6 commands:Vector<BotCommand> = Bool;
	//
	BotsSetBotCommands(ctx context.Context, in *TLBotsSetBotCommands, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBotsServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCBotsServiceClient(cc *grpc.ClientConn) RPCBotsServiceClient {
	return &rPCBotsServiceClient{cc}
}

func (c *rPCBotsServiceClient) BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCBotsService/bots_sendCustomRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsServiceClient) BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCBotsService/bots_answerWebhookJSONQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsServiceClient) BotsSetBotCommands(ctx context.Context, in *TLBotsSetBotCommands, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCBotsService/bots_setBotCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBotsServiceServer is the server API for RPCBotsService service.
type RPCBotsServiceServer interface {
	//  bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	//
	BotsSendCustomRequest(context.Context, *TLBotsSendCustomRequest) (*DataJSON, error)
	//  bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	//
	BotsAnswerWebhookJSONQuery(context.Context, *TLBotsAnswerWebhookJSONQuery) (*Bool, error)
	//  bots.setBotCommands#805d46f6 commands:Vector<BotCommand> = Bool;
	//
	BotsSetBotCommands(context.Context, *TLBotsSetBotCommands) (*Bool, error)
}

// UnimplementedRPCBotsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCBotsServiceServer struct {
}

func (*UnimplementedRPCBotsServiceServer) BotsSendCustomRequest(ctx context.Context, req *TLBotsSendCustomRequest) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSendCustomRequest not implemented")
}
func (*UnimplementedRPCBotsServiceServer) BotsAnswerWebhookJSONQuery(ctx context.Context, req *TLBotsAnswerWebhookJSONQuery) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsAnswerWebhookJSONQuery not implemented")
}
func (*UnimplementedRPCBotsServiceServer) BotsSetBotCommands(ctx context.Context, req *TLBotsSetBotCommands) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetBotCommands not implemented")
}

func RegisterRPCBotsServiceServer(s *grpc.Server, srv RPCBotsServiceServer) {
	s.RegisterService(&_RPCBotsService_serviceDesc, srv)
}

func _RPCBotsService_BotsSendCustomRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSendCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServiceServer).BotsSendCustomRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCBotsService/BotsSendCustomRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServiceServer).BotsSendCustomRequest(ctx, req.(*TLBotsSendCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBotsService_BotsAnswerWebhookJSONQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsAnswerWebhookJSONQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServiceServer).BotsAnswerWebhookJSONQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCBotsService/BotsAnswerWebhookJSONQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServiceServer).BotsAnswerWebhookJSONQuery(ctx, req.(*TLBotsAnswerWebhookJSONQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBotsService_BotsSetBotCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetBotCommands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServiceServer).BotsSetBotCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCBotsService/BotsSetBotCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServiceServer).BotsSetBotCommands(ctx, req.(*TLBotsSetBotCommands))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCBotsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBotsService",
	HandlerType: (*RPCBotsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_sendCustomRequest",
			Handler:    _RPCBotsService_BotsSendCustomRequest_Handler,
		},
		{
			MethodName: "bots_answerWebhookJSONQuery",
			Handler:    _RPCBotsService_BotsAnswerWebhookJSONQuery_Handler,
		},
		{
			MethodName: "bots_setBotCommands",
			Handler:    _RPCBotsService_BotsSetBotCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCBotsService_serviceDesc = map[string][]interface{}{
	"TLBotsSendCustomRequest": {
		"/mtproto.RPCBotsService/bots_sendCustomRequest",
		func() interface{} { return new(DataJSON) },
		"BotsSendCustomRequest",
	},
	"TLBotsAnswerWebhookJSONQuery": {
		"/mtproto.RPCBotsService/bots_answerWebhookJSONQuery",
		func() interface{} { return new(Bool) },
		"BotsAnswerWebhookJSONQuery",
	},
	"TLBotsSetBotCommands": {
		"/mtproto.RPCBotsService/bots_setBotCommands",
		func() interface{} { return new(Bool) },
		"BotsSetBotCommands",
	},
}

// RPCChannelsServiceClient is the client API for RPCChannelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCChannelsServiceClient interface {
	//  channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	//
	ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error)
	//  channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	//
	ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	//  channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	//
	ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	//  channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	//
	ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error)
	//  channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	//  channels.getMessages#ad8c9a23 channel:InputChannel id:Vector<InputMessage> = messages.Messages;
	//
	ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	//  channels.getParticipants#123e05e9 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int hash:int = channels.ChannelParticipants;
	//
	ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error)
	//  channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	//
	ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error)
	//  channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	//
	ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	//
	ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	//  channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	//  channels.createChannel#3d5fb10f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string geo_point:flags.2?InputGeoPoint address:flags.2?string = Updates;
	//
	ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error)
	//  channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	//
	ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error)
	//  channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	//  channels.editAdmin#eb7611d0 channel:InputChannel user_id:InputUser role:ChannelParticipantRole = Updates;
	//  channels.editAdmin#70f893ba channel:InputChannel user_id:InputUser admin_rights:ChatAdminRights = Updates;
	//  channels.editAdmin#d33c8902 channel:InputChannel user_id:InputUser admin_rights:ChatAdminRights rank:string = Updates;
	//
	ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error)
	//  channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	//
	ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error)
	//  channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	//
	ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error)
	//  channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	//
	ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	//  channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	//
	ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error)
	//  channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	//
	ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error)
	//  channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	//
	ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error)
	//  channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	//
	ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error)
	//  channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	//
	ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	//  channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	//
	ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error)
	//  channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error)
	//  channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	//  channels.exportMessageLink#ceb77163 channel:InputChannel id:int grouped:Bool = ExportedMessageLink;
	//  channels.exportMessageLink#e63fadeb flags:# grouped:flags.0?true thread:flags.1?true channel:InputChannel id:int = ExportedMessageLink;
	//
	ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error)
	//  channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error)
	//  channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	//
	ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error)
	//  channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	//  channels.getAdminedPublicChannels#f8b036af flags:# by_location:flags.0?true check_limit:flags.1?true = messages.Chats;
	//
	ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	//  channels.editBanned#72796912 channel:InputChannel user_id:InputUser banned_rights:ChatBannedRights = Updates;
	//
	ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error)
	//  channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	//
	ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error)
	//  channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	//
	ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error)
	//  channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	//
	ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error)
	//  channels.getDialogs#a9d3d249 offset:int limit:int = messages.Dialogs;
	//
	ChannelsGetDialogs(ctx context.Context, in *TLChannelsGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	//  channels.getImportantHistory#8f494bb2 channel:InputChannel offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//
	ChannelsGetImportantHistory(ctx context.Context, in *TLChannelsGetImportantHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  channels.toggleComments#aaa29e88 channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsToggleComments(ctx context.Context, in *TLChannelsToggleComments, opts ...grpc.CallOption) (*Updates, error)
	//  channels.kickFromChannel#a672de14 channel:InputChannel user_id:InputUser kicked:Bool = Updates;
	//
	ChannelsKickFromChannel(ctx context.Context, in *TLChannelsKickFromChannel, opts ...grpc.CallOption) (*Updates, error)
	//  channels.deleteHistory#af369d42 channel:InputChannel max_id:int = Bool;
	//
	ChannelsDeleteHistory(ctx context.Context, in *TLChannelsDeleteHistory, opts ...grpc.CallOption) (*Bool, error)
	//  channels.togglePreHistoryHidden#eabbb94c channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsTogglePreHistoryHidden(ctx context.Context, in *TLChannelsTogglePreHistoryHidden, opts ...grpc.CallOption) (*Updates, error)
	//  channels.getLeftChannels#8341ecc0 offset:int = messages.Chats;
	//
	ChannelsGetLeftChannels(ctx context.Context, in *TLChannelsGetLeftChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  channels.getGroupsForDiscussion#f5dad378 = messages.Chats;
	//
	ChannelsGetGroupsForDiscussion(ctx context.Context, in *TLChannelsGetGroupsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  channels.getBroadcastsForDiscussion#1a87f304 = messages.Chats;
	//
	ChannelsGetBroadcastsForDiscussion(ctx context.Context, in *TLChannelsGetBroadcastsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  channels.setDiscussionGroup#40582bb2 broadcast:InputChannel group:InputChannel = Bool;
	//
	ChannelsSetDiscussionGroup(ctx context.Context, in *TLChannelsSetDiscussionGroup, opts ...grpc.CallOption) (*Bool, error)
	//  channels.editCreator#8f38cd1f channel:InputChannel user_id:InputUser password:InputCheckPasswordSRP = Updates;
	//
	ChannelsEditCreator(ctx context.Context, in *TLChannelsEditCreator, opts ...grpc.CallOption) (*Updates, error)
	//  channels.editLocation#58e63f6d channel:InputChannel geo_point:InputGeoPoint address:string = Bool;
	//
	ChannelsEditLocation(ctx context.Context, in *TLChannelsEditLocation, opts ...grpc.CallOption) (*Bool, error)
	//  channels.toggleSlowMode#edd49ef0 channel:InputChannel seconds:int = Updates;
	//
	ChannelsToggleSlowMode(ctx context.Context, in *TLChannelsToggleSlowMode, opts ...grpc.CallOption) (*Updates, error)
	//  channels.getInactiveChannels#11e831ee = messages.InactiveChats;
	//
	ChannelsGetInactiveChannels(ctx context.Context, in *TLChannelsGetInactiveChannels, opts ...grpc.CallOption) (*Messages_InactiveChats, error)
}

type rPCChannelsServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCChannelsServiceClient(cc *grpc.ClientConn) RPCChannelsServiceClient {
	return &rPCChannelsServiceClient{cc}
}

func (c *rPCChannelsServiceClient) ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_readHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_deleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_deleteUserHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_reportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error) {
	out := new(Channels_ChannelParticipants)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error) {
	out := new(Channels_ChannelParticipant)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_createChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_editAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_editAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_editTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_editPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_checkUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_updateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_joinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_leaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_inviteToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_exportInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_deleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_toggleInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error) {
	out := new(ExportedMessageLink)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_exportMessageLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_toggleSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_updatePinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getAdminedPublicChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_editBanned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error) {
	out := new(Channels_AdminLogResults)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getAdminLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_setStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_readMessageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetDialogs(ctx context.Context, in *TLChannelsGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	out := new(Messages_Dialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetImportantHistory(ctx context.Context, in *TLChannelsGetImportantHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getImportantHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsToggleComments(ctx context.Context, in *TLChannelsToggleComments, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_toggleComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsKickFromChannel(ctx context.Context, in *TLChannelsKickFromChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_kickFromChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsDeleteHistory(ctx context.Context, in *TLChannelsDeleteHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_deleteHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsTogglePreHistoryHidden(ctx context.Context, in *TLChannelsTogglePreHistoryHidden, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_togglePreHistoryHidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetLeftChannels(ctx context.Context, in *TLChannelsGetLeftChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getLeftChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetGroupsForDiscussion(ctx context.Context, in *TLChannelsGetGroupsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getGroupsForDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetBroadcastsForDiscussion(ctx context.Context, in *TLChannelsGetBroadcastsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getBroadcastsForDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsSetDiscussionGroup(ctx context.Context, in *TLChannelsSetDiscussionGroup, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_setDiscussionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsEditCreator(ctx context.Context, in *TLChannelsEditCreator, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_editCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsEditLocation(ctx context.Context, in *TLChannelsEditLocation, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_editLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsToggleSlowMode(ctx context.Context, in *TLChannelsToggleSlowMode, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_toggleSlowMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsServiceClient) ChannelsGetInactiveChannels(ctx context.Context, in *TLChannelsGetInactiveChannels, opts ...grpc.CallOption) (*Messages_InactiveChats, error) {
	out := new(Messages_InactiveChats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannelsService/channels_getInactiveChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChannelsServiceServer is the server API for RPCChannelsService service.
type RPCChannelsServiceServer interface {
	//  channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	//
	ChannelsReadHistory(context.Context, *TLChannelsReadHistory) (*Bool, error)
	//  channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	//
	ChannelsDeleteMessages(context.Context, *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error)
	//  channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	//
	ChannelsDeleteUserHistory(context.Context, *TLChannelsDeleteUserHistory) (*Messages_AffectedHistory, error)
	//  channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	//
	ChannelsReportSpam(context.Context, *TLChannelsReportSpam) (*Bool, error)
	//  channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	//  channels.getMessages#ad8c9a23 channel:InputChannel id:Vector<InputMessage> = messages.Messages;
	//
	ChannelsGetMessages(context.Context, *TLChannelsGetMessages) (*Messages_Messages, error)
	//  channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	//  channels.getParticipants#123e05e9 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int hash:int = channels.ChannelParticipants;
	//
	ChannelsGetParticipants(context.Context, *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error)
	//  channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	//
	ChannelsGetParticipant(context.Context, *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error)
	//  channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	//
	ChannelsGetChannels(context.Context, *TLChannelsGetChannels) (*Messages_Chats, error)
	//  channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	//
	ChannelsGetFullChannel(context.Context, *TLChannelsGetFullChannel) (*Messages_ChatFull, error)
	//  channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	//  channels.createChannel#3d5fb10f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string geo_point:flags.2?InputGeoPoint address:flags.2?string = Updates;
	//
	ChannelsCreateChannel(context.Context, *TLChannelsCreateChannel) (*Updates, error)
	//  channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	//
	ChannelsEditAbout(context.Context, *TLChannelsEditAbout) (*Bool, error)
	//  channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	//  channels.editAdmin#eb7611d0 channel:InputChannel user_id:InputUser role:ChannelParticipantRole = Updates;
	//  channels.editAdmin#70f893ba channel:InputChannel user_id:InputUser admin_rights:ChatAdminRights = Updates;
	//  channels.editAdmin#d33c8902 channel:InputChannel user_id:InputUser admin_rights:ChatAdminRights rank:string = Updates;
	//
	ChannelsEditAdmin(context.Context, *TLChannelsEditAdmin) (*Updates, error)
	//  channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	//
	ChannelsEditTitle(context.Context, *TLChannelsEditTitle) (*Updates, error)
	//  channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	//
	ChannelsEditPhoto(context.Context, *TLChannelsEditPhoto) (*Updates, error)
	//  channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	//
	ChannelsCheckUsername(context.Context, *TLChannelsCheckUsername) (*Bool, error)
	//  channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	//
	ChannelsUpdateUsername(context.Context, *TLChannelsUpdateUsername) (*Bool, error)
	//  channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	//
	ChannelsJoinChannel(context.Context, *TLChannelsJoinChannel) (*Updates, error)
	//  channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	//
	ChannelsLeaveChannel(context.Context, *TLChannelsLeaveChannel) (*Updates, error)
	//  channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	//
	ChannelsInviteToChannel(context.Context, *TLChannelsInviteToChannel) (*Updates, error)
	//  channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	//
	ChannelsExportInvite(context.Context, *TLChannelsExportInvite) (*ExportedChatInvite, error)
	//  channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	//
	ChannelsDeleteChannel(context.Context, *TLChannelsDeleteChannel) (*Updates, error)
	//  channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsToggleInvites(context.Context, *TLChannelsToggleInvites) (*Updates, error)
	//  channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	//  channels.exportMessageLink#ceb77163 channel:InputChannel id:int grouped:Bool = ExportedMessageLink;
	//  channels.exportMessageLink#e63fadeb flags:# grouped:flags.0?true thread:flags.1?true channel:InputChannel id:int = ExportedMessageLink;
	//
	ChannelsExportMessageLink(context.Context, *TLChannelsExportMessageLink) (*ExportedMessageLink, error)
	//  channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsToggleSignatures(context.Context, *TLChannelsToggleSignatures) (*Updates, error)
	//  channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	//
	ChannelsUpdatePinnedMessage(context.Context, *TLChannelsUpdatePinnedMessage) (*Updates, error)
	//  channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	//  channels.getAdminedPublicChannels#f8b036af flags:# by_location:flags.0?true check_limit:flags.1?true = messages.Chats;
	//
	ChannelsGetAdminedPublicChannels(context.Context, *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error)
	//  channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	//  channels.editBanned#72796912 channel:InputChannel user_id:InputUser banned_rights:ChatBannedRights = Updates;
	//
	ChannelsEditBanned(context.Context, *TLChannelsEditBanned) (*Updates, error)
	//  channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	//
	ChannelsGetAdminLog(context.Context, *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error)
	//  channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	//
	ChannelsSetStickers(context.Context, *TLChannelsSetStickers) (*Bool, error)
	//  channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	//
	ChannelsReadMessageContents(context.Context, *TLChannelsReadMessageContents) (*Bool, error)
	//  channels.getDialogs#a9d3d249 offset:int limit:int = messages.Dialogs;
	//
	ChannelsGetDialogs(context.Context, *TLChannelsGetDialogs) (*Messages_Dialogs, error)
	//  channels.getImportantHistory#8f494bb2 channel:InputChannel offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//
	ChannelsGetImportantHistory(context.Context, *TLChannelsGetImportantHistory) (*Messages_Messages, error)
	//  channels.toggleComments#aaa29e88 channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsToggleComments(context.Context, *TLChannelsToggleComments) (*Updates, error)
	//  channels.kickFromChannel#a672de14 channel:InputChannel user_id:InputUser kicked:Bool = Updates;
	//
	ChannelsKickFromChannel(context.Context, *TLChannelsKickFromChannel) (*Updates, error)
	//  channels.deleteHistory#af369d42 channel:InputChannel max_id:int = Bool;
	//
	ChannelsDeleteHistory(context.Context, *TLChannelsDeleteHistory) (*Bool, error)
	//  channels.togglePreHistoryHidden#eabbb94c channel:InputChannel enabled:Bool = Updates;
	//
	ChannelsTogglePreHistoryHidden(context.Context, *TLChannelsTogglePreHistoryHidden) (*Updates, error)
	//  channels.getLeftChannels#8341ecc0 offset:int = messages.Chats;
	//
	ChannelsGetLeftChannels(context.Context, *TLChannelsGetLeftChannels) (*Messages_Chats, error)
	//  channels.getGroupsForDiscussion#f5dad378 = messages.Chats;
	//
	ChannelsGetGroupsForDiscussion(context.Context, *TLChannelsGetGroupsForDiscussion) (*Messages_Chats, error)
	//  channels.getBroadcastsForDiscussion#1a87f304 = messages.Chats;
	//
	ChannelsGetBroadcastsForDiscussion(context.Context, *TLChannelsGetBroadcastsForDiscussion) (*Messages_Chats, error)
	//  channels.setDiscussionGroup#40582bb2 broadcast:InputChannel group:InputChannel = Bool;
	//
	ChannelsSetDiscussionGroup(context.Context, *TLChannelsSetDiscussionGroup) (*Bool, error)
	//  channels.editCreator#8f38cd1f channel:InputChannel user_id:InputUser password:InputCheckPasswordSRP = Updates;
	//
	ChannelsEditCreator(context.Context, *TLChannelsEditCreator) (*Updates, error)
	//  channels.editLocation#58e63f6d channel:InputChannel geo_point:InputGeoPoint address:string = Bool;
	//
	ChannelsEditLocation(context.Context, *TLChannelsEditLocation) (*Bool, error)
	//  channels.toggleSlowMode#edd49ef0 channel:InputChannel seconds:int = Updates;
	//
	ChannelsToggleSlowMode(context.Context, *TLChannelsToggleSlowMode) (*Updates, error)
	//  channels.getInactiveChannels#11e831ee = messages.InactiveChats;
	//
	ChannelsGetInactiveChannels(context.Context, *TLChannelsGetInactiveChannels) (*Messages_InactiveChats, error)
}

// UnimplementedRPCChannelsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCChannelsServiceServer struct {
}

func (*UnimplementedRPCChannelsServiceServer) ChannelsReadHistory(ctx context.Context, req *TLChannelsReadHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadHistory not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsDeleteMessages(ctx context.Context, req *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteMessages not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsDeleteUserHistory(ctx context.Context, req *TLChannelsDeleteUserHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteUserHistory not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsReportSpam(ctx context.Context, req *TLChannelsReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReportSpam not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetMessages(ctx context.Context, req *TLChannelsGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetMessages not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetParticipants(ctx context.Context, req *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipants not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetParticipant(ctx context.Context, req *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipant not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetChannels(ctx context.Context, req *TLChannelsGetChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetChannels not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetFullChannel(ctx context.Context, req *TLChannelsGetFullChannel) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetFullChannel not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsCreateChannel(ctx context.Context, req *TLChannelsCreateChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCreateChannel not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsEditAbout(ctx context.Context, req *TLChannelsEditAbout) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAbout not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsEditAdmin(ctx context.Context, req *TLChannelsEditAdmin) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAdmin not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsEditTitle(ctx context.Context, req *TLChannelsEditTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditTitle not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsEditPhoto(ctx context.Context, req *TLChannelsEditPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditPhoto not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsCheckUsername(ctx context.Context, req *TLChannelsCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCheckUsername not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsUpdateUsername(ctx context.Context, req *TLChannelsUpdateUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdateUsername not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsJoinChannel(ctx context.Context, req *TLChannelsJoinChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsJoinChannel not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsLeaveChannel(ctx context.Context, req *TLChannelsLeaveChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsLeaveChannel not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsInviteToChannel(ctx context.Context, req *TLChannelsInviteToChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsInviteToChannel not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsExportInvite(ctx context.Context, req *TLChannelsExportInvite) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportInvite not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsDeleteChannel(ctx context.Context, req *TLChannelsDeleteChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteChannel not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsToggleInvites(ctx context.Context, req *TLChannelsToggleInvites) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleInvites not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsExportMessageLink(ctx context.Context, req *TLChannelsExportMessageLink) (*ExportedMessageLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportMessageLink not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsToggleSignatures(ctx context.Context, req *TLChannelsToggleSignatures) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleSignatures not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsUpdatePinnedMessage(ctx context.Context, req *TLChannelsUpdatePinnedMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdatePinnedMessage not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetAdminedPublicChannels(ctx context.Context, req *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminedPublicChannels not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsEditBanned(ctx context.Context, req *TLChannelsEditBanned) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditBanned not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetAdminLog(ctx context.Context, req *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminLog not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsSetStickers(ctx context.Context, req *TLChannelsSetStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetStickers not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsReadMessageContents(ctx context.Context, req *TLChannelsReadMessageContents) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadMessageContents not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetDialogs(ctx context.Context, req *TLChannelsGetDialogs) (*Messages_Dialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetDialogs not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetImportantHistory(ctx context.Context, req *TLChannelsGetImportantHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetImportantHistory not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsToggleComments(ctx context.Context, req *TLChannelsToggleComments) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleComments not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsKickFromChannel(ctx context.Context, req *TLChannelsKickFromChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsKickFromChannel not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsDeleteHistory(ctx context.Context, req *TLChannelsDeleteHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteHistory not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsTogglePreHistoryHidden(ctx context.Context, req *TLChannelsTogglePreHistoryHidden) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsTogglePreHistoryHidden not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetLeftChannels(ctx context.Context, req *TLChannelsGetLeftChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetLeftChannels not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetGroupsForDiscussion(ctx context.Context, req *TLChannelsGetGroupsForDiscussion) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetGroupsForDiscussion not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetBroadcastsForDiscussion(ctx context.Context, req *TLChannelsGetBroadcastsForDiscussion) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetBroadcastsForDiscussion not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsSetDiscussionGroup(ctx context.Context, req *TLChannelsSetDiscussionGroup) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetDiscussionGroup not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsEditCreator(ctx context.Context, req *TLChannelsEditCreator) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditCreator not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsEditLocation(ctx context.Context, req *TLChannelsEditLocation) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditLocation not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsToggleSlowMode(ctx context.Context, req *TLChannelsToggleSlowMode) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleSlowMode not implemented")
}
func (*UnimplementedRPCChannelsServiceServer) ChannelsGetInactiveChannels(ctx context.Context, req *TLChannelsGetInactiveChannels) (*Messages_InactiveChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetInactiveChannels not implemented")
}

func RegisterRPCChannelsServiceServer(s *grpc.Server, srv RPCChannelsServiceServer) {
	s.RegisterService(&_RPCChannelsService_serviceDesc, srv)
}

func _RPCChannelsService_ChannelsReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsReadHistory(ctx, req.(*TLChannelsReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteMessages(ctx, req.(*TLChannelsDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsDeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsDeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteUserHistory(ctx, req.(*TLChannelsDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsReportSpam(ctx, req.(*TLChannelsReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetMessages(ctx, req.(*TLChannelsGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetParticipants(ctx, req.(*TLChannelsGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetParticipant(ctx, req.(*TLChannelsGetParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetChannels(ctx, req.(*TLChannelsGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetFullChannel(ctx, req.(*TLChannelsGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsCreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsCreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsCreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsCreateChannel(ctx, req.(*TLChannelsCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsEditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsEditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsEditAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsEditAbout(ctx, req.(*TLChannelsEditAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsEditAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsEditAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsEditAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsEditAdmin(ctx, req.(*TLChannelsEditAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsEditTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsEditTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsEditTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsEditTitle(ctx, req.(*TLChannelsEditTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsEditPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsEditPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsEditPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsEditPhoto(ctx, req.(*TLChannelsEditPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsCheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsCheckUsername(ctx, req.(*TLChannelsCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsUpdateUsername(ctx, req.(*TLChannelsUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsJoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsJoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsJoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsJoinChannel(ctx, req.(*TLChannelsJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsLeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsLeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsLeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsLeaveChannel(ctx, req.(*TLChannelsLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsInviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsInviteToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsInviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsInviteToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsInviteToChannel(ctx, req.(*TLChannelsInviteToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsExportInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsExportInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsExportInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsExportInvite(ctx, req.(*TLChannelsExportInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsDeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsDeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteChannel(ctx, req.(*TLChannelsDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsToggleInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsToggleInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsToggleInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsToggleInvites(ctx, req.(*TLChannelsToggleInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsExportMessageLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportMessageLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsExportMessageLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsExportMessageLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsExportMessageLink(ctx, req.(*TLChannelsExportMessageLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSignatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsToggleSignatures(ctx, req.(*TLChannelsToggleSignatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsUpdatePinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsUpdatePinnedMessage(ctx, req.(*TLChannelsUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetAdminedPublicChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminedPublicChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetAdminedPublicChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetAdminedPublicChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetAdminedPublicChannels(ctx, req.(*TLChannelsGetAdminedPublicChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsEditBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditBanned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsEditBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsEditBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsEditBanned(ctx, req.(*TLChannelsEditBanned))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetAdminLog(ctx, req.(*TLChannelsGetAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsSetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsSetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsSetStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsSetStickers(ctx, req.(*TLChannelsSetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsReadMessageContents(ctx, req.(*TLChannelsReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetDialogs(ctx, req.(*TLChannelsGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetImportantHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetImportantHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetImportantHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetImportantHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetImportantHistory(ctx, req.(*TLChannelsGetImportantHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsToggleComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleComments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsToggleComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsToggleComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsToggleComments(ctx, req.(*TLChannelsToggleComments))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsKickFromChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsKickFromChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsKickFromChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsKickFromChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsKickFromChannel(ctx, req.(*TLChannelsKickFromChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsDeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsDeleteHistory(ctx, req.(*TLChannelsDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsTogglePreHistoryHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsTogglePreHistoryHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsTogglePreHistoryHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsTogglePreHistoryHidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsTogglePreHistoryHidden(ctx, req.(*TLChannelsTogglePreHistoryHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetLeftChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetLeftChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetLeftChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetLeftChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetLeftChannels(ctx, req.(*TLChannelsGetLeftChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetGroupsForDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetGroupsForDiscussion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetGroupsForDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetGroupsForDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetGroupsForDiscussion(ctx, req.(*TLChannelsGetGroupsForDiscussion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetBroadcastsForDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetBroadcastsForDiscussion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetBroadcastsForDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetBroadcastsForDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetBroadcastsForDiscussion(ctx, req.(*TLChannelsGetBroadcastsForDiscussion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsSetDiscussionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetDiscussionGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsSetDiscussionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsSetDiscussionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsSetDiscussionGroup(ctx, req.(*TLChannelsSetDiscussionGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsEditCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditCreator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsEditCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsEditCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsEditCreator(ctx, req.(*TLChannelsEditCreator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsEditLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsEditLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsEditLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsEditLocation(ctx, req.(*TLChannelsEditLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsToggleSlowMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSlowMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsToggleSlowMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsToggleSlowMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsToggleSlowMode(ctx, req.(*TLChannelsToggleSlowMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannelsService_ChannelsGetInactiveChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetInactiveChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServiceServer).ChannelsGetInactiveChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannelsService/ChannelsGetInactiveChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServiceServer).ChannelsGetInactiveChannels(ctx, req.(*TLChannelsGetInactiveChannels))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCChannelsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChannelsService",
	HandlerType: (*RPCChannelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_readHistory",
			Handler:    _RPCChannelsService_ChannelsReadHistory_Handler,
		},
		{
			MethodName: "channels_deleteMessages",
			Handler:    _RPCChannelsService_ChannelsDeleteMessages_Handler,
		},
		{
			MethodName: "channels_deleteUserHistory",
			Handler:    _RPCChannelsService_ChannelsDeleteUserHistory_Handler,
		},
		{
			MethodName: "channels_reportSpam",
			Handler:    _RPCChannelsService_ChannelsReportSpam_Handler,
		},
		{
			MethodName: "channels_getMessages",
			Handler:    _RPCChannelsService_ChannelsGetMessages_Handler,
		},
		{
			MethodName: "channels_getParticipants",
			Handler:    _RPCChannelsService_ChannelsGetParticipants_Handler,
		},
		{
			MethodName: "channels_getParticipant",
			Handler:    _RPCChannelsService_ChannelsGetParticipant_Handler,
		},
		{
			MethodName: "channels_getChannels",
			Handler:    _RPCChannelsService_ChannelsGetChannels_Handler,
		},
		{
			MethodName: "channels_getFullChannel",
			Handler:    _RPCChannelsService_ChannelsGetFullChannel_Handler,
		},
		{
			MethodName: "channels_createChannel",
			Handler:    _RPCChannelsService_ChannelsCreateChannel_Handler,
		},
		{
			MethodName: "channels_editAbout",
			Handler:    _RPCChannelsService_ChannelsEditAbout_Handler,
		},
		{
			MethodName: "channels_editAdmin",
			Handler:    _RPCChannelsService_ChannelsEditAdmin_Handler,
		},
		{
			MethodName: "channels_editTitle",
			Handler:    _RPCChannelsService_ChannelsEditTitle_Handler,
		},
		{
			MethodName: "channels_editPhoto",
			Handler:    _RPCChannelsService_ChannelsEditPhoto_Handler,
		},
		{
			MethodName: "channels_checkUsername",
			Handler:    _RPCChannelsService_ChannelsCheckUsername_Handler,
		},
		{
			MethodName: "channels_updateUsername",
			Handler:    _RPCChannelsService_ChannelsUpdateUsername_Handler,
		},
		{
			MethodName: "channels_joinChannel",
			Handler:    _RPCChannelsService_ChannelsJoinChannel_Handler,
		},
		{
			MethodName: "channels_leaveChannel",
			Handler:    _RPCChannelsService_ChannelsLeaveChannel_Handler,
		},
		{
			MethodName: "channels_inviteToChannel",
			Handler:    _RPCChannelsService_ChannelsInviteToChannel_Handler,
		},
		{
			MethodName: "channels_exportInvite",
			Handler:    _RPCChannelsService_ChannelsExportInvite_Handler,
		},
		{
			MethodName: "channels_deleteChannel",
			Handler:    _RPCChannelsService_ChannelsDeleteChannel_Handler,
		},
		{
			MethodName: "channels_toggleInvites",
			Handler:    _RPCChannelsService_ChannelsToggleInvites_Handler,
		},
		{
			MethodName: "channels_exportMessageLink",
			Handler:    _RPCChannelsService_ChannelsExportMessageLink_Handler,
		},
		{
			MethodName: "channels_toggleSignatures",
			Handler:    _RPCChannelsService_ChannelsToggleSignatures_Handler,
		},
		{
			MethodName: "channels_updatePinnedMessage",
			Handler:    _RPCChannelsService_ChannelsUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "channels_getAdminedPublicChannels",
			Handler:    _RPCChannelsService_ChannelsGetAdminedPublicChannels_Handler,
		},
		{
			MethodName: "channels_editBanned",
			Handler:    _RPCChannelsService_ChannelsEditBanned_Handler,
		},
		{
			MethodName: "channels_getAdminLog",
			Handler:    _RPCChannelsService_ChannelsGetAdminLog_Handler,
		},
		{
			MethodName: "channels_setStickers",
			Handler:    _RPCChannelsService_ChannelsSetStickers_Handler,
		},
		{
			MethodName: "channels_readMessageContents",
			Handler:    _RPCChannelsService_ChannelsReadMessageContents_Handler,
		},
		{
			MethodName: "channels_getDialogs",
			Handler:    _RPCChannelsService_ChannelsGetDialogs_Handler,
		},
		{
			MethodName: "channels_getImportantHistory",
			Handler:    _RPCChannelsService_ChannelsGetImportantHistory_Handler,
		},
		{
			MethodName: "channels_toggleComments",
			Handler:    _RPCChannelsService_ChannelsToggleComments_Handler,
		},
		{
			MethodName: "channels_kickFromChannel",
			Handler:    _RPCChannelsService_ChannelsKickFromChannel_Handler,
		},
		{
			MethodName: "channels_deleteHistory",
			Handler:    _RPCChannelsService_ChannelsDeleteHistory_Handler,
		},
		{
			MethodName: "channels_togglePreHistoryHidden",
			Handler:    _RPCChannelsService_ChannelsTogglePreHistoryHidden_Handler,
		},
		{
			MethodName: "channels_getLeftChannels",
			Handler:    _RPCChannelsService_ChannelsGetLeftChannels_Handler,
		},
		{
			MethodName: "channels_getGroupsForDiscussion",
			Handler:    _RPCChannelsService_ChannelsGetGroupsForDiscussion_Handler,
		},
		{
			MethodName: "channels_getBroadcastsForDiscussion",
			Handler:    _RPCChannelsService_ChannelsGetBroadcastsForDiscussion_Handler,
		},
		{
			MethodName: "channels_setDiscussionGroup",
			Handler:    _RPCChannelsService_ChannelsSetDiscussionGroup_Handler,
		},
		{
			MethodName: "channels_editCreator",
			Handler:    _RPCChannelsService_ChannelsEditCreator_Handler,
		},
		{
			MethodName: "channels_editLocation",
			Handler:    _RPCChannelsService_ChannelsEditLocation_Handler,
		},
		{
			MethodName: "channels_toggleSlowMode",
			Handler:    _RPCChannelsService_ChannelsToggleSlowMode_Handler,
		},
		{
			MethodName: "channels_getInactiveChannels",
			Handler:    _RPCChannelsService_ChannelsGetInactiveChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCChannelsService_serviceDesc = map[string][]interface{}{
	"TLChannelsReadHistory": {
		"/mtproto.RPCChannelsService/channels_readHistory",
		func() interface{} { return new(Bool) },
		"ChannelsReadHistory",
	},
	"TLChannelsDeleteMessages": {
		"/mtproto.RPCChannelsService/channels_deleteMessages",
		func() interface{} { return new(Messages_AffectedMessages) },
		"ChannelsDeleteMessages",
	},
	"TLChannelsDeleteUserHistory": {
		"/mtproto.RPCChannelsService/channels_deleteUserHistory",
		func() interface{} { return new(Messages_AffectedHistory) },
		"ChannelsDeleteUserHistory",
	},
	"TLChannelsReportSpam": {
		"/mtproto.RPCChannelsService/channels_reportSpam",
		func() interface{} { return new(Bool) },
		"ChannelsReportSpam",
	},
	"TLChannelsGetMessages": {
		"/mtproto.RPCChannelsService/channels_getMessages",
		func() interface{} { return new(Messages_Messages) },
		"ChannelsGetMessages",
	},
	"TLChannelsGetParticipants": {
		"/mtproto.RPCChannelsService/channels_getParticipants",
		func() interface{} { return new(Channels_ChannelParticipants) },
		"ChannelsGetParticipants",
	},
	"TLChannelsGetParticipant": {
		"/mtproto.RPCChannelsService/channels_getParticipant",
		func() interface{} { return new(Channels_ChannelParticipant) },
		"ChannelsGetParticipant",
	},
	"TLChannelsGetChannels": {
		"/mtproto.RPCChannelsService/channels_getChannels",
		func() interface{} { return new(Messages_Chats) },
		"ChannelsGetChannels",
	},
	"TLChannelsGetFullChannel": {
		"/mtproto.RPCChannelsService/channels_getFullChannel",
		func() interface{} { return new(Messages_ChatFull) },
		"ChannelsGetFullChannel",
	},
	"TLChannelsCreateChannel": {
		"/mtproto.RPCChannelsService/channels_createChannel",
		func() interface{} { return new(Updates) },
		"ChannelsCreateChannel",
	},
	"TLChannelsEditAbout": {
		"/mtproto.RPCChannelsService/channels_editAbout",
		func() interface{} { return new(Bool) },
		"ChannelsEditAbout",
	},
	"TLChannelsEditAdmin": {
		"/mtproto.RPCChannelsService/channels_editAdmin",
		func() interface{} { return new(Updates) },
		"ChannelsEditAdmin",
	},
	"TLChannelsEditTitle": {
		"/mtproto.RPCChannelsService/channels_editTitle",
		func() interface{} { return new(Updates) },
		"ChannelsEditTitle",
	},
	"TLChannelsEditPhoto": {
		"/mtproto.RPCChannelsService/channels_editPhoto",
		func() interface{} { return new(Updates) },
		"ChannelsEditPhoto",
	},
	"TLChannelsCheckUsername": {
		"/mtproto.RPCChannelsService/channels_checkUsername",
		func() interface{} { return new(Bool) },
		"ChannelsCheckUsername",
	},
	"TLChannelsUpdateUsername": {
		"/mtproto.RPCChannelsService/channels_updateUsername",
		func() interface{} { return new(Bool) },
		"ChannelsUpdateUsername",
	},
	"TLChannelsJoinChannel": {
		"/mtproto.RPCChannelsService/channels_joinChannel",
		func() interface{} { return new(Updates) },
		"ChannelsJoinChannel",
	},
	"TLChannelsLeaveChannel": {
		"/mtproto.RPCChannelsService/channels_leaveChannel",
		func() interface{} { return new(Updates) },
		"ChannelsLeaveChannel",
	},
	"TLChannelsInviteToChannel": {
		"/mtproto.RPCChannelsService/channels_inviteToChannel",
		func() interface{} { return new(Updates) },
		"ChannelsInviteToChannel",
	},
	"TLChannelsExportInvite": {
		"/mtproto.RPCChannelsService/channels_exportInvite",
		func() interface{} { return new(ExportedChatInvite) },
		"ChannelsExportInvite",
	},
	"TLChannelsDeleteChannel": {
		"/mtproto.RPCChannelsService/channels_deleteChannel",
		func() interface{} { return new(Updates) },
		"ChannelsDeleteChannel",
	},
	"TLChannelsToggleInvites": {
		"/mtproto.RPCChannelsService/channels_toggleInvites",
		func() interface{} { return new(Updates) },
		"ChannelsToggleInvites",
	},
	"TLChannelsExportMessageLink": {
		"/mtproto.RPCChannelsService/channels_exportMessageLink",
		func() interface{} { return new(ExportedMessageLink) },
		"ChannelsExportMessageLink",
	},
	"TLChannelsToggleSignatures": {
		"/mtproto.RPCChannelsService/channels_toggleSignatures",
		func() interface{} { return new(Updates) },
		"ChannelsToggleSignatures",
	},
	"TLChannelsUpdatePinnedMessage": {
		"/mtproto.RPCChannelsService/channels_updatePinnedMessage",
		func() interface{} { return new(Updates) },
		"ChannelsUpdatePinnedMessage",
	},
	"TLChannelsGetAdminedPublicChannels": {
		"/mtproto.RPCChannelsService/channels_getAdminedPublicChannels",
		func() interface{} { return new(Messages_Chats) },
		"ChannelsGetAdminedPublicChannels",
	},
	"TLChannelsEditBanned": {
		"/mtproto.RPCChannelsService/channels_editBanned",
		func() interface{} { return new(Updates) },
		"ChannelsEditBanned",
	},
	"TLChannelsGetAdminLog": {
		"/mtproto.RPCChannelsService/channels_getAdminLog",
		func() interface{} { return new(Channels_AdminLogResults) },
		"ChannelsGetAdminLog",
	},
	"TLChannelsSetStickers": {
		"/mtproto.RPCChannelsService/channels_setStickers",
		func() interface{} { return new(Bool) },
		"ChannelsSetStickers",
	},
	"TLChannelsReadMessageContents": {
		"/mtproto.RPCChannelsService/channels_readMessageContents",
		func() interface{} { return new(Bool) },
		"ChannelsReadMessageContents",
	},
	"TLChannelsGetDialogs": {
		"/mtproto.RPCChannelsService/channels_getDialogs",
		func() interface{} { return new(Messages_Dialogs) },
		"ChannelsGetDialogs",
	},
	"TLChannelsGetImportantHistory": {
		"/mtproto.RPCChannelsService/channels_getImportantHistory",
		func() interface{} { return new(Messages_Messages) },
		"ChannelsGetImportantHistory",
	},
	"TLChannelsToggleComments": {
		"/mtproto.RPCChannelsService/channels_toggleComments",
		func() interface{} { return new(Updates) },
		"ChannelsToggleComments",
	},
	"TLChannelsKickFromChannel": {
		"/mtproto.RPCChannelsService/channels_kickFromChannel",
		func() interface{} { return new(Updates) },
		"ChannelsKickFromChannel",
	},
	"TLChannelsDeleteHistory": {
		"/mtproto.RPCChannelsService/channels_deleteHistory",
		func() interface{} { return new(Bool) },
		"ChannelsDeleteHistory",
	},
	"TLChannelsTogglePreHistoryHidden": {
		"/mtproto.RPCChannelsService/channels_togglePreHistoryHidden",
		func() interface{} { return new(Updates) },
		"ChannelsTogglePreHistoryHidden",
	},
	"TLChannelsGetLeftChannels": {
		"/mtproto.RPCChannelsService/channels_getLeftChannels",
		func() interface{} { return new(Messages_Chats) },
		"ChannelsGetLeftChannels",
	},
	"TLChannelsGetGroupsForDiscussion": {
		"/mtproto.RPCChannelsService/channels_getGroupsForDiscussion",
		func() interface{} { return new(Messages_Chats) },
		"ChannelsGetGroupsForDiscussion",
	},
	"TLChannelsGetBroadcastsForDiscussion": {
		"/mtproto.RPCChannelsService/channels_getBroadcastsForDiscussion",
		func() interface{} { return new(Messages_Chats) },
		"ChannelsGetBroadcastsForDiscussion",
	},
	"TLChannelsSetDiscussionGroup": {
		"/mtproto.RPCChannelsService/channels_setDiscussionGroup",
		func() interface{} { return new(Bool) },
		"ChannelsSetDiscussionGroup",
	},
	"TLChannelsEditCreator": {
		"/mtproto.RPCChannelsService/channels_editCreator",
		func() interface{} { return new(Updates) },
		"ChannelsEditCreator",
	},
	"TLChannelsEditLocation": {
		"/mtproto.RPCChannelsService/channels_editLocation",
		func() interface{} { return new(Bool) },
		"ChannelsEditLocation",
	},
	"TLChannelsToggleSlowMode": {
		"/mtproto.RPCChannelsService/channels_toggleSlowMode",
		func() interface{} { return new(Updates) },
		"ChannelsToggleSlowMode",
	},
	"TLChannelsGetInactiveChannels": {
		"/mtproto.RPCChannelsService/channels_getInactiveChannels",
		func() interface{} { return new(Messages_InactiveChats) },
		"ChannelsGetInactiveChannels",
	},
}

// RPCContactsServiceClient is the client API for RPCContactsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCContactsServiceClient interface {
	//  contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	//
	ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error)
	//  contacts.getContacts#c023849f hash:int = contacts.Contacts;
	//  contacts.getContacts#22c6aa08 hash:string = contacts.Contacts;
	//
	ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error)
	//  contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	//  contacts.importContacts#da30b32d contacts:Vector<InputContact> replace:Bool = contacts.ImportedContacts;
	//
	ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error)
	//  contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	//
	ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error)
	//  contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	//  contacts.deleteContacts#96a0e00 id:Vector<InputUser> = Updates;
	//
	ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Response_ContactsDeleteContacts, error)
	//  contacts.block#332b49fc id:InputUser = Bool;
	//  contacts.block#68cc1411 id:InputPeer = Bool;
	//
	ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error)
	//  contacts.unblock#e54100bd id:InputUser = Bool;
	//  contacts.unblock#bea65d50 id:InputPeer = Bool;
	//
	ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error)
	//  contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	//
	ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error)
	//  contacts.exportCard#84e53737 = Vector<int>;
	//
	ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error)
	//  contacts.importCard#4fe196fe export_card:Vector<int> = User;
	//
	ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error)
	//  contacts.search#11f812d8 q:string limit:int = contacts.Found;
	//
	ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error)
	//  contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	//
	ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error)
	//  contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	//
	ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error)
	//  contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	//
	ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error)
	//  contacts.resetSaved#879537f1 = Bool;
	//
	ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error)
	//  contacts.getSaved#82f1e39f = Vector<SavedContact>;
	//
	ContactsGetSaved(ctx context.Context, in *TLContactsGetSaved, opts ...grpc.CallOption) (*Vector_SavedContact, error)
	//  contacts.toggleTopPeers#8514bdda enabled:Bool = Bool;
	//
	ContactsToggleTopPeers(ctx context.Context, in *TLContactsToggleTopPeers, opts ...grpc.CallOption) (*Bool, error)
	//  contacts.getContactIDs#2caa4a42 hash:int = Vector<int>;
	//
	ContactsGetContactIDs(ctx context.Context, in *TLContactsGetContactIDs, opts ...grpc.CallOption) (*VectorInt, error)
	//  contacts.deleteByPhones#1013fd9e phones:Vector<string> = Bool;
	//
	ContactsDeleteByPhones(ctx context.Context, in *TLContactsDeleteByPhones, opts ...grpc.CallOption) (*Bool, error)
	//  contacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;
	//
	ContactsAddContact(ctx context.Context, in *TLContactsAddContact, opts ...grpc.CallOption) (*Updates, error)
	//  contacts.acceptContact#f831a20f id:InputUser = Updates;
	//
	ContactsAcceptContact(ctx context.Context, in *TLContactsAcceptContact, opts ...grpc.CallOption) (*Updates, error)
	//  contacts.getLocated#a356056 geo_point:InputGeoPoint = Updates;
	//  contacts.getLocated#d348bc44 flags:# background:flags.1?true geo_point:InputGeoPoint self_expires:flags.0?int = Updates;
	//
	ContactsGetLocated(ctx context.Context, in *TLContactsGetLocated, opts ...grpc.CallOption) (*Updates, error)
	//  contacts.blockFromReplies#29a8962c flags:# delete_message:flags.0?true delete_history:flags.1?true report_spam:flags.2?true msg_id:int = Updates;
	//
	ContactsBlockFromReplies(ctx context.Context, in *TLContactsBlockFromReplies, opts ...grpc.CallOption) (*Updates, error)
}

type rPCContactsServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCContactsServiceClient(cc *grpc.ClientConn) RPCContactsServiceClient {
	return &rPCContactsServiceClient{cc}
}

func (c *rPCContactsServiceClient) ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error) {
	out := new(Vector_ContactStatus)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_getStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error) {
	out := new(Contacts_Contacts)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_getContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error) {
	out := new(Contacts_ImportedContacts)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_importContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error) {
	out := new(Contacts_Link)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_deleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Response_ContactsDeleteContacts, error) {
	out := new(Response_ContactsDeleteContacts)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_deleteContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_unblock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error) {
	out := new(Contacts_Blocked)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_getBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error) {
	out := new(VectorInt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_exportCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_importCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error) {
	out := new(Contacts_Found)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error) {
	out := new(Contacts_ResolvedPeer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_resolveUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error) {
	out := new(Contacts_TopPeers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_getTopPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_resetTopPeerRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_resetSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsGetSaved(ctx context.Context, in *TLContactsGetSaved, opts ...grpc.CallOption) (*Vector_SavedContact, error) {
	out := new(Vector_SavedContact)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_getSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsToggleTopPeers(ctx context.Context, in *TLContactsToggleTopPeers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_toggleTopPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsGetContactIDs(ctx context.Context, in *TLContactsGetContactIDs, opts ...grpc.CallOption) (*VectorInt, error) {
	out := new(VectorInt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_getContactIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsDeleteByPhones(ctx context.Context, in *TLContactsDeleteByPhones, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_deleteByPhones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsAddContact(ctx context.Context, in *TLContactsAddContact, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_addContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsAcceptContact(ctx context.Context, in *TLContactsAcceptContact, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_acceptContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsGetLocated(ctx context.Context, in *TLContactsGetLocated, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_getLocated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsServiceClient) ContactsBlockFromReplies(ctx context.Context, in *TLContactsBlockFromReplies, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContactsService/contacts_blockFromReplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCContactsServiceServer is the server API for RPCContactsService service.
type RPCContactsServiceServer interface {
	//  contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	//
	ContactsGetStatuses(context.Context, *TLContactsGetStatuses) (*Vector_ContactStatus, error)
	//  contacts.getContacts#c023849f hash:int = contacts.Contacts;
	//  contacts.getContacts#22c6aa08 hash:string = contacts.Contacts;
	//
	ContactsGetContacts(context.Context, *TLContactsGetContacts) (*Contacts_Contacts, error)
	//  contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	//  contacts.importContacts#da30b32d contacts:Vector<InputContact> replace:Bool = contacts.ImportedContacts;
	//
	ContactsImportContacts(context.Context, *TLContactsImportContacts) (*Contacts_ImportedContacts, error)
	//  contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	//
	ContactsDeleteContact(context.Context, *TLContactsDeleteContact) (*Contacts_Link, error)
	//  contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	//  contacts.deleteContacts#96a0e00 id:Vector<InputUser> = Updates;
	//
	ContactsDeleteContacts(context.Context, *TLContactsDeleteContacts) (*Response_ContactsDeleteContacts, error)
	//  contacts.block#332b49fc id:InputUser = Bool;
	//  contacts.block#68cc1411 id:InputPeer = Bool;
	//
	ContactsBlock(context.Context, *TLContactsBlock) (*Bool, error)
	//  contacts.unblock#e54100bd id:InputUser = Bool;
	//  contacts.unblock#bea65d50 id:InputPeer = Bool;
	//
	ContactsUnblock(context.Context, *TLContactsUnblock) (*Bool, error)
	//  contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	//
	ContactsGetBlocked(context.Context, *TLContactsGetBlocked) (*Contacts_Blocked, error)
	//  contacts.exportCard#84e53737 = Vector<int>;
	//
	ContactsExportCard(context.Context, *TLContactsExportCard) (*VectorInt, error)
	//  contacts.importCard#4fe196fe export_card:Vector<int> = User;
	//
	ContactsImportCard(context.Context, *TLContactsImportCard) (*User, error)
	//  contacts.search#11f812d8 q:string limit:int = contacts.Found;
	//
	ContactsSearch(context.Context, *TLContactsSearch) (*Contacts_Found, error)
	//  contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	//
	ContactsResolveUsername(context.Context, *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error)
	//  contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	//
	ContactsGetTopPeers(context.Context, *TLContactsGetTopPeers) (*Contacts_TopPeers, error)
	//  contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	//
	ContactsResetTopPeerRating(context.Context, *TLContactsResetTopPeerRating) (*Bool, error)
	//  contacts.resetSaved#879537f1 = Bool;
	//
	ContactsResetSaved(context.Context, *TLContactsResetSaved) (*Bool, error)
	//  contacts.getSaved#82f1e39f = Vector<SavedContact>;
	//
	ContactsGetSaved(context.Context, *TLContactsGetSaved) (*Vector_SavedContact, error)
	//  contacts.toggleTopPeers#8514bdda enabled:Bool = Bool;
	//
	ContactsToggleTopPeers(context.Context, *TLContactsToggleTopPeers) (*Bool, error)
	//  contacts.getContactIDs#2caa4a42 hash:int = Vector<int>;
	//
	ContactsGetContactIDs(context.Context, *TLContactsGetContactIDs) (*VectorInt, error)
	//  contacts.deleteByPhones#1013fd9e phones:Vector<string> = Bool;
	//
	ContactsDeleteByPhones(context.Context, *TLContactsDeleteByPhones) (*Bool, error)
	//  contacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;
	//
	ContactsAddContact(context.Context, *TLContactsAddContact) (*Updates, error)
	//  contacts.acceptContact#f831a20f id:InputUser = Updates;
	//
	ContactsAcceptContact(context.Context, *TLContactsAcceptContact) (*Updates, error)
	//  contacts.getLocated#a356056 geo_point:InputGeoPoint = Updates;
	//  contacts.getLocated#d348bc44 flags:# background:flags.1?true geo_point:InputGeoPoint self_expires:flags.0?int = Updates;
	//
	ContactsGetLocated(context.Context, *TLContactsGetLocated) (*Updates, error)
	//  contacts.blockFromReplies#29a8962c flags:# delete_message:flags.0?true delete_history:flags.1?true report_spam:flags.2?true msg_id:int = Updates;
	//
	ContactsBlockFromReplies(context.Context, *TLContactsBlockFromReplies) (*Updates, error)
}

// UnimplementedRPCContactsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCContactsServiceServer struct {
}

func (*UnimplementedRPCContactsServiceServer) ContactsGetStatuses(ctx context.Context, req *TLContactsGetStatuses) (*Vector_ContactStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetStatuses not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsGetContacts(ctx context.Context, req *TLContactsGetContacts) (*Contacts_Contacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsImportContacts(ctx context.Context, req *TLContactsImportContacts) (*Contacts_ImportedContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportContacts not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsDeleteContact(ctx context.Context, req *TLContactsDeleteContact) (*Contacts_Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContact not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsDeleteContacts(ctx context.Context, req *TLContactsDeleteContacts) (*Response_ContactsDeleteContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContacts not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsBlock(ctx context.Context, req *TLContactsBlock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsBlock not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsUnblock(ctx context.Context, req *TLContactsUnblock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsUnblock not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsGetBlocked(ctx context.Context, req *TLContactsGetBlocked) (*Contacts_Blocked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetBlocked not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsExportCard(ctx context.Context, req *TLContactsExportCard) (*VectorInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsExportCard not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsImportCard(ctx context.Context, req *TLContactsImportCard) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportCard not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsSearch(ctx context.Context, req *TLContactsSearch) (*Contacts_Found, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSearch not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsResolveUsername(ctx context.Context, req *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResolveUsername not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsGetTopPeers(ctx context.Context, req *TLContactsGetTopPeers) (*Contacts_TopPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetTopPeers not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsResetTopPeerRating(ctx context.Context, req *TLContactsResetTopPeerRating) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetTopPeerRating not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsResetSaved(ctx context.Context, req *TLContactsResetSaved) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetSaved not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsGetSaved(ctx context.Context, req *TLContactsGetSaved) (*Vector_SavedContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetSaved not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsToggleTopPeers(ctx context.Context, req *TLContactsToggleTopPeers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsToggleTopPeers not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsGetContactIDs(ctx context.Context, req *TLContactsGetContactIDs) (*VectorInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContactIDs not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsDeleteByPhones(ctx context.Context, req *TLContactsDeleteByPhones) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteByPhones not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsAddContact(ctx context.Context, req *TLContactsAddContact) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsAddContact not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsAcceptContact(ctx context.Context, req *TLContactsAcceptContact) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsAcceptContact not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsGetLocated(ctx context.Context, req *TLContactsGetLocated) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetLocated not implemented")
}
func (*UnimplementedRPCContactsServiceServer) ContactsBlockFromReplies(ctx context.Context, req *TLContactsBlockFromReplies) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsBlockFromReplies not implemented")
}

func RegisterRPCContactsServiceServer(s *grpc.Server, srv RPCContactsServiceServer) {
	s.RegisterService(&_RPCContactsService_serviceDesc, srv)
}

func _RPCContactsService_ContactsGetStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsGetStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsGetStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsGetStatuses(ctx, req.(*TLContactsGetStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsGetContacts(ctx, req.(*TLContactsGetContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsImportContacts(ctx, req.(*TLContactsImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsDeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsDeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsDeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsDeleteContact(ctx, req.(*TLContactsDeleteContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsDeleteContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsDeleteContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsDeleteContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsDeleteContacts(ctx, req.(*TLContactsDeleteContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsBlock(ctx, req.(*TLContactsBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsUnblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsUnblock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsUnblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsUnblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsUnblock(ctx, req.(*TLContactsUnblock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetBlocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsGetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsGetBlocked(ctx, req.(*TLContactsGetBlocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsExportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsExportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsExportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsExportCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsExportCard(ctx, req.(*TLContactsExportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsImportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsImportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsImportCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsImportCard(ctx, req.(*TLContactsImportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsSearch(ctx, req.(*TLContactsSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsResolveUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResolveUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsResolveUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsResolveUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsResolveUsername(ctx, req.(*TLContactsResolveUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsGetTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsGetTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsGetTopPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsGetTopPeers(ctx, req.(*TLContactsGetTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsResetTopPeerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetTopPeerRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsResetTopPeerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsResetTopPeerRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsResetTopPeerRating(ctx, req.(*TLContactsResetTopPeerRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsResetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsResetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsResetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsResetSaved(ctx, req.(*TLContactsResetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsGetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsGetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsGetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsGetSaved(ctx, req.(*TLContactsGetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsToggleTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsToggleTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsToggleTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsToggleTopPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsToggleTopPeers(ctx, req.(*TLContactsToggleTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsGetContactIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContactIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsGetContactIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsGetContactIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsGetContactIDs(ctx, req.(*TLContactsGetContactIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsDeleteByPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteByPhones)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsDeleteByPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsDeleteByPhones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsDeleteByPhones(ctx, req.(*TLContactsDeleteByPhones))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsAddContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsAddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsAddContact(ctx, req.(*TLContactsAddContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsAcceptContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsAcceptContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsAcceptContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsAcceptContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsAcceptContact(ctx, req.(*TLContactsAcceptContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsGetLocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetLocated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsGetLocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsGetLocated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsGetLocated(ctx, req.(*TLContactsGetLocated))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContactsService_ContactsBlockFromReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsBlockFromReplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServiceServer).ContactsBlockFromReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContactsService/ContactsBlockFromReplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServiceServer).ContactsBlockFromReplies(ctx, req.(*TLContactsBlockFromReplies))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCContactsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCContactsService",
	HandlerType: (*RPCContactsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "contacts_getStatuses",
			Handler:    _RPCContactsService_ContactsGetStatuses_Handler,
		},
		{
			MethodName: "contacts_getContacts",
			Handler:    _RPCContactsService_ContactsGetContacts_Handler,
		},
		{
			MethodName: "contacts_importContacts",
			Handler:    _RPCContactsService_ContactsImportContacts_Handler,
		},
		{
			MethodName: "contacts_deleteContact",
			Handler:    _RPCContactsService_ContactsDeleteContact_Handler,
		},
		{
			MethodName: "contacts_deleteContacts",
			Handler:    _RPCContactsService_ContactsDeleteContacts_Handler,
		},
		{
			MethodName: "contacts_block",
			Handler:    _RPCContactsService_ContactsBlock_Handler,
		},
		{
			MethodName: "contacts_unblock",
			Handler:    _RPCContactsService_ContactsUnblock_Handler,
		},
		{
			MethodName: "contacts_getBlocked",
			Handler:    _RPCContactsService_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "contacts_exportCard",
			Handler:    _RPCContactsService_ContactsExportCard_Handler,
		},
		{
			MethodName: "contacts_importCard",
			Handler:    _RPCContactsService_ContactsImportCard_Handler,
		},
		{
			MethodName: "contacts_search",
			Handler:    _RPCContactsService_ContactsSearch_Handler,
		},
		{
			MethodName: "contacts_resolveUsername",
			Handler:    _RPCContactsService_ContactsResolveUsername_Handler,
		},
		{
			MethodName: "contacts_getTopPeers",
			Handler:    _RPCContactsService_ContactsGetTopPeers_Handler,
		},
		{
			MethodName: "contacts_resetTopPeerRating",
			Handler:    _RPCContactsService_ContactsResetTopPeerRating_Handler,
		},
		{
			MethodName: "contacts_resetSaved",
			Handler:    _RPCContactsService_ContactsResetSaved_Handler,
		},
		{
			MethodName: "contacts_getSaved",
			Handler:    _RPCContactsService_ContactsGetSaved_Handler,
		},
		{
			MethodName: "contacts_toggleTopPeers",
			Handler:    _RPCContactsService_ContactsToggleTopPeers_Handler,
		},
		{
			MethodName: "contacts_getContactIDs",
			Handler:    _RPCContactsService_ContactsGetContactIDs_Handler,
		},
		{
			MethodName: "contacts_deleteByPhones",
			Handler:    _RPCContactsService_ContactsDeleteByPhones_Handler,
		},
		{
			MethodName: "contacts_addContact",
			Handler:    _RPCContactsService_ContactsAddContact_Handler,
		},
		{
			MethodName: "contacts_acceptContact",
			Handler:    _RPCContactsService_ContactsAcceptContact_Handler,
		},
		{
			MethodName: "contacts_getLocated",
			Handler:    _RPCContactsService_ContactsGetLocated_Handler,
		},
		{
			MethodName: "contacts_blockFromReplies",
			Handler:    _RPCContactsService_ContactsBlockFromReplies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCContactsService_serviceDesc = map[string][]interface{}{
	"TLContactsGetStatuses": {
		"/mtproto.RPCContactsService/contacts_getStatuses",
		func() interface{} { return new(Vector_ContactStatus) },
		"ContactsGetStatuses",
	},
	"TLContactsGetContacts": {
		"/mtproto.RPCContactsService/contacts_getContacts",
		func() interface{} { return new(Contacts_Contacts) },
		"ContactsGetContacts",
	},
	"TLContactsImportContacts": {
		"/mtproto.RPCContactsService/contacts_importContacts",
		func() interface{} { return new(Contacts_ImportedContacts) },
		"ContactsImportContacts",
	},
	"TLContactsDeleteContact": {
		"/mtproto.RPCContactsService/contacts_deleteContact",
		func() interface{} { return new(Contacts_Link) },
		"ContactsDeleteContact",
	},
	"TLContactsDeleteContacts": {
		"/mtproto.RPCContactsService/contacts_deleteContacts",
		func() interface{} { return new(Response_ContactsDeleteContacts) },
		"ContactsDeleteContacts",
	},
	"TLContactsBlock": {
		"/mtproto.RPCContactsService/contacts_block",
		func() interface{} { return new(Bool) },
		"ContactsBlock",
	},
	"TLContactsUnblock": {
		"/mtproto.RPCContactsService/contacts_unblock",
		func() interface{} { return new(Bool) },
		"ContactsUnblock",
	},
	"TLContactsGetBlocked": {
		"/mtproto.RPCContactsService/contacts_getBlocked",
		func() interface{} { return new(Contacts_Blocked) },
		"ContactsGetBlocked",
	},
	"TLContactsExportCard": {
		"/mtproto.RPCContactsService/contacts_exportCard",
		func() interface{} { return new(VectorInt) },
		"ContactsExportCard",
	},
	"TLContactsImportCard": {
		"/mtproto.RPCContactsService/contacts_importCard",
		func() interface{} { return new(User) },
		"ContactsImportCard",
	},
	"TLContactsSearch": {
		"/mtproto.RPCContactsService/contacts_search",
		func() interface{} { return new(Contacts_Found) },
		"ContactsSearch",
	},
	"TLContactsResolveUsername": {
		"/mtproto.RPCContactsService/contacts_resolveUsername",
		func() interface{} { return new(Contacts_ResolvedPeer) },
		"ContactsResolveUsername",
	},
	"TLContactsGetTopPeers": {
		"/mtproto.RPCContactsService/contacts_getTopPeers",
		func() interface{} { return new(Contacts_TopPeers) },
		"ContactsGetTopPeers",
	},
	"TLContactsResetTopPeerRating": {
		"/mtproto.RPCContactsService/contacts_resetTopPeerRating",
		func() interface{} { return new(Bool) },
		"ContactsResetTopPeerRating",
	},
	"TLContactsResetSaved": {
		"/mtproto.RPCContactsService/contacts_resetSaved",
		func() interface{} { return new(Bool) },
		"ContactsResetSaved",
	},
	"TLContactsGetSaved": {
		"/mtproto.RPCContactsService/contacts_getSaved",
		func() interface{} { return new(Vector_SavedContact) },
		"ContactsGetSaved",
	},
	"TLContactsToggleTopPeers": {
		"/mtproto.RPCContactsService/contacts_toggleTopPeers",
		func() interface{} { return new(Bool) },
		"ContactsToggleTopPeers",
	},
	"TLContactsGetContactIDs": {
		"/mtproto.RPCContactsService/contacts_getContactIDs",
		func() interface{} { return new(VectorInt) },
		"ContactsGetContactIDs",
	},
	"TLContactsDeleteByPhones": {
		"/mtproto.RPCContactsService/contacts_deleteByPhones",
		func() interface{} { return new(Bool) },
		"ContactsDeleteByPhones",
	},
	"TLContactsAddContact": {
		"/mtproto.RPCContactsService/contacts_addContact",
		func() interface{} { return new(Updates) },
		"ContactsAddContact",
	},
	"TLContactsAcceptContact": {
		"/mtproto.RPCContactsService/contacts_acceptContact",
		func() interface{} { return new(Updates) },
		"ContactsAcceptContact",
	},
	"TLContactsGetLocated": {
		"/mtproto.RPCContactsService/contacts_getLocated",
		func() interface{} { return new(Updates) },
		"ContactsGetLocated",
	},
	"TLContactsBlockFromReplies": {
		"/mtproto.RPCContactsService/contacts_blockFromReplies",
		func() interface{} { return new(Updates) },
		"ContactsBlockFromReplies",
	},
}

// RPCFoldersServiceClient is the client API for RPCFoldersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCFoldersServiceClient interface {
	//  folders.editPeerFolders#6847d0ab folder_peers:Vector<InputFolderPeer> = Updates;
	//
	FoldersEditPeerFolders(ctx context.Context, in *TLFoldersEditPeerFolders, opts ...grpc.CallOption) (*Updates, error)
	//  folders.deleteFolder#1c295881 folder_id:int = Updates;
	//
	FoldersDeleteFolder(ctx context.Context, in *TLFoldersDeleteFolder, opts ...grpc.CallOption) (*Updates, error)
}

type rPCFoldersServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCFoldersServiceClient(cc *grpc.ClientConn) RPCFoldersServiceClient {
	return &rPCFoldersServiceClient{cc}
}

func (c *rPCFoldersServiceClient) FoldersEditPeerFolders(ctx context.Context, in *TLFoldersEditPeerFolders, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCFoldersService/folders_editPeerFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersServiceClient) FoldersDeleteFolder(ctx context.Context, in *TLFoldersDeleteFolder, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCFoldersService/folders_deleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFoldersServiceServer is the server API for RPCFoldersService service.
type RPCFoldersServiceServer interface {
	//  folders.editPeerFolders#6847d0ab folder_peers:Vector<InputFolderPeer> = Updates;
	//
	FoldersEditPeerFolders(context.Context, *TLFoldersEditPeerFolders) (*Updates, error)
	//  folders.deleteFolder#1c295881 folder_id:int = Updates;
	//
	FoldersDeleteFolder(context.Context, *TLFoldersDeleteFolder) (*Updates, error)
}

// UnimplementedRPCFoldersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCFoldersServiceServer struct {
}

func (*UnimplementedRPCFoldersServiceServer) FoldersEditPeerFolders(ctx context.Context, req *TLFoldersEditPeerFolders) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersEditPeerFolders not implemented")
}
func (*UnimplementedRPCFoldersServiceServer) FoldersDeleteFolder(ctx context.Context, req *TLFoldersDeleteFolder) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersDeleteFolder not implemented")
}

func RegisterRPCFoldersServiceServer(s *grpc.Server, srv RPCFoldersServiceServer) {
	s.RegisterService(&_RPCFoldersService_serviceDesc, srv)
}

func _RPCFoldersService_FoldersEditPeerFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFoldersEditPeerFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServiceServer).FoldersEditPeerFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCFoldersService/FoldersEditPeerFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServiceServer).FoldersEditPeerFolders(ctx, req.(*TLFoldersEditPeerFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFoldersService_FoldersDeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFoldersDeleteFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServiceServer).FoldersDeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCFoldersService/FoldersDeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServiceServer).FoldersDeleteFolder(ctx, req.(*TLFoldersDeleteFolder))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCFoldersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFoldersService",
	HandlerType: (*RPCFoldersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "folders_editPeerFolders",
			Handler:    _RPCFoldersService_FoldersEditPeerFolders_Handler,
		},
		{
			MethodName: "folders_deleteFolder",
			Handler:    _RPCFoldersService_FoldersDeleteFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCFoldersService_serviceDesc = map[string][]interface{}{
	"TLFoldersEditPeerFolders": {
		"/mtproto.RPCFoldersService/folders_editPeerFolders",
		func() interface{} { return new(Updates) },
		"FoldersEditPeerFolders",
	},
	"TLFoldersDeleteFolder": {
		"/mtproto.RPCFoldersService/folders_deleteFolder",
		func() interface{} { return new(Updates) },
		"FoldersDeleteFolder",
	},
}

// RPCHelpServiceClient is the client API for RPCHelpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCHelpServiceClient interface {
	//  help.getConfig#c4f9186b = Config;
	//
	HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error)
	//  help.getNearestDc#1fb33026 = NearestDc;
	//
	HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error)
	//  help.getAppUpdate#ae2de196 = help.AppUpdate;
	//  help.getAppUpdate#c812ac7e device_model:string system_version:string app_version:string lang_code:string = help.AppUpdate;
	//  help.getAppUpdate#522d5a7d source:string = help.AppUpdate;
	//
	HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error)
	//  help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	//
	HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error)
	//  help.getInviteText#4d392343 = help.InviteText;
	//  help.getInviteText#a4a95186 lang_code:string = help.InviteText;
	//
	HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error)
	//  help.getSupport#9cdf08cd = help.Support;
	//
	HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error)
	//  help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	//  help.getAppChangelog#5bab7fb2 device_model:string system_version:string app_version:string lang_code:string = help.AppChangelog;
	//
	HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Response_HelpGetAppChangelog, error)
	//  help.getTermsOfService#350170f3 = help.TermsOfService;
	//  help.getTermsOfService#37d78f83 lang_code:string = help.TermsOfService;
	//
	HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error)
	//  help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	//
	HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error)
	//  help.getCdnConfig#52029342 = CdnConfig;
	//
	HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error)
	//  help.getRecentMeUrls#3dc0f114 referer:string = help.RecentMeUrls;
	//
	HelpGetRecentMeUrls(ctx context.Context, in *TLHelpGetRecentMeUrls, opts ...grpc.CallOption) (*Help_RecentMeUrls, error)
	//  help.getProxyData#3d7758e1 = help.ProxyData;
	//
	HelpGetProxyData(ctx context.Context, in *TLHelpGetProxyData, opts ...grpc.CallOption) (*Help_ProxyData, error)
	//  help.getTermsOfServiceUpdate#2ca51fd1 = help.TermsOfServiceUpdate;
	//
	HelpGetTermsOfServiceUpdate(ctx context.Context, in *TLHelpGetTermsOfServiceUpdate, opts ...grpc.CallOption) (*Help_TermsOfServiceUpdate, error)
	//  help.acceptTermsOfService#ee72f79a id:DataJSON = Bool;
	//
	HelpAcceptTermsOfService(ctx context.Context, in *TLHelpAcceptTermsOfService, opts ...grpc.CallOption) (*Bool, error)
	//  help.getDeepLinkInfo#3fedc75f path:string = help.DeepLinkInfo;
	//
	HelpGetDeepLinkInfo(ctx context.Context, in *TLHelpGetDeepLinkInfo, opts ...grpc.CallOption) (*Help_DeepLinkInfo, error)
	//  help.test#c0e202f7 = Bool;
	//
	HelpTest(ctx context.Context, in *TLHelpTest, opts ...grpc.CallOption) (*Bool, error)
	//  help.getPassportConfig#c661ad08 hash:int = help.PassportConfig;
	//
	HelpGetPassportConfig(ctx context.Context, in *TLHelpGetPassportConfig, opts ...grpc.CallOption) (*Help_PassportConfig, error)
	//  help.getSupportName#d360e72c = help.SupportName;
	//
	HelpGetSupportName(ctx context.Context, in *TLHelpGetSupportName, opts ...grpc.CallOption) (*Help_SupportName, error)
	//  help.getUserInfo#38a08d3 user_id:InputUser = help.UserInfo;
	//
	HelpGetUserInfo(ctx context.Context, in *TLHelpGetUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error)
	//  help.editUserInfo#66b91b70 user_id:InputUser message:string entities:Vector<MessageEntity> = help.UserInfo;
	//
	HelpEditUserInfo(ctx context.Context, in *TLHelpEditUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error)
	//  help.getAppConfig#98914110 = JSONValue;
	//
	HelpGetAppConfig(ctx context.Context, in *TLHelpGetAppConfig, opts ...grpc.CallOption) (*JSONValue, error)
	//  help.getPromoData#c0977421 = help.PromoData;
	//
	HelpGetPromoData(ctx context.Context, in *TLHelpGetPromoData, opts ...grpc.CallOption) (*Help_PromoData, error)
	//  help.hidePromoData#1e251c95 peer:InputPeer = Bool;
	//
	HelpHidePromoData(ctx context.Context, in *TLHelpHidePromoData, opts ...grpc.CallOption) (*Bool, error)
	//  help.dismissSuggestion#77fa99f suggestion:string = Bool;
	//
	HelpDismissSuggestion(ctx context.Context, in *TLHelpDismissSuggestion, opts ...grpc.CallOption) (*Bool, error)
	//  help.getCountriesList#735787a8 lang_code:string hash:int = help.CountriesList;
	//
	HelpGetCountriesList(ctx context.Context, in *TLHelpGetCountriesList, opts ...grpc.CallOption) (*Help_CountriesList, error)
}

type rPCHelpServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCHelpServiceClient(cc *grpc.ClientConn) RPCHelpServiceClient {
	return &rPCHelpServiceClient{cc}
}

func (c *rPCHelpServiceClient) HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error) {
	out := new(NearestDc)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getNearestDc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error) {
	out := new(Help_AppUpdate)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getAppUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_saveAppLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error) {
	out := new(Help_InviteText)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getInviteText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error) {
	out := new(Help_Support)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getSupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Response_HelpGetAppChangelog, error) {
	out := new(Response_HelpGetAppChangelog)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getAppChangelog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error) {
	out := new(Help_TermsOfService)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getTermsOfService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_setBotUpdatesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error) {
	out := new(CdnConfig)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getCdnConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetRecentMeUrls(ctx context.Context, in *TLHelpGetRecentMeUrls, opts ...grpc.CallOption) (*Help_RecentMeUrls, error) {
	out := new(Help_RecentMeUrls)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getRecentMeUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetProxyData(ctx context.Context, in *TLHelpGetProxyData, opts ...grpc.CallOption) (*Help_ProxyData, error) {
	out := new(Help_ProxyData)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getProxyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetTermsOfServiceUpdate(ctx context.Context, in *TLHelpGetTermsOfServiceUpdate, opts ...grpc.CallOption) (*Help_TermsOfServiceUpdate, error) {
	out := new(Help_TermsOfServiceUpdate)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getTermsOfServiceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpAcceptTermsOfService(ctx context.Context, in *TLHelpAcceptTermsOfService, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_acceptTermsOfService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetDeepLinkInfo(ctx context.Context, in *TLHelpGetDeepLinkInfo, opts ...grpc.CallOption) (*Help_DeepLinkInfo, error) {
	out := new(Help_DeepLinkInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getDeepLinkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpTest(ctx context.Context, in *TLHelpTest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetPassportConfig(ctx context.Context, in *TLHelpGetPassportConfig, opts ...grpc.CallOption) (*Help_PassportConfig, error) {
	out := new(Help_PassportConfig)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getPassportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetSupportName(ctx context.Context, in *TLHelpGetSupportName, opts ...grpc.CallOption) (*Help_SupportName, error) {
	out := new(Help_SupportName)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getSupportName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetUserInfo(ctx context.Context, in *TLHelpGetUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error) {
	out := new(Help_UserInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpEditUserInfo(ctx context.Context, in *TLHelpEditUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error) {
	out := new(Help_UserInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_editUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetAppConfig(ctx context.Context, in *TLHelpGetAppConfig, opts ...grpc.CallOption) (*JSONValue, error) {
	out := new(JSONValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetPromoData(ctx context.Context, in *TLHelpGetPromoData, opts ...grpc.CallOption) (*Help_PromoData, error) {
	out := new(Help_PromoData)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getPromoData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpHidePromoData(ctx context.Context, in *TLHelpHidePromoData, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_hidePromoData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpDismissSuggestion(ctx context.Context, in *TLHelpDismissSuggestion, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_dismissSuggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpServiceClient) HelpGetCountriesList(ctx context.Context, in *TLHelpGetCountriesList, opts ...grpc.CallOption) (*Help_CountriesList, error) {
	out := new(Help_CountriesList)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelpService/help_getCountriesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCHelpServiceServer is the server API for RPCHelpService service.
type RPCHelpServiceServer interface {
	//  help.getConfig#c4f9186b = Config;
	//
	HelpGetConfig(context.Context, *TLHelpGetConfig) (*Config, error)
	//  help.getNearestDc#1fb33026 = NearestDc;
	//
	HelpGetNearestDc(context.Context, *TLHelpGetNearestDc) (*NearestDc, error)
	//  help.getAppUpdate#ae2de196 = help.AppUpdate;
	//  help.getAppUpdate#c812ac7e device_model:string system_version:string app_version:string lang_code:string = help.AppUpdate;
	//  help.getAppUpdate#522d5a7d source:string = help.AppUpdate;
	//
	HelpGetAppUpdate(context.Context, *TLHelpGetAppUpdate) (*Help_AppUpdate, error)
	//  help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	//
	HelpSaveAppLog(context.Context, *TLHelpSaveAppLog) (*Bool, error)
	//  help.getInviteText#4d392343 = help.InviteText;
	//  help.getInviteText#a4a95186 lang_code:string = help.InviteText;
	//
	HelpGetInviteText(context.Context, *TLHelpGetInviteText) (*Help_InviteText, error)
	//  help.getSupport#9cdf08cd = help.Support;
	//
	HelpGetSupport(context.Context, *TLHelpGetSupport) (*Help_Support, error)
	//  help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	//  help.getAppChangelog#5bab7fb2 device_model:string system_version:string app_version:string lang_code:string = help.AppChangelog;
	//
	HelpGetAppChangelog(context.Context, *TLHelpGetAppChangelog) (*Response_HelpGetAppChangelog, error)
	//  help.getTermsOfService#350170f3 = help.TermsOfService;
	//  help.getTermsOfService#37d78f83 lang_code:string = help.TermsOfService;
	//
	HelpGetTermsOfService(context.Context, *TLHelpGetTermsOfService) (*Help_TermsOfService, error)
	//  help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	//
	HelpSetBotUpdatesStatus(context.Context, *TLHelpSetBotUpdatesStatus) (*Bool, error)
	//  help.getCdnConfig#52029342 = CdnConfig;
	//
	HelpGetCdnConfig(context.Context, *TLHelpGetCdnConfig) (*CdnConfig, error)
	//  help.getRecentMeUrls#3dc0f114 referer:string = help.RecentMeUrls;
	//
	HelpGetRecentMeUrls(context.Context, *TLHelpGetRecentMeUrls) (*Help_RecentMeUrls, error)
	//  help.getProxyData#3d7758e1 = help.ProxyData;
	//
	HelpGetProxyData(context.Context, *TLHelpGetProxyData) (*Help_ProxyData, error)
	//  help.getTermsOfServiceUpdate#2ca51fd1 = help.TermsOfServiceUpdate;
	//
	HelpGetTermsOfServiceUpdate(context.Context, *TLHelpGetTermsOfServiceUpdate) (*Help_TermsOfServiceUpdate, error)
	//  help.acceptTermsOfService#ee72f79a id:DataJSON = Bool;
	//
	HelpAcceptTermsOfService(context.Context, *TLHelpAcceptTermsOfService) (*Bool, error)
	//  help.getDeepLinkInfo#3fedc75f path:string = help.DeepLinkInfo;
	//
	HelpGetDeepLinkInfo(context.Context, *TLHelpGetDeepLinkInfo) (*Help_DeepLinkInfo, error)
	//  help.test#c0e202f7 = Bool;
	//
	HelpTest(context.Context, *TLHelpTest) (*Bool, error)
	//  help.getPassportConfig#c661ad08 hash:int = help.PassportConfig;
	//
	HelpGetPassportConfig(context.Context, *TLHelpGetPassportConfig) (*Help_PassportConfig, error)
	//  help.getSupportName#d360e72c = help.SupportName;
	//
	HelpGetSupportName(context.Context, *TLHelpGetSupportName) (*Help_SupportName, error)
	//  help.getUserInfo#38a08d3 user_id:InputUser = help.UserInfo;
	//
	HelpGetUserInfo(context.Context, *TLHelpGetUserInfo) (*Help_UserInfo, error)
	//  help.editUserInfo#66b91b70 user_id:InputUser message:string entities:Vector<MessageEntity> = help.UserInfo;
	//
	HelpEditUserInfo(context.Context, *TLHelpEditUserInfo) (*Help_UserInfo, error)
	//  help.getAppConfig#98914110 = JSONValue;
	//
	HelpGetAppConfig(context.Context, *TLHelpGetAppConfig) (*JSONValue, error)
	//  help.getPromoData#c0977421 = help.PromoData;
	//
	HelpGetPromoData(context.Context, *TLHelpGetPromoData) (*Help_PromoData, error)
	//  help.hidePromoData#1e251c95 peer:InputPeer = Bool;
	//
	HelpHidePromoData(context.Context, *TLHelpHidePromoData) (*Bool, error)
	//  help.dismissSuggestion#77fa99f suggestion:string = Bool;
	//
	HelpDismissSuggestion(context.Context, *TLHelpDismissSuggestion) (*Bool, error)
	//  help.getCountriesList#735787a8 lang_code:string hash:int = help.CountriesList;
	//
	HelpGetCountriesList(context.Context, *TLHelpGetCountriesList) (*Help_CountriesList, error)
}

// UnimplementedRPCHelpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCHelpServiceServer struct {
}

func (*UnimplementedRPCHelpServiceServer) HelpGetConfig(ctx context.Context, req *TLHelpGetConfig) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetConfig not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetNearestDc(ctx context.Context, req *TLHelpGetNearestDc) (*NearestDc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetNearestDc not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetAppUpdate(ctx context.Context, req *TLHelpGetAppUpdate) (*Help_AppUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppUpdate not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpSaveAppLog(ctx context.Context, req *TLHelpSaveAppLog) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSaveAppLog not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetInviteText(ctx context.Context, req *TLHelpGetInviteText) (*Help_InviteText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetInviteText not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetSupport(ctx context.Context, req *TLHelpGetSupport) (*Help_Support, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetSupport not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetAppChangelog(ctx context.Context, req *TLHelpGetAppChangelog) (*Response_HelpGetAppChangelog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppChangelog not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetTermsOfService(ctx context.Context, req *TLHelpGetTermsOfService) (*Help_TermsOfService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTermsOfService not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpSetBotUpdatesStatus(ctx context.Context, req *TLHelpSetBotUpdatesStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSetBotUpdatesStatus not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetCdnConfig(ctx context.Context, req *TLHelpGetCdnConfig) (*CdnConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetCdnConfig not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetRecentMeUrls(ctx context.Context, req *TLHelpGetRecentMeUrls) (*Help_RecentMeUrls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetRecentMeUrls not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetProxyData(ctx context.Context, req *TLHelpGetProxyData) (*Help_ProxyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetProxyData not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetTermsOfServiceUpdate(ctx context.Context, req *TLHelpGetTermsOfServiceUpdate) (*Help_TermsOfServiceUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTermsOfServiceUpdate not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpAcceptTermsOfService(ctx context.Context, req *TLHelpAcceptTermsOfService) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpAcceptTermsOfService not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetDeepLinkInfo(ctx context.Context, req *TLHelpGetDeepLinkInfo) (*Help_DeepLinkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetDeepLinkInfo not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpTest(ctx context.Context, req *TLHelpTest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpTest not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetPassportConfig(ctx context.Context, req *TLHelpGetPassportConfig) (*Help_PassportConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPassportConfig not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetSupportName(ctx context.Context, req *TLHelpGetSupportName) (*Help_SupportName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetSupportName not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetUserInfo(ctx context.Context, req *TLHelpGetUserInfo) (*Help_UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetUserInfo not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpEditUserInfo(ctx context.Context, req *TLHelpEditUserInfo) (*Help_UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpEditUserInfo not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetAppConfig(ctx context.Context, req *TLHelpGetAppConfig) (*JSONValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppConfig not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetPromoData(ctx context.Context, req *TLHelpGetPromoData) (*Help_PromoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPromoData not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpHidePromoData(ctx context.Context, req *TLHelpHidePromoData) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpHidePromoData not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpDismissSuggestion(ctx context.Context, req *TLHelpDismissSuggestion) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpDismissSuggestion not implemented")
}
func (*UnimplementedRPCHelpServiceServer) HelpGetCountriesList(ctx context.Context, req *TLHelpGetCountriesList) (*Help_CountriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetCountriesList not implemented")
}

func RegisterRPCHelpServiceServer(s *grpc.Server, srv RPCHelpServiceServer) {
	s.RegisterService(&_RPCHelpService_serviceDesc, srv)
}

func _RPCHelpService_HelpGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetConfig(ctx, req.(*TLHelpGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetNearestDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetNearestDc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetNearestDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetNearestDc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetNearestDc(ctx, req.(*TLHelpGetNearestDc))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetAppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetAppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetAppUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetAppUpdate(ctx, req.(*TLHelpGetAppUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpSaveAppLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSaveAppLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpSaveAppLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpSaveAppLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpSaveAppLog(ctx, req.(*TLHelpSaveAppLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetInviteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetInviteText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetInviteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetInviteText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetInviteText(ctx, req.(*TLHelpGetInviteText))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetSupport(ctx, req.(*TLHelpGetSupport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetAppChangelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppChangelog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetAppChangelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetAppChangelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetAppChangelog(ctx, req.(*TLHelpGetAppChangelog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetTermsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetTermsOfService(ctx, req.(*TLHelpGetTermsOfService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpSetBotUpdatesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSetBotUpdatesStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpSetBotUpdatesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpSetBotUpdatesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpSetBotUpdatesStatus(ctx, req.(*TLHelpSetBotUpdatesStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetCdnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCdnConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetCdnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetCdnConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetCdnConfig(ctx, req.(*TLHelpGetCdnConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetRecentMeUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetRecentMeUrls)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetRecentMeUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetRecentMeUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetRecentMeUrls(ctx, req.(*TLHelpGetRecentMeUrls))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetProxyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetProxyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetProxyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetProxyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetProxyData(ctx, req.(*TLHelpGetProxyData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetTermsOfServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfServiceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetTermsOfServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetTermsOfServiceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetTermsOfServiceUpdate(ctx, req.(*TLHelpGetTermsOfServiceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpAcceptTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpAcceptTermsOfService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpAcceptTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpAcceptTermsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpAcceptTermsOfService(ctx, req.(*TLHelpAcceptTermsOfService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetDeepLinkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetDeepLinkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetDeepLinkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetDeepLinkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetDeepLinkInfo(ctx, req.(*TLHelpGetDeepLinkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpTest(ctx, req.(*TLHelpTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetPassportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPassportConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetPassportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetPassportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetPassportConfig(ctx, req.(*TLHelpGetPassportConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetSupportName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupportName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetSupportName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetSupportName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetSupportName(ctx, req.(*TLHelpGetSupportName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetUserInfo(ctx, req.(*TLHelpGetUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpEditUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpEditUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpEditUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpEditUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpEditUserInfo(ctx, req.(*TLHelpEditUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetAppConfig(ctx, req.(*TLHelpGetAppConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetPromoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPromoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetPromoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetPromoData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetPromoData(ctx, req.(*TLHelpGetPromoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpHidePromoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpHidePromoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpHidePromoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpHidePromoData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpHidePromoData(ctx, req.(*TLHelpHidePromoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpDismissSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpDismissSuggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpDismissSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpDismissSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpDismissSuggestion(ctx, req.(*TLHelpDismissSuggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelpService_HelpGetCountriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCountriesList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServiceServer).HelpGetCountriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelpService/HelpGetCountriesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServiceServer).HelpGetCountriesList(ctx, req.(*TLHelpGetCountriesList))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCHelpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCHelpService",
	HandlerType: (*RPCHelpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getConfig",
			Handler:    _RPCHelpService_HelpGetConfig_Handler,
		},
		{
			MethodName: "help_getNearestDc",
			Handler:    _RPCHelpService_HelpGetNearestDc_Handler,
		},
		{
			MethodName: "help_getAppUpdate",
			Handler:    _RPCHelpService_HelpGetAppUpdate_Handler,
		},
		{
			MethodName: "help_saveAppLog",
			Handler:    _RPCHelpService_HelpSaveAppLog_Handler,
		},
		{
			MethodName: "help_getInviteText",
			Handler:    _RPCHelpService_HelpGetInviteText_Handler,
		},
		{
			MethodName: "help_getSupport",
			Handler:    _RPCHelpService_HelpGetSupport_Handler,
		},
		{
			MethodName: "help_getAppChangelog",
			Handler:    _RPCHelpService_HelpGetAppChangelog_Handler,
		},
		{
			MethodName: "help_getTermsOfService",
			Handler:    _RPCHelpService_HelpGetTermsOfService_Handler,
		},
		{
			MethodName: "help_setBotUpdatesStatus",
			Handler:    _RPCHelpService_HelpSetBotUpdatesStatus_Handler,
		},
		{
			MethodName: "help_getCdnConfig",
			Handler:    _RPCHelpService_HelpGetCdnConfig_Handler,
		},
		{
			MethodName: "help_getRecentMeUrls",
			Handler:    _RPCHelpService_HelpGetRecentMeUrls_Handler,
		},
		{
			MethodName: "help_getProxyData",
			Handler:    _RPCHelpService_HelpGetProxyData_Handler,
		},
		{
			MethodName: "help_getTermsOfServiceUpdate",
			Handler:    _RPCHelpService_HelpGetTermsOfServiceUpdate_Handler,
		},
		{
			MethodName: "help_acceptTermsOfService",
			Handler:    _RPCHelpService_HelpAcceptTermsOfService_Handler,
		},
		{
			MethodName: "help_getDeepLinkInfo",
			Handler:    _RPCHelpService_HelpGetDeepLinkInfo_Handler,
		},
		{
			MethodName: "help_test",
			Handler:    _RPCHelpService_HelpTest_Handler,
		},
		{
			MethodName: "help_getPassportConfig",
			Handler:    _RPCHelpService_HelpGetPassportConfig_Handler,
		},
		{
			MethodName: "help_getSupportName",
			Handler:    _RPCHelpService_HelpGetSupportName_Handler,
		},
		{
			MethodName: "help_getUserInfo",
			Handler:    _RPCHelpService_HelpGetUserInfo_Handler,
		},
		{
			MethodName: "help_editUserInfo",
			Handler:    _RPCHelpService_HelpEditUserInfo_Handler,
		},
		{
			MethodName: "help_getAppConfig",
			Handler:    _RPCHelpService_HelpGetAppConfig_Handler,
		},
		{
			MethodName: "help_getPromoData",
			Handler:    _RPCHelpService_HelpGetPromoData_Handler,
		},
		{
			MethodName: "help_hidePromoData",
			Handler:    _RPCHelpService_HelpHidePromoData_Handler,
		},
		{
			MethodName: "help_dismissSuggestion",
			Handler:    _RPCHelpService_HelpDismissSuggestion_Handler,
		},
		{
			MethodName: "help_getCountriesList",
			Handler:    _RPCHelpService_HelpGetCountriesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCHelpService_serviceDesc = map[string][]interface{}{
	"TLHelpGetConfig": {
		"/mtproto.RPCHelpService/help_getConfig",
		func() interface{} { return new(Config) },
		"HelpGetConfig",
	},
	"TLHelpGetNearestDc": {
		"/mtproto.RPCHelpService/help_getNearestDc",
		func() interface{} { return new(NearestDc) },
		"HelpGetNearestDc",
	},
	"TLHelpGetAppUpdate": {
		"/mtproto.RPCHelpService/help_getAppUpdate",
		func() interface{} { return new(Help_AppUpdate) },
		"HelpGetAppUpdate",
	},
	"TLHelpSaveAppLog": {
		"/mtproto.RPCHelpService/help_saveAppLog",
		func() interface{} { return new(Bool) },
		"HelpSaveAppLog",
	},
	"TLHelpGetInviteText": {
		"/mtproto.RPCHelpService/help_getInviteText",
		func() interface{} { return new(Help_InviteText) },
		"HelpGetInviteText",
	},
	"TLHelpGetSupport": {
		"/mtproto.RPCHelpService/help_getSupport",
		func() interface{} { return new(Help_Support) },
		"HelpGetSupport",
	},
	"TLHelpGetAppChangelog": {
		"/mtproto.RPCHelpService/help_getAppChangelog",
		func() interface{} { return new(Response_HelpGetAppChangelog) },
		"HelpGetAppChangelog",
	},
	"TLHelpGetTermsOfService": {
		"/mtproto.RPCHelpService/help_getTermsOfService",
		func() interface{} { return new(Help_TermsOfService) },
		"HelpGetTermsOfService",
	},
	"TLHelpSetBotUpdatesStatus": {
		"/mtproto.RPCHelpService/help_setBotUpdatesStatus",
		func() interface{} { return new(Bool) },
		"HelpSetBotUpdatesStatus",
	},
	"TLHelpGetCdnConfig": {
		"/mtproto.RPCHelpService/help_getCdnConfig",
		func() interface{} { return new(CdnConfig) },
		"HelpGetCdnConfig",
	},
	"TLHelpGetRecentMeUrls": {
		"/mtproto.RPCHelpService/help_getRecentMeUrls",
		func() interface{} { return new(Help_RecentMeUrls) },
		"HelpGetRecentMeUrls",
	},
	"TLHelpGetProxyData": {
		"/mtproto.RPCHelpService/help_getProxyData",
		func() interface{} { return new(Help_ProxyData) },
		"HelpGetProxyData",
	},
	"TLHelpGetTermsOfServiceUpdate": {
		"/mtproto.RPCHelpService/help_getTermsOfServiceUpdate",
		func() interface{} { return new(Help_TermsOfServiceUpdate) },
		"HelpGetTermsOfServiceUpdate",
	},
	"TLHelpAcceptTermsOfService": {
		"/mtproto.RPCHelpService/help_acceptTermsOfService",
		func() interface{} { return new(Bool) },
		"HelpAcceptTermsOfService",
	},
	"TLHelpGetDeepLinkInfo": {
		"/mtproto.RPCHelpService/help_getDeepLinkInfo",
		func() interface{} { return new(Help_DeepLinkInfo) },
		"HelpGetDeepLinkInfo",
	},
	"TLHelpTest": {
		"/mtproto.RPCHelpService/help_test",
		func() interface{} { return new(Bool) },
		"HelpTest",
	},
	"TLHelpGetPassportConfig": {
		"/mtproto.RPCHelpService/help_getPassportConfig",
		func() interface{} { return new(Help_PassportConfig) },
		"HelpGetPassportConfig",
	},
	"TLHelpGetSupportName": {
		"/mtproto.RPCHelpService/help_getSupportName",
		func() interface{} { return new(Help_SupportName) },
		"HelpGetSupportName",
	},
	"TLHelpGetUserInfo": {
		"/mtproto.RPCHelpService/help_getUserInfo",
		func() interface{} { return new(Help_UserInfo) },
		"HelpGetUserInfo",
	},
	"TLHelpEditUserInfo": {
		"/mtproto.RPCHelpService/help_editUserInfo",
		func() interface{} { return new(Help_UserInfo) },
		"HelpEditUserInfo",
	},
	"TLHelpGetAppConfig": {
		"/mtproto.RPCHelpService/help_getAppConfig",
		func() interface{} { return new(JSONValue) },
		"HelpGetAppConfig",
	},
	"TLHelpGetPromoData": {
		"/mtproto.RPCHelpService/help_getPromoData",
		func() interface{} { return new(Help_PromoData) },
		"HelpGetPromoData",
	},
	"TLHelpHidePromoData": {
		"/mtproto.RPCHelpService/help_hidePromoData",
		func() interface{} { return new(Bool) },
		"HelpHidePromoData",
	},
	"TLHelpDismissSuggestion": {
		"/mtproto.RPCHelpService/help_dismissSuggestion",
		func() interface{} { return new(Bool) },
		"HelpDismissSuggestion",
	},
	"TLHelpGetCountriesList": {
		"/mtproto.RPCHelpService/help_getCountriesList",
		func() interface{} { return new(Help_CountriesList) },
		"HelpGetCountriesList",
	},
}

// RPCLangpackServiceClient is the client API for RPCLangpackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCLangpackServiceClient interface {
	//  langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	//  langpack.getLangPack#f2f2330a lang_pack:string lang_code:string = LangPackDifference;
	//
	LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error)
	//  langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	//  langpack.getStrings#efea3803 lang_pack:string lang_code:string keys:Vector<string> = Vector<LangPackString>;
	//
	LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error)
	//  langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	//  langpack.getDifference#9d51e814 lang_code:string from_version:int = LangPackDifference;
	//  langpack.getDifference#cd984aa5 lang_pack:string lang_code:string from_version:int = LangPackDifference;
	//
	LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error)
	//  langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	//  langpack.getLanguages#42c6978f lang_pack:string = Vector<LangPackLanguage>;
	//
	LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error)
	//  langpack.getLanguage#6a596502 lang_pack:string lang_code:string = LangPackLanguage;
	//
	LangpackGetLanguage(ctx context.Context, in *TLLangpackGetLanguage, opts ...grpc.CallOption) (*LangPackLanguage, error)
}

type rPCLangpackServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCLangpackServiceClient(cc *grpc.ClientConn) RPCLangpackServiceClient {
	return &rPCLangpackServiceClient{cc}
}

func (c *rPCLangpackServiceClient) LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpackService/langpack_getLangPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackServiceClient) LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error) {
	out := new(Vector_LangPackString)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpackService/langpack_getStrings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackServiceClient) LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpackService/langpack_getDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackServiceClient) LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error) {
	out := new(Vector_LangPackLanguage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpackService/langpack_getLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackServiceClient) LangpackGetLanguage(ctx context.Context, in *TLLangpackGetLanguage, opts ...grpc.CallOption) (*LangPackLanguage, error) {
	out := new(LangPackLanguage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpackService/langpack_getLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCLangpackServiceServer is the server API for RPCLangpackService service.
type RPCLangpackServiceServer interface {
	//  langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	//  langpack.getLangPack#f2f2330a lang_pack:string lang_code:string = LangPackDifference;
	//
	LangpackGetLangPack(context.Context, *TLLangpackGetLangPack) (*LangPackDifference, error)
	//  langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	//  langpack.getStrings#efea3803 lang_pack:string lang_code:string keys:Vector<string> = Vector<LangPackString>;
	//
	LangpackGetStrings(context.Context, *TLLangpackGetStrings) (*Vector_LangPackString, error)
	//  langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	//  langpack.getDifference#9d51e814 lang_code:string from_version:int = LangPackDifference;
	//  langpack.getDifference#cd984aa5 lang_pack:string lang_code:string from_version:int = LangPackDifference;
	//
	LangpackGetDifference(context.Context, *TLLangpackGetDifference) (*LangPackDifference, error)
	//  langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	//  langpack.getLanguages#42c6978f lang_pack:string = Vector<LangPackLanguage>;
	//
	LangpackGetLanguages(context.Context, *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error)
	//  langpack.getLanguage#6a596502 lang_pack:string lang_code:string = LangPackLanguage;
	//
	LangpackGetLanguage(context.Context, *TLLangpackGetLanguage) (*LangPackLanguage, error)
}

// UnimplementedRPCLangpackServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCLangpackServiceServer struct {
}

func (*UnimplementedRPCLangpackServiceServer) LangpackGetLangPack(ctx context.Context, req *TLLangpackGetLangPack) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLangPack not implemented")
}
func (*UnimplementedRPCLangpackServiceServer) LangpackGetStrings(ctx context.Context, req *TLLangpackGetStrings) (*Vector_LangPackString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetStrings not implemented")
}
func (*UnimplementedRPCLangpackServiceServer) LangpackGetDifference(ctx context.Context, req *TLLangpackGetDifference) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetDifference not implemented")
}
func (*UnimplementedRPCLangpackServiceServer) LangpackGetLanguages(ctx context.Context, req *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguages not implemented")
}
func (*UnimplementedRPCLangpackServiceServer) LangpackGetLanguage(ctx context.Context, req *TLLangpackGetLanguage) (*LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguage not implemented")
}

func RegisterRPCLangpackServiceServer(s *grpc.Server, srv RPCLangpackServiceServer) {
	s.RegisterService(&_RPCLangpackService_serviceDesc, srv)
}

func _RPCLangpackService_LangpackGetLangPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLangPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServiceServer).LangpackGetLangPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpackService/LangpackGetLangPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServiceServer).LangpackGetLangPack(ctx, req.(*TLLangpackGetLangPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpackService_LangpackGetStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServiceServer).LangpackGetStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpackService/LangpackGetStrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServiceServer).LangpackGetStrings(ctx, req.(*TLLangpackGetStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpackService_LangpackGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServiceServer).LangpackGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpackService/LangpackGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServiceServer).LangpackGetDifference(ctx, req.(*TLLangpackGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpackService_LangpackGetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServiceServer).LangpackGetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpackService/LangpackGetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServiceServer).LangpackGetLanguages(ctx, req.(*TLLangpackGetLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpackService_LangpackGetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServiceServer).LangpackGetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpackService/LangpackGetLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServiceServer).LangpackGetLanguage(ctx, req.(*TLLangpackGetLanguage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCLangpackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCLangpackService",
	HandlerType: (*RPCLangpackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "langpack_getLangPack",
			Handler:    _RPCLangpackService_LangpackGetLangPack_Handler,
		},
		{
			MethodName: "langpack_getStrings",
			Handler:    _RPCLangpackService_LangpackGetStrings_Handler,
		},
		{
			MethodName: "langpack_getDifference",
			Handler:    _RPCLangpackService_LangpackGetDifference_Handler,
		},
		{
			MethodName: "langpack_getLanguages",
			Handler:    _RPCLangpackService_LangpackGetLanguages_Handler,
		},
		{
			MethodName: "langpack_getLanguage",
			Handler:    _RPCLangpackService_LangpackGetLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCLangpackService_serviceDesc = map[string][]interface{}{
	"TLLangpackGetLangPack": {
		"/mtproto.RPCLangpackService/langpack_getLangPack",
		func() interface{} { return new(LangPackDifference) },
		"LangpackGetLangPack",
	},
	"TLLangpackGetStrings": {
		"/mtproto.RPCLangpackService/langpack_getStrings",
		func() interface{} { return new(Vector_LangPackString) },
		"LangpackGetStrings",
	},
	"TLLangpackGetDifference": {
		"/mtproto.RPCLangpackService/langpack_getDifference",
		func() interface{} { return new(LangPackDifference) },
		"LangpackGetDifference",
	},
	"TLLangpackGetLanguages": {
		"/mtproto.RPCLangpackService/langpack_getLanguages",
		func() interface{} { return new(Vector_LangPackLanguage) },
		"LangpackGetLanguages",
	},
	"TLLangpackGetLanguage": {
		"/mtproto.RPCLangpackService/langpack_getLanguage",
		func() interface{} { return new(LangPackLanguage) },
		"LangpackGetLanguage",
	},
}

// RPCMessagesServiceClient is the client API for RPCMessagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCMessagesServiceClient interface {
	//  messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	//  messages.getMessages#63c66506 id:Vector<InputMessage> = messages.Messages;
	//
	MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	//  messages.getDialogs#6b47f94d offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	//  messages.getDialogs#b098aee6 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	//  messages.getDialogs#a0ee3b73 flags:# exclude_pinned:flags.0?true folder_id:flags.1?int offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	//
	MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	//  messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//  messages.getHistory#dcbb8260 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//
	MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//  messages.search#f288a275 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages;
	//  messages.search#d4569248 flags:# important_only:flags.0?true peer:InputPeer q:string filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages;
	//  messages.search#8614ef68 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//  messages.search#4e17810b flags:# peer:InputPeer q:string from_id:flags.0?InputUser top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//  messages.search#c352eec flags:# peer:InputPeer q:string from_id:flags.0?InputPeer top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//
	MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	//  messages.readHistory#b04f2510 peer:InputPeer max_id:int offset:int = messages.AffectedHistory;
	//
	MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Response_MessagesReadHistory, error)
	//  messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	//  messages.deleteMessages#a5f18925 id:Vector<int> = messages.AffectedMessages;
	//
	MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	//  messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	//
	MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error)
	//  messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	//  messages.setTyping#58943ee2 flags:# peer:InputPeer top_msg_id:flags.0?int action:SendMessageAction = Bool;
	//
	MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error)
	//  messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.sendMessage#520c3870 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	//
	MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error)
	//  messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	//  messages.sendMedia#b8d1262b flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.sendMedia#3491eba9 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	//
	MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error)
	//  messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	//  messages.forwardMessages#d9fee60e flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer schedule_date:flags.10?int = Updates;
	//
	MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error)
	//  messages.reportSpam#cf1592db peer:InputPeer = Bool;
	//
	MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error)
	//  messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	//
	MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	//
	MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error)
	//  messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	//
	MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	//
	MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	//  messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	//
	MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error)
	//  messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	//
	MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error)
	//  messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	//
	MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error)
	//  messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	//
	MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error)
	//  messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	//
	MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error)
	//  messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	//
	MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	//
	MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error)
	//  messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	//
	MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	//  messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	//
	MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	//  messages.discardEncryption#edd923c5 chat_id:int = Bool;
	//
	MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error)
	//  messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	//
	MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error)
	//  messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	//
	MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error)
	//  messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	//  messages.sendEncrypted#44fa7a15 flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	//
	MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	//  messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	//  messages.sendEncryptedFile#5559481d flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	//
	MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	//  messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	//
	MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	//  messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	//
	MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error)
	//  messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	//
	MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error)
	//  messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	//
	MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	//  messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	//
	MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	//  messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	//  messages.getWebPagePreview#8b68b0cc flags:# message:string entities:flags.3?Vector<MessageEntity> = MessageMedia;
	//
	MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error)
	//  messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	//  messages.exportChatInvite#df7534c peer:InputPeer = ExportedChatInvite;
	//
	MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	//  messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	//
	MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error)
	//  messages.importChatInvite#6c50051c hash:string = Updates;
	//
	MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	//
	MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	//  messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	//  messages.installStickerSet#7b30c3a6 stickerset:InputStickerSet disabled:Bool = Bool;
	//
	MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Response_MessagesInstallStickerSet, error)
	//  messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	//
	MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error)
	//  messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	//
	MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	//  messages.getMessagesViews#5784d3e1 peer:InputPeer id:Vector<int> increment:Bool = messages.MessageViews;
	//
	MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*Response_MessagesGetMessagesViews, error)
	//  messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	//
	MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error)
	//  messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	//
	MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error)
	//  messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	//
	MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error)
	//  messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//  messages.searchGlobal#f79c611 q:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//  messages.searchGlobal#bf7225a4 flags:# folder_id:flags.0?int q:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//  messages.searchGlobal#4bc6589a flags:# folder_id:flags.0?int q:string filter:MessagesFilter min_date:int max_date:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//
	MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	//  messages.reorderStickerSets#9fcfbc30 order:Vector<long> = Bool;
	//
	MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	//
	MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error)
	//  messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	//
	MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error)
	//  messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	//
	MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error)
	//  messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	//
	MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	//
	MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error)
	//  messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	//
	MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error)
	//  messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	//  messages.sendInlineBotResult#220815b0 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string schedule_date:flags.10?int = Updates;
	//
	MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	//
	MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error)
	//  messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.editMessage#c000e4c8 flags:# no_webpage:flags.1?true stop_geo_live:flags.12?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> geo_point:flags.13?InputGeoPoint = Updates;
	//  messages.editMessage#d116f31e flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.editMessage#48f71778 flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int = Updates;
	//
	MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error)
	//  messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	//  messages.editInlineBotMessage#adc3e828 flags:# no_webpage:flags.1?true stop_geo_live:flags.12?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> geo_point:flags.13?InputGeoPoint = Bool;
	//  messages.editInlineBotMessage#83557dba flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	//
	MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	//  messages.getBotCallbackAnswer#a6e94f04 peer:InputPeer msg_id:int data:bytes = messages.BotCallbackAnswer;
	//  messages.getBotCallbackAnswer#9342ca07 flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes password:flags.2?InputCheckPasswordSRP = messages.BotCallbackAnswer;
	//
	MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error)
	//  messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	//  messages.setBotCallbackAnswer#481c591a flags:# alert:flags.1?true query_id:long message:flags.0?string = Bool;
	//
	MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	//  messages.getPeerDialogs#e470bcfd peers:Vector<InputDialogPeer> = messages.PeerDialogs;
	//
	MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	//  messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	//
	MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getAllDrafts#6a3f8d65 = Updates;
	//
	MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	//
	MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	//  messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	//
	MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	//
	MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error)
	//  messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	//  messages.saveRecentSticker#348e39bf id:InputDocument unsave:Bool = Bool;
	//
	MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error)
	//  messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	//
	MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	//
	MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error)
	//  messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	//
	MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	//  messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	//
	MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error)
	//  messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	//
	MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error)
	//  messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	//
	MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	//
	MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	//  messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	//
	MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	//  messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	//
	MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	//
	MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	//  messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	//
	MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error)
	//  messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	//  messages.toggleDialogPin#a731e257 flags:# pinned:flags.0?true peer:InputDialogPeer = Bool;
	//
	MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error)
	//  messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	//  messages.reorderPinnedDialogs#5b51d63f flags:# force:flags.0?true order:Vector<InputDialogPeer> = Bool;
	//  messages.reorderPinnedDialogs#3b1adf37 flags:# force:flags.0?true folder_id:int order:Vector<InputDialogPeer> = Bool;
	//
	MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	//  messages.getPinnedDialogs#d6b94df2 folder_id:int = messages.PeerDialogs;
	//
	MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	//  messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	//
	MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error)
	//  messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	//
	MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error)
	//  messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	//
	MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error)
	//  messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	//
	MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	//
	MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error)
	//  messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	//
	MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//
	MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.deleteHistory#b7c13bd9 peer:InputPeer max_id:int = messages.AffectedHistory;
	//  messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true revoke:flags.1?true peer:InputPeer max_id:int = messages.AffectedHistory;
	//
	MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	//  messages.sendBroadcast#bf73f4da contacts:Vector<InputUser> random_id:Vector<long> message:string media:InputMedia = Updates;
	//
	MessagesSendBroadcast(ctx context.Context, in *TLMessagesSendBroadcast, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getStickers#ae22e045 emoticon:string hash:string = messages.Stickers;
	//  messages.getStickers#43d4f2c emoticon:string hash:int = messages.Stickers;
	//
	MessagesGetStickers(ctx context.Context, in *TLMessagesGetStickers, opts ...grpc.CallOption) (*Messages_Stickers, error)
	//  messages.getRecentLocations#249431e2 peer:InputPeer limit:int = messages.Messages;
	//  messages.getRecentLocations#bbc45b09 peer:InputPeer limit:int hash:int = messages.Messages;
	//
	MessagesGetRecentLocations(ctx context.Context, in *TLMessagesGetRecentLocations, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.report#bd82b658 peer:InputPeer id:Vector<int> reason:ReportReason = Bool;
	//
	MessagesReport(ctx context.Context, in *TLMessagesReport, opts ...grpc.CallOption) (*Bool, error)
	//  messages.readMentions#f0189d3 peer:InputPeer = messages.AffectedHistory;
	//
	MessagesReadMentions(ctx context.Context, in *TLMessagesReadMentions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	//  messages.sendMultiMedia#2095512f flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> = Updates;
	//  messages.sendMultiMedia#cc0110cb flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int = Updates;
	//
	MessagesSendMultiMedia(ctx context.Context, in *TLMessagesSendMultiMedia, opts ...grpc.CallOption) (*Updates, error)
	//  messages.uploadEncryptedFile#5057c497 peer:InputEncryptedChat file:InputEncryptedFile = EncryptedFile;
	//
	MessagesUploadEncryptedFile(ctx context.Context, in *TLMessagesUploadEncryptedFile, opts ...grpc.CallOption) (*EncryptedFile, error)
	//  messages.searchStickerSets#c2b7d08b flags:# exclude_featured:flags.0?true q:string hash:int = messages.FoundStickerSets;
	//
	MessagesSearchStickerSets(ctx context.Context, in *TLMessagesSearchStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error)
	//  messages.getSplitRanges#1cff7e08 = Vector<MessageRange>;
	//
	MessagesGetSplitRanges(ctx context.Context, in *TLMessagesGetSplitRanges, opts ...grpc.CallOption) (*Vector_MessageRange, error)
	//  messages.markDialogUnread#c286d98f flags:# unread:flags.0?true peer:InputDialogPeer = Bool;
	//
	MessagesMarkDialogUnread(ctx context.Context, in *TLMessagesMarkDialogUnread, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getDialogUnreadMarks#22e24e22 = Vector<DialogPeer>;
	//
	MessagesGetDialogUnreadMarks(ctx context.Context, in *TLMessagesGetDialogUnreadMarks, opts ...grpc.CallOption) (*Vector_DialogPeer, error)
	//  messages.clearAllDrafts#7e58ee9c = Bool;
	//
	MessagesClearAllDrafts(ctx context.Context, in *TLMessagesClearAllDrafts, opts ...grpc.CallOption) (*Bool, error)
	//  messages.updatePinnedMessage#d2aaf7ec flags:# silent:flags.0?true peer:InputPeer id:int = Updates;
	//
	MessagesUpdatePinnedMessage(ctx context.Context, in *TLMessagesUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error)
	//  messages.sendVote#10ea6184 peer:InputPeer msg_id:int options:Vector<bytes> = Updates;
	//
	MessagesSendVote(ctx context.Context, in *TLMessagesSendVote, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getPollResults#73bb643b peer:InputPeer msg_id:int = Updates;
	//
	MessagesGetPollResults(ctx context.Context, in *TLMessagesGetPollResults, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getOnlines#6e2be050 peer:InputPeer = ChatOnlines;
	//
	MessagesGetOnlines(ctx context.Context, in *TLMessagesGetOnlines, opts ...grpc.CallOption) (*ChatOnlines, error)
	//  messages.getStatsURL#83f6c0cd peer:InputPeer = StatsURL;
	//  messages.getStatsURL#812c2ae6 flags:# dark:flags.0?true peer:InputPeer params:string = StatsURL;
	//
	MessagesGetStatsURL(ctx context.Context, in *TLMessagesGetStatsURL, opts ...grpc.CallOption) (*StatsURL, error)
	//  messages.editChatAbout#def60797 peer:InputPeer about:string = Bool;
	//
	MessagesEditChatAbout(ctx context.Context, in *TLMessagesEditChatAbout, opts ...grpc.CallOption) (*Bool, error)
	//  messages.editChatDefaultBannedRights#a5866b41 peer:InputPeer banned_rights:ChatBannedRights = Updates;
	//
	MessagesEditChatDefaultBannedRights(ctx context.Context, in *TLMessagesEditChatDefaultBannedRights, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getEmojiKeywords#35a0e062 lang_code:string = EmojiKeywordsDifference;
	//
	MessagesGetEmojiKeywords(ctx context.Context, in *TLMessagesGetEmojiKeywords, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error)
	//  messages.getEmojiKeywordsDifference#1508b6af lang_code:string from_version:int = EmojiKeywordsDifference;
	//
	MessagesGetEmojiKeywordsDifference(ctx context.Context, in *TLMessagesGetEmojiKeywordsDifference, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error)
	//  messages.getEmojiURL#d5b10c26 lang_code:string = EmojiURL;
	//
	MessagesGetEmojiURL(ctx context.Context, in *TLMessagesGetEmojiURL, opts ...grpc.CallOption) (*EmojiURL, error)
	//  messages.getEmojiKeywordsLanguages#4e9963b2 lang_codes:Vector<string> = Vector<EmojiLanguage>;
	//
	MessagesGetEmojiKeywordsLanguages(ctx context.Context, in *TLMessagesGetEmojiKeywordsLanguages, opts ...grpc.CallOption) (*Vector_EmojiLanguage, error)
	//  messages.getSearchCounters#732eef00 peer:InputPeer filters:Vector<MessagesFilter> = Vector<messages.SearchCounter>;
	//
	MessagesGetSearchCounters(ctx context.Context, in *TLMessagesGetSearchCounters, opts ...grpc.CallOption) (*VectorMessages_SearchCounter, error)
	//  messages.requestUrlAuth#e33f5613 peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	//
	MessagesRequestUrlAuth(ctx context.Context, in *TLMessagesRequestUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error)
	//  messages.acceptUrlAuth#f729ea98 flags:# write_allowed:flags.0?true peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	//
	MessagesAcceptUrlAuth(ctx context.Context, in *TLMessagesAcceptUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error)
	//  messages.hidePeerSettingsBar#4facb138 peer:InputPeer = Bool;
	//
	MessagesHidePeerSettingsBar(ctx context.Context, in *TLMessagesHidePeerSettingsBar, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getScheduledHistory#e2c2685b peer:InputPeer hash:int = messages.Messages;
	//
	MessagesGetScheduledHistory(ctx context.Context, in *TLMessagesGetScheduledHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.getScheduledMessages#bdbb0464 peer:InputPeer id:Vector<int> = messages.Messages;
	//
	MessagesGetScheduledMessages(ctx context.Context, in *TLMessagesGetScheduledMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.sendScheduledMessages#bd38850a peer:InputPeer id:Vector<int> = Updates;
	//
	MessagesSendScheduledMessages(ctx context.Context, in *TLMessagesSendScheduledMessages, opts ...grpc.CallOption) (*Updates, error)
	//  messages.deleteScheduledMessages#59ae2b16 peer:InputPeer id:Vector<int> = Updates;
	//
	MessagesDeleteScheduledMessages(ctx context.Context, in *TLMessagesDeleteScheduledMessages, opts ...grpc.CallOption) (*Updates, error)
	//  messages.getPollVotes#b86e380e flags:# peer:InputPeer id:int option:flags.0?bytes offset:flags.1?string limit:int = messages.VotesList;
	//
	MessagesGetPollVotes(ctx context.Context, in *TLMessagesGetPollVotes, opts ...grpc.CallOption) (*Messages_VotesList, error)
	//  messages.toggleStickerSets#b5052fea flags:# uninstall:flags.0?true archive:flags.1?true unarchive:flags.2?true stickersets:Vector<InputStickerSet> = Bool;
	//
	MessagesToggleStickerSets(ctx context.Context, in *TLMessagesToggleStickerSets, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getDialogFilters#f19ed96d = Vector<DialogFilter>;
	//
	MessagesGetDialogFilters(ctx context.Context, in *TLMessagesGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilter, error)
	//  messages.getSuggestedDialogFilters#a29cd42c = Vector<DialogFilterSuggested>;
	//
	MessagesGetSuggestedDialogFilters(ctx context.Context, in *TLMessagesGetSuggestedDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterSuggested, error)
	//  messages.updateDialogFilter#1ad4a04a flags:# id:int filter:flags.0?DialogFilter = Bool;
	//
	MessagesUpdateDialogFilter(ctx context.Context, in *TLMessagesUpdateDialogFilter, opts ...grpc.CallOption) (*Bool, error)
	//  messages.updateDialogFiltersOrder#c563c1e4 order:Vector<int> = Bool;
	//
	MessagesUpdateDialogFiltersOrder(ctx context.Context, in *TLMessagesUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*Bool, error)
	//  messages.getOldFeaturedStickers#5fe7025b offset:int limit:int hash:int = messages.FeaturedStickers;
	//
	MessagesGetOldFeaturedStickers(ctx context.Context, in *TLMessagesGetOldFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	//  messages.getReplies#24b581ba peer:InputPeer msg_id:int offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//
	MessagesGetReplies(ctx context.Context, in *TLMessagesGetReplies, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  messages.getDiscussionMessage#446972fd peer:InputPeer msg_id:int = messages.DiscussionMessage;
	//
	MessagesGetDiscussionMessage(ctx context.Context, in *TLMessagesGetDiscussionMessage, opts ...grpc.CallOption) (*Messages_DiscussionMessage, error)
	//  messages.readDiscussion#f731a9f4 peer:InputPeer msg_id:int read_max_id:int = Bool;
	//
	MessagesReadDiscussion(ctx context.Context, in *TLMessagesReadDiscussion, opts ...grpc.CallOption) (*Bool, error)
	//  messages.unpinAllMessages#f025bc8b peer:InputPeer = messages.AffectedHistory;
	//
	MessagesUnpinAllMessages(ctx context.Context, in *TLMessagesUnpinAllMessages, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
}

type rPCMessagesServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCMessagesServiceClient(cc *grpc.ClientConn) RPCMessagesServiceClient {
	return &rPCMessagesServiceClient{cc}
}

func (c *rPCMessagesServiceClient) MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	out := new(Messages_Dialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Response_MessagesReadHistory, error) {
	out := new(Response_MessagesReadHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_readHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_deleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error) {
	out := new(Vector_ReceivedNotifyMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_receivedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_forwardMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_reportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_hideReportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error) {
	out := new(PeerSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getPeerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getFullChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_editChatTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_editChatPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_addChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_deleteChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_createChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_forwardMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error) {
	out := new(Messages_DhConfig)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getDhConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_requestEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_acceptEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_discardEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setEncryptedTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_readEncryptedHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendEncrypted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendEncryptedFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendEncryptedService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error) {
	out := new(VectorLong)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_receivedQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_reportEncryptedSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_readMessageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getAllStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error) {
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getWebPagePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_exportChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error) {
	out := new(ChatInvite)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_checkChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_importChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Response_MessagesInstallStickerSet, error) {
	out := new(Response_MessagesInstallStickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_installStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_uninstallStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_startBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*Response_MessagesGetMessagesViews, error) {
	out := new(Response_MessagesGetMessagesViews)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getMessagesViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_toggleChatAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_editChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_migrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_searchGlobal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_reorderStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getDocumentByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error) {
	out := new(Messages_FoundGifs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_searchGifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error) {
	out := new(Messages_SavedGifs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getSavedGifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_saveGif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error) {
	out := new(Messages_BotResults)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getInlineBotResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setInlineBotResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendInlineBotResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error) {
	out := new(Messages_MessageEditData)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getMessageEditData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_editMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_editInlineBotMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error) {
	out := new(Messages_BotCallbackAnswer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getBotCallbackAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setBotCallbackAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getPeerDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_saveDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getAllDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_readFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error) {
	out := new(Messages_RecentStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getRecentStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_saveRecentSticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_clearRecentStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error) {
	out := new(Messages_ArchivedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getArchivedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getMaskStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error) {
	out := new(Vector_StickerSetCovered)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getAttachedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setInlineGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getGameHighScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getInlineGameHighScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getCommonChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getAllChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error) {
	out := new(WebPage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_toggleDialogPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_reorderPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setBotShippingResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_setBotPrecheckoutResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error) {
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_uploadMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendScreenshotNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error) {
	out := new(Messages_FavedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getFavedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_faveSticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getUnreadMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_deleteHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendBroadcast(ctx context.Context, in *TLMessagesSendBroadcast, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetStickers(ctx context.Context, in *TLMessagesGetStickers, opts ...grpc.CallOption) (*Messages_Stickers, error) {
	out := new(Messages_Stickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetRecentLocations(ctx context.Context, in *TLMessagesGetRecentLocations, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getRecentLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReport(ctx context.Context, in *TLMessagesReport, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReadMentions(ctx context.Context, in *TLMessagesReadMentions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_readMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendMultiMedia(ctx context.Context, in *TLMessagesSendMultiMedia, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendMultiMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesUploadEncryptedFile(ctx context.Context, in *TLMessagesUploadEncryptedFile, opts ...grpc.CallOption) (*EncryptedFile, error) {
	out := new(EncryptedFile)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_uploadEncryptedFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSearchStickerSets(ctx context.Context, in *TLMessagesSearchStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error) {
	out := new(Messages_FoundStickerSets)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_searchStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetSplitRanges(ctx context.Context, in *TLMessagesGetSplitRanges, opts ...grpc.CallOption) (*Vector_MessageRange, error) {
	out := new(Vector_MessageRange)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getSplitRanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesMarkDialogUnread(ctx context.Context, in *TLMessagesMarkDialogUnread, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_markDialogUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetDialogUnreadMarks(ctx context.Context, in *TLMessagesGetDialogUnreadMarks, opts ...grpc.CallOption) (*Vector_DialogPeer, error) {
	out := new(Vector_DialogPeer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getDialogUnreadMarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesClearAllDrafts(ctx context.Context, in *TLMessagesClearAllDrafts, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_clearAllDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesUpdatePinnedMessage(ctx context.Context, in *TLMessagesUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_updatePinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendVote(ctx context.Context, in *TLMessagesSendVote, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetPollResults(ctx context.Context, in *TLMessagesGetPollResults, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getPollResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetOnlines(ctx context.Context, in *TLMessagesGetOnlines, opts ...grpc.CallOption) (*ChatOnlines, error) {
	out := new(ChatOnlines)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getOnlines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetStatsURL(ctx context.Context, in *TLMessagesGetStatsURL, opts ...grpc.CallOption) (*StatsURL, error) {
	out := new(StatsURL)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getStatsURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesEditChatAbout(ctx context.Context, in *TLMessagesEditChatAbout, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_editChatAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesEditChatDefaultBannedRights(ctx context.Context, in *TLMessagesEditChatDefaultBannedRights, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_editChatDefaultBannedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetEmojiKeywords(ctx context.Context, in *TLMessagesGetEmojiKeywords, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error) {
	out := new(EmojiKeywordsDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getEmojiKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetEmojiKeywordsDifference(ctx context.Context, in *TLMessagesGetEmojiKeywordsDifference, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error) {
	out := new(EmojiKeywordsDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getEmojiKeywordsDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetEmojiURL(ctx context.Context, in *TLMessagesGetEmojiURL, opts ...grpc.CallOption) (*EmojiURL, error) {
	out := new(EmojiURL)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getEmojiURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetEmojiKeywordsLanguages(ctx context.Context, in *TLMessagesGetEmojiKeywordsLanguages, opts ...grpc.CallOption) (*Vector_EmojiLanguage, error) {
	out := new(Vector_EmojiLanguage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getEmojiKeywordsLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetSearchCounters(ctx context.Context, in *TLMessagesGetSearchCounters, opts ...grpc.CallOption) (*VectorMessages_SearchCounter, error) {
	out := new(VectorMessages_SearchCounter)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getSearchCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesRequestUrlAuth(ctx context.Context, in *TLMessagesRequestUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error) {
	out := new(UrlAuthResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_requestUrlAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesAcceptUrlAuth(ctx context.Context, in *TLMessagesAcceptUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error) {
	out := new(UrlAuthResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_acceptUrlAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesHidePeerSettingsBar(ctx context.Context, in *TLMessagesHidePeerSettingsBar, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_hidePeerSettingsBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetScheduledHistory(ctx context.Context, in *TLMessagesGetScheduledHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getScheduledHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetScheduledMessages(ctx context.Context, in *TLMessagesGetScheduledMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getScheduledMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesSendScheduledMessages(ctx context.Context, in *TLMessagesSendScheduledMessages, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_sendScheduledMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesDeleteScheduledMessages(ctx context.Context, in *TLMessagesDeleteScheduledMessages, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_deleteScheduledMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetPollVotes(ctx context.Context, in *TLMessagesGetPollVotes, opts ...grpc.CallOption) (*Messages_VotesList, error) {
	out := new(Messages_VotesList)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getPollVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesToggleStickerSets(ctx context.Context, in *TLMessagesToggleStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_toggleStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetDialogFilters(ctx context.Context, in *TLMessagesGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilter, error) {
	out := new(Vector_DialogFilter)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getDialogFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetSuggestedDialogFilters(ctx context.Context, in *TLMessagesGetSuggestedDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterSuggested, error) {
	out := new(Vector_DialogFilterSuggested)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getSuggestedDialogFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesUpdateDialogFilter(ctx context.Context, in *TLMessagesUpdateDialogFilter, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_updateDialogFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesUpdateDialogFiltersOrder(ctx context.Context, in *TLMessagesUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_updateDialogFiltersOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetOldFeaturedStickers(ctx context.Context, in *TLMessagesGetOldFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getOldFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetReplies(ctx context.Context, in *TLMessagesGetReplies, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getReplies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesGetDiscussionMessage(ctx context.Context, in *TLMessagesGetDiscussionMessage, opts ...grpc.CallOption) (*Messages_DiscussionMessage, error) {
	out := new(Messages_DiscussionMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_getDiscussionMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesReadDiscussion(ctx context.Context, in *TLMessagesReadDiscussion, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_readDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesServiceClient) MessagesUnpinAllMessages(ctx context.Context, in *TLMessagesUnpinAllMessages, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessagesService/messages_unpinAllMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMessagesServiceServer is the server API for RPCMessagesService service.
type RPCMessagesServiceServer interface {
	//  messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	//  messages.getMessages#63c66506 id:Vector<InputMessage> = messages.Messages;
	//
	MessagesGetMessages(context.Context, *TLMessagesGetMessages) (*Messages_Messages, error)
	//  messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	//  messages.getDialogs#6b47f94d offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	//  messages.getDialogs#b098aee6 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	//  messages.getDialogs#a0ee3b73 flags:# exclude_pinned:flags.0?true folder_id:flags.1?int offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	//
	MessagesGetDialogs(context.Context, *TLMessagesGetDialogs) (*Messages_Dialogs, error)
	//  messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//  messages.getHistory#dcbb8260 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//
	MessagesGetHistory(context.Context, *TLMessagesGetHistory) (*Messages_Messages, error)
	//  messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//  messages.search#f288a275 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages;
	//  messages.search#d4569248 flags:# important_only:flags.0?true peer:InputPeer q:string filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages;
	//  messages.search#8614ef68 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//  messages.search#4e17810b flags:# peer:InputPeer q:string from_id:flags.0?InputUser top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//  messages.search#c352eec flags:# peer:InputPeer q:string from_id:flags.0?InputPeer top_msg_id:flags.1?int filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//
	MessagesSearch(context.Context, *TLMessagesSearch) (*Messages_Messages, error)
	//  messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	//  messages.readHistory#b04f2510 peer:InputPeer max_id:int offset:int = messages.AffectedHistory;
	//
	MessagesReadHistory(context.Context, *TLMessagesReadHistory) (*Response_MessagesReadHistory, error)
	//  messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	//  messages.deleteMessages#a5f18925 id:Vector<int> = messages.AffectedMessages;
	//
	MessagesDeleteMessages(context.Context, *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error)
	//  messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	//
	MessagesReceivedMessages(context.Context, *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error)
	//  messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	//  messages.setTyping#58943ee2 flags:# peer:InputPeer top_msg_id:flags.0?int action:SendMessageAction = Bool;
	//
	MessagesSetTyping(context.Context, *TLMessagesSetTyping) (*Bool, error)
	//  messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.sendMessage#520c3870 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	//
	MessagesSendMessage(context.Context, *TLMessagesSendMessage) (*Updates, error)
	//  messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	//  messages.sendMedia#b8d1262b flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.sendMedia#3491eba9 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	//
	MessagesSendMedia(context.Context, *TLMessagesSendMedia) (*Updates, error)
	//  messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	//  messages.forwardMessages#d9fee60e flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer schedule_date:flags.10?int = Updates;
	//
	MessagesForwardMessages(context.Context, *TLMessagesForwardMessages) (*Updates, error)
	//  messages.reportSpam#cf1592db peer:InputPeer = Bool;
	//
	MessagesReportSpam(context.Context, *TLMessagesReportSpam) (*Bool, error)
	//  messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	//
	MessagesHideReportSpam(context.Context, *TLMessagesHideReportSpam) (*Bool, error)
	//  messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	//
	MessagesGetPeerSettings(context.Context, *TLMessagesGetPeerSettings) (*PeerSettings, error)
	//  messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	//
	MessagesGetChats(context.Context, *TLMessagesGetChats) (*Messages_Chats, error)
	//  messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	//
	MessagesGetFullChat(context.Context, *TLMessagesGetFullChat) (*Messages_ChatFull, error)
	//  messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	//
	MessagesEditChatTitle(context.Context, *TLMessagesEditChatTitle) (*Updates, error)
	//  messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	//
	MessagesEditChatPhoto(context.Context, *TLMessagesEditChatPhoto) (*Updates, error)
	//  messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	//
	MessagesAddChatUser(context.Context, *TLMessagesAddChatUser) (*Updates, error)
	//  messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	//
	MessagesDeleteChatUser(context.Context, *TLMessagesDeleteChatUser) (*Updates, error)
	//  messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	//
	MessagesCreateChat(context.Context, *TLMessagesCreateChat) (*Updates, error)
	//  messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	//
	MessagesForwardMessage(context.Context, *TLMessagesForwardMessage) (*Updates, error)
	//  messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	//
	MessagesGetDhConfig(context.Context, *TLMessagesGetDhConfig) (*Messages_DhConfig, error)
	//  messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	//
	MessagesRequestEncryption(context.Context, *TLMessagesRequestEncryption) (*EncryptedChat, error)
	//  messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	//
	MessagesAcceptEncryption(context.Context, *TLMessagesAcceptEncryption) (*EncryptedChat, error)
	//  messages.discardEncryption#edd923c5 chat_id:int = Bool;
	//
	MessagesDiscardEncryption(context.Context, *TLMessagesDiscardEncryption) (*Bool, error)
	//  messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	//
	MessagesSetEncryptedTyping(context.Context, *TLMessagesSetEncryptedTyping) (*Bool, error)
	//  messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	//
	MessagesReadEncryptedHistory(context.Context, *TLMessagesReadEncryptedHistory) (*Bool, error)
	//  messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	//  messages.sendEncrypted#44fa7a15 flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	//
	MessagesSendEncrypted(context.Context, *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error)
	//  messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	//  messages.sendEncryptedFile#5559481d flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	//
	MessagesSendEncryptedFile(context.Context, *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error)
	//  messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	//
	MessagesSendEncryptedService(context.Context, *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error)
	//  messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	//
	MessagesReceivedQueue(context.Context, *TLMessagesReceivedQueue) (*VectorLong, error)
	//  messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	//
	MessagesReportEncryptedSpam(context.Context, *TLMessagesReportEncryptedSpam) (*Bool, error)
	//  messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	//
	MessagesReadMessageContents(context.Context, *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error)
	//  messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	//
	MessagesGetAllStickers(context.Context, *TLMessagesGetAllStickers) (*Messages_AllStickers, error)
	//  messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	//  messages.getWebPagePreview#8b68b0cc flags:# message:string entities:flags.3?Vector<MessageEntity> = MessageMedia;
	//
	MessagesGetWebPagePreview(context.Context, *TLMessagesGetWebPagePreview) (*MessageMedia, error)
	//  messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	//  messages.exportChatInvite#df7534c peer:InputPeer = ExportedChatInvite;
	//
	MessagesExportChatInvite(context.Context, *TLMessagesExportChatInvite) (*ExportedChatInvite, error)
	//  messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	//
	MessagesCheckChatInvite(context.Context, *TLMessagesCheckChatInvite) (*ChatInvite, error)
	//  messages.importChatInvite#6c50051c hash:string = Updates;
	//
	MessagesImportChatInvite(context.Context, *TLMessagesImportChatInvite) (*Updates, error)
	//  messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	//
	MessagesGetStickerSet(context.Context, *TLMessagesGetStickerSet) (*Messages_StickerSet, error)
	//  messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	//  messages.installStickerSet#7b30c3a6 stickerset:InputStickerSet disabled:Bool = Bool;
	//
	MessagesInstallStickerSet(context.Context, *TLMessagesInstallStickerSet) (*Response_MessagesInstallStickerSet, error)
	//  messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	//
	MessagesUninstallStickerSet(context.Context, *TLMessagesUninstallStickerSet) (*Bool, error)
	//  messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	//
	MessagesStartBot(context.Context, *TLMessagesStartBot) (*Updates, error)
	//  messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	//  messages.getMessagesViews#5784d3e1 peer:InputPeer id:Vector<int> increment:Bool = messages.MessageViews;
	//
	MessagesGetMessagesViews(context.Context, *TLMessagesGetMessagesViews) (*Response_MessagesGetMessagesViews, error)
	//  messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	//
	MessagesToggleChatAdmins(context.Context, *TLMessagesToggleChatAdmins) (*Updates, error)
	//  messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	//
	MessagesEditChatAdmin(context.Context, *TLMessagesEditChatAdmin) (*Bool, error)
	//  messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	//
	MessagesMigrateChat(context.Context, *TLMessagesMigrateChat) (*Updates, error)
	//  messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//  messages.searchGlobal#f79c611 q:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//  messages.searchGlobal#bf7225a4 flags:# folder_id:flags.0?int q:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//  messages.searchGlobal#4bc6589a flags:# folder_id:flags.0?int q:string filter:MessagesFilter min_date:int max_date:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//
	MessagesSearchGlobal(context.Context, *TLMessagesSearchGlobal) (*Messages_Messages, error)
	//  messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	//  messages.reorderStickerSets#9fcfbc30 order:Vector<long> = Bool;
	//
	MessagesReorderStickerSets(context.Context, *TLMessagesReorderStickerSets) (*Bool, error)
	//  messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	//
	MessagesGetDocumentByHash(context.Context, *TLMessagesGetDocumentByHash) (*Document, error)
	//  messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	//
	MessagesSearchGifs(context.Context, *TLMessagesSearchGifs) (*Messages_FoundGifs, error)
	//  messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	//
	MessagesGetSavedGifs(context.Context, *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error)
	//  messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	//
	MessagesSaveGif(context.Context, *TLMessagesSaveGif) (*Bool, error)
	//  messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	//
	MessagesGetInlineBotResults(context.Context, *TLMessagesGetInlineBotResults) (*Messages_BotResults, error)
	//  messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	//
	MessagesSetInlineBotResults(context.Context, *TLMessagesSetInlineBotResults) (*Bool, error)
	//  messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	//  messages.sendInlineBotResult#220815b0 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string schedule_date:flags.10?int = Updates;
	//
	MessagesSendInlineBotResult(context.Context, *TLMessagesSendInlineBotResult) (*Updates, error)
	//  messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	//
	MessagesGetMessageEditData(context.Context, *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error)
	//  messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.editMessage#c000e4c8 flags:# no_webpage:flags.1?true stop_geo_live:flags.12?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> geo_point:flags.13?InputGeoPoint = Updates;
	//  messages.editMessage#d116f31e flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	//  messages.editMessage#48f71778 flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int = Updates;
	//
	MessagesEditMessage(context.Context, *TLMessagesEditMessage) (*Updates, error)
	//  messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	//  messages.editInlineBotMessage#adc3e828 flags:# no_webpage:flags.1?true stop_geo_live:flags.12?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> geo_point:flags.13?InputGeoPoint = Bool;
	//  messages.editInlineBotMessage#83557dba flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	//
	MessagesEditInlineBotMessage(context.Context, *TLMessagesEditInlineBotMessage) (*Bool, error)
	//  messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	//  messages.getBotCallbackAnswer#a6e94f04 peer:InputPeer msg_id:int data:bytes = messages.BotCallbackAnswer;
	//  messages.getBotCallbackAnswer#9342ca07 flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes password:flags.2?InputCheckPasswordSRP = messages.BotCallbackAnswer;
	//
	MessagesGetBotCallbackAnswer(context.Context, *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error)
	//  messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	//  messages.setBotCallbackAnswer#481c591a flags:# alert:flags.1?true query_id:long message:flags.0?string = Bool;
	//
	MessagesSetBotCallbackAnswer(context.Context, *TLMessagesSetBotCallbackAnswer) (*Bool, error)
	//  messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	//  messages.getPeerDialogs#e470bcfd peers:Vector<InputDialogPeer> = messages.PeerDialogs;
	//
	MessagesGetPeerDialogs(context.Context, *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error)
	//  messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	//
	MessagesSaveDraft(context.Context, *TLMessagesSaveDraft) (*Bool, error)
	//  messages.getAllDrafts#6a3f8d65 = Updates;
	//
	MessagesGetAllDrafts(context.Context, *TLMessagesGetAllDrafts) (*Updates, error)
	//  messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	//
	MessagesGetFeaturedStickers(context.Context, *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error)
	//  messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	//
	MessagesReadFeaturedStickers(context.Context, *TLMessagesReadFeaturedStickers) (*Bool, error)
	//  messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	//
	MessagesGetRecentStickers(context.Context, *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error)
	//  messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	//  messages.saveRecentSticker#348e39bf id:InputDocument unsave:Bool = Bool;
	//
	MessagesSaveRecentSticker(context.Context, *TLMessagesSaveRecentSticker) (*Bool, error)
	//  messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	//
	MessagesClearRecentStickers(context.Context, *TLMessagesClearRecentStickers) (*Bool, error)
	//  messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	//
	MessagesGetArchivedStickers(context.Context, *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error)
	//  messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	//
	MessagesGetMaskStickers(context.Context, *TLMessagesGetMaskStickers) (*Messages_AllStickers, error)
	//  messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	//
	MessagesGetAttachedStickers(context.Context, *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error)
	//  messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	//
	MessagesSetGameScore(context.Context, *TLMessagesSetGameScore) (*Updates, error)
	//  messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	//
	MessagesSetInlineGameScore(context.Context, *TLMessagesSetInlineGameScore) (*Bool, error)
	//  messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	//
	MessagesGetGameHighScores(context.Context, *TLMessagesGetGameHighScores) (*Messages_HighScores, error)
	//  messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	//
	MessagesGetInlineGameHighScores(context.Context, *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error)
	//  messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	//
	MessagesGetCommonChats(context.Context, *TLMessagesGetCommonChats) (*Messages_Chats, error)
	//  messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	//
	MessagesGetAllChats(context.Context, *TLMessagesGetAllChats) (*Messages_Chats, error)
	//  messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	//
	MessagesGetWebPage(context.Context, *TLMessagesGetWebPage) (*WebPage, error)
	//  messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	//  messages.toggleDialogPin#a731e257 flags:# pinned:flags.0?true peer:InputDialogPeer = Bool;
	//
	MessagesToggleDialogPin(context.Context, *TLMessagesToggleDialogPin) (*Bool, error)
	//  messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	//  messages.reorderPinnedDialogs#5b51d63f flags:# force:flags.0?true order:Vector<InputDialogPeer> = Bool;
	//  messages.reorderPinnedDialogs#3b1adf37 flags:# force:flags.0?true folder_id:int order:Vector<InputDialogPeer> = Bool;
	//
	MessagesReorderPinnedDialogs(context.Context, *TLMessagesReorderPinnedDialogs) (*Bool, error)
	//  messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	//  messages.getPinnedDialogs#d6b94df2 folder_id:int = messages.PeerDialogs;
	//
	MessagesGetPinnedDialogs(context.Context, *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error)
	//  messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	//
	MessagesSetBotShippingResults(context.Context, *TLMessagesSetBotShippingResults) (*Bool, error)
	//  messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	//
	MessagesSetBotPrecheckoutResults(context.Context, *TLMessagesSetBotPrecheckoutResults) (*Bool, error)
	//  messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	//
	MessagesUploadMedia(context.Context, *TLMessagesUploadMedia) (*MessageMedia, error)
	//  messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	//
	MessagesSendScreenshotNotification(context.Context, *TLMessagesSendScreenshotNotification) (*Updates, error)
	//  messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	//
	MessagesGetFavedStickers(context.Context, *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error)
	//  messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	//
	MessagesFaveSticker(context.Context, *TLMessagesFaveSticker) (*Bool, error)
	//  messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	//
	MessagesGetUnreadMentions(context.Context, *TLMessagesGetUnreadMentions) (*Messages_Messages, error)
	//  messages.deleteHistory#b7c13bd9 peer:InputPeer max_id:int = messages.AffectedHistory;
	//  messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true revoke:flags.1?true peer:InputPeer max_id:int = messages.AffectedHistory;
	//
	MessagesDeleteHistory(context.Context, *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error)
	//  messages.sendBroadcast#bf73f4da contacts:Vector<InputUser> random_id:Vector<long> message:string media:InputMedia = Updates;
	//
	MessagesSendBroadcast(context.Context, *TLMessagesSendBroadcast) (*Updates, error)
	//  messages.getStickers#ae22e045 emoticon:string hash:string = messages.Stickers;
	//  messages.getStickers#43d4f2c emoticon:string hash:int = messages.Stickers;
	//
	MessagesGetStickers(context.Context, *TLMessagesGetStickers) (*Messages_Stickers, error)
	//  messages.getRecentLocations#249431e2 peer:InputPeer limit:int = messages.Messages;
	//  messages.getRecentLocations#bbc45b09 peer:InputPeer limit:int hash:int = messages.Messages;
	//
	MessagesGetRecentLocations(context.Context, *TLMessagesGetRecentLocations) (*Messages_Messages, error)
	//  messages.report#bd82b658 peer:InputPeer id:Vector<int> reason:ReportReason = Bool;
	//
	MessagesReport(context.Context, *TLMessagesReport) (*Bool, error)
	//  messages.readMentions#f0189d3 peer:InputPeer = messages.AffectedHistory;
	//
	MessagesReadMentions(context.Context, *TLMessagesReadMentions) (*Messages_AffectedHistory, error)
	//  messages.sendMultiMedia#2095512f flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> = Updates;
	//  messages.sendMultiMedia#cc0110cb flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int = Updates;
	//
	MessagesSendMultiMedia(context.Context, *TLMessagesSendMultiMedia) (*Updates, error)
	//  messages.uploadEncryptedFile#5057c497 peer:InputEncryptedChat file:InputEncryptedFile = EncryptedFile;
	//
	MessagesUploadEncryptedFile(context.Context, *TLMessagesUploadEncryptedFile) (*EncryptedFile, error)
	//  messages.searchStickerSets#c2b7d08b flags:# exclude_featured:flags.0?true q:string hash:int = messages.FoundStickerSets;
	//
	MessagesSearchStickerSets(context.Context, *TLMessagesSearchStickerSets) (*Messages_FoundStickerSets, error)
	//  messages.getSplitRanges#1cff7e08 = Vector<MessageRange>;
	//
	MessagesGetSplitRanges(context.Context, *TLMessagesGetSplitRanges) (*Vector_MessageRange, error)
	//  messages.markDialogUnread#c286d98f flags:# unread:flags.0?true peer:InputDialogPeer = Bool;
	//
	MessagesMarkDialogUnread(context.Context, *TLMessagesMarkDialogUnread) (*Bool, error)
	//  messages.getDialogUnreadMarks#22e24e22 = Vector<DialogPeer>;
	//
	MessagesGetDialogUnreadMarks(context.Context, *TLMessagesGetDialogUnreadMarks) (*Vector_DialogPeer, error)
	//  messages.clearAllDrafts#7e58ee9c = Bool;
	//
	MessagesClearAllDrafts(context.Context, *TLMessagesClearAllDrafts) (*Bool, error)
	//  messages.updatePinnedMessage#d2aaf7ec flags:# silent:flags.0?true peer:InputPeer id:int = Updates;
	//
	MessagesUpdatePinnedMessage(context.Context, *TLMessagesUpdatePinnedMessage) (*Updates, error)
	//  messages.sendVote#10ea6184 peer:InputPeer msg_id:int options:Vector<bytes> = Updates;
	//
	MessagesSendVote(context.Context, *TLMessagesSendVote) (*Updates, error)
	//  messages.getPollResults#73bb643b peer:InputPeer msg_id:int = Updates;
	//
	MessagesGetPollResults(context.Context, *TLMessagesGetPollResults) (*Updates, error)
	//  messages.getOnlines#6e2be050 peer:InputPeer = ChatOnlines;
	//
	MessagesGetOnlines(context.Context, *TLMessagesGetOnlines) (*ChatOnlines, error)
	//  messages.getStatsURL#83f6c0cd peer:InputPeer = StatsURL;
	//  messages.getStatsURL#812c2ae6 flags:# dark:flags.0?true peer:InputPeer params:string = StatsURL;
	//
	MessagesGetStatsURL(context.Context, *TLMessagesGetStatsURL) (*StatsURL, error)
	//  messages.editChatAbout#def60797 peer:InputPeer about:string = Bool;
	//
	MessagesEditChatAbout(context.Context, *TLMessagesEditChatAbout) (*Bool, error)
	//  messages.editChatDefaultBannedRights#a5866b41 peer:InputPeer banned_rights:ChatBannedRights = Updates;
	//
	MessagesEditChatDefaultBannedRights(context.Context, *TLMessagesEditChatDefaultBannedRights) (*Updates, error)
	//  messages.getEmojiKeywords#35a0e062 lang_code:string = EmojiKeywordsDifference;
	//
	MessagesGetEmojiKeywords(context.Context, *TLMessagesGetEmojiKeywords) (*EmojiKeywordsDifference, error)
	//  messages.getEmojiKeywordsDifference#1508b6af lang_code:string from_version:int = EmojiKeywordsDifference;
	//
	MessagesGetEmojiKeywordsDifference(context.Context, *TLMessagesGetEmojiKeywordsDifference) (*EmojiKeywordsDifference, error)
	//  messages.getEmojiURL#d5b10c26 lang_code:string = EmojiURL;
	//
	MessagesGetEmojiURL(context.Context, *TLMessagesGetEmojiURL) (*EmojiURL, error)
	//  messages.getEmojiKeywordsLanguages#4e9963b2 lang_codes:Vector<string> = Vector<EmojiLanguage>;
	//
	MessagesGetEmojiKeywordsLanguages(context.Context, *TLMessagesGetEmojiKeywordsLanguages) (*Vector_EmojiLanguage, error)
	//  messages.getSearchCounters#732eef00 peer:InputPeer filters:Vector<MessagesFilter> = Vector<messages.SearchCounter>;
	//
	MessagesGetSearchCounters(context.Context, *TLMessagesGetSearchCounters) (*VectorMessages_SearchCounter, error)
	//  messages.requestUrlAuth#e33f5613 peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	//
	MessagesRequestUrlAuth(context.Context, *TLMessagesRequestUrlAuth) (*UrlAuthResult, error)
	//  messages.acceptUrlAuth#f729ea98 flags:# write_allowed:flags.0?true peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	//
	MessagesAcceptUrlAuth(context.Context, *TLMessagesAcceptUrlAuth) (*UrlAuthResult, error)
	//  messages.hidePeerSettingsBar#4facb138 peer:InputPeer = Bool;
	//
	MessagesHidePeerSettingsBar(context.Context, *TLMessagesHidePeerSettingsBar) (*Bool, error)
	//  messages.getScheduledHistory#e2c2685b peer:InputPeer hash:int = messages.Messages;
	//
	MessagesGetScheduledHistory(context.Context, *TLMessagesGetScheduledHistory) (*Messages_Messages, error)
	//  messages.getScheduledMessages#bdbb0464 peer:InputPeer id:Vector<int> = messages.Messages;
	//
	MessagesGetScheduledMessages(context.Context, *TLMessagesGetScheduledMessages) (*Messages_Messages, error)
	//  messages.sendScheduledMessages#bd38850a peer:InputPeer id:Vector<int> = Updates;
	//
	MessagesSendScheduledMessages(context.Context, *TLMessagesSendScheduledMessages) (*Updates, error)
	//  messages.deleteScheduledMessages#59ae2b16 peer:InputPeer id:Vector<int> = Updates;
	//
	MessagesDeleteScheduledMessages(context.Context, *TLMessagesDeleteScheduledMessages) (*Updates, error)
	//  messages.getPollVotes#b86e380e flags:# peer:InputPeer id:int option:flags.0?bytes offset:flags.1?string limit:int = messages.VotesList;
	//
	MessagesGetPollVotes(context.Context, *TLMessagesGetPollVotes) (*Messages_VotesList, error)
	//  messages.toggleStickerSets#b5052fea flags:# uninstall:flags.0?true archive:flags.1?true unarchive:flags.2?true stickersets:Vector<InputStickerSet> = Bool;
	//
	MessagesToggleStickerSets(context.Context, *TLMessagesToggleStickerSets) (*Bool, error)
	//  messages.getDialogFilters#f19ed96d = Vector<DialogFilter>;
	//
	MessagesGetDialogFilters(context.Context, *TLMessagesGetDialogFilters) (*Vector_DialogFilter, error)
	//  messages.getSuggestedDialogFilters#a29cd42c = Vector<DialogFilterSuggested>;
	//
	MessagesGetSuggestedDialogFilters(context.Context, *TLMessagesGetSuggestedDialogFilters) (*Vector_DialogFilterSuggested, error)
	//  messages.updateDialogFilter#1ad4a04a flags:# id:int filter:flags.0?DialogFilter = Bool;
	//
	MessagesUpdateDialogFilter(context.Context, *TLMessagesUpdateDialogFilter) (*Bool, error)
	//  messages.updateDialogFiltersOrder#c563c1e4 order:Vector<int> = Bool;
	//
	MessagesUpdateDialogFiltersOrder(context.Context, *TLMessagesUpdateDialogFiltersOrder) (*Bool, error)
	//  messages.getOldFeaturedStickers#5fe7025b offset:int limit:int hash:int = messages.FeaturedStickers;
	//
	MessagesGetOldFeaturedStickers(context.Context, *TLMessagesGetOldFeaturedStickers) (*Messages_FeaturedStickers, error)
	//  messages.getReplies#24b581ba peer:InputPeer msg_id:int offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	//
	MessagesGetReplies(context.Context, *TLMessagesGetReplies) (*Messages_Messages, error)
	//  messages.getDiscussionMessage#446972fd peer:InputPeer msg_id:int = messages.DiscussionMessage;
	//
	MessagesGetDiscussionMessage(context.Context, *TLMessagesGetDiscussionMessage) (*Messages_DiscussionMessage, error)
	//  messages.readDiscussion#f731a9f4 peer:InputPeer msg_id:int read_max_id:int = Bool;
	//
	MessagesReadDiscussion(context.Context, *TLMessagesReadDiscussion) (*Bool, error)
	//  messages.unpinAllMessages#f025bc8b peer:InputPeer = messages.AffectedHistory;
	//
	MessagesUnpinAllMessages(context.Context, *TLMessagesUnpinAllMessages) (*Messages_AffectedHistory, error)
}

// UnimplementedRPCMessagesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCMessagesServiceServer struct {
}

func (*UnimplementedRPCMessagesServiceServer) MessagesGetMessages(ctx context.Context, req *TLMessagesGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetDialogs(ctx context.Context, req *TLMessagesGetDialogs) (*Messages_Dialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogs not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetHistory(ctx context.Context, req *TLMessagesGetHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetHistory not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSearch(ctx context.Context, req *TLMessagesSearch) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearch not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReadHistory(ctx context.Context, req *TLMessagesReadHistory) (*Response_MessagesReadHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadHistory not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesDeleteMessages(ctx context.Context, req *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteMessages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReceivedMessages(ctx context.Context, req *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedMessages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetTyping(ctx context.Context, req *TLMessagesSetTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetTyping not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendMessage(ctx context.Context, req *TLMessagesSendMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMessage not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendMedia(ctx context.Context, req *TLMessagesSendMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMedia not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesForwardMessages(ctx context.Context, req *TLMessagesForwardMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReportSpam(ctx context.Context, req *TLMessagesReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportSpam not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesHideReportSpam(ctx context.Context, req *TLMessagesHideReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHideReportSpam not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetPeerSettings(ctx context.Context, req *TLMessagesGetPeerSettings) (*PeerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerSettings not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetChats(ctx context.Context, req *TLMessagesGetChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetChats not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetFullChat(ctx context.Context, req *TLMessagesGetFullChat) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFullChat not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesEditChatTitle(ctx context.Context, req *TLMessagesEditChatTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatTitle not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesEditChatPhoto(ctx context.Context, req *TLMessagesEditChatPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatPhoto not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesAddChatUser(ctx context.Context, req *TLMessagesAddChatUser) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAddChatUser not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesDeleteChatUser(ctx context.Context, req *TLMessagesDeleteChatUser) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteChatUser not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesCreateChat(ctx context.Context, req *TLMessagesCreateChat) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCreateChat not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesForwardMessage(ctx context.Context, req *TLMessagesForwardMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessage not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetDhConfig(ctx context.Context, req *TLMessagesGetDhConfig) (*Messages_DhConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDhConfig not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesRequestEncryption(ctx context.Context, req *TLMessagesRequestEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestEncryption not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesAcceptEncryption(ctx context.Context, req *TLMessagesAcceptEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAcceptEncryption not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesDiscardEncryption(ctx context.Context, req *TLMessagesDiscardEncryption) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDiscardEncryption not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetEncryptedTyping(ctx context.Context, req *TLMessagesSetEncryptedTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetEncryptedTyping not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReadEncryptedHistory(ctx context.Context, req *TLMessagesReadEncryptedHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadEncryptedHistory not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendEncrypted(ctx context.Context, req *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncrypted not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendEncryptedFile(ctx context.Context, req *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedFile not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendEncryptedService(ctx context.Context, req *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedService not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReceivedQueue(ctx context.Context, req *TLMessagesReceivedQueue) (*VectorLong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedQueue not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReportEncryptedSpam(ctx context.Context, req *TLMessagesReportEncryptedSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportEncryptedSpam not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReadMessageContents(ctx context.Context, req *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadMessageContents not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetAllStickers(ctx context.Context, req *TLMessagesGetAllStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetWebPagePreview(ctx context.Context, req *TLMessagesGetWebPagePreview) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPagePreview not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesExportChatInvite(ctx context.Context, req *TLMessagesExportChatInvite) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesExportChatInvite not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesCheckChatInvite(ctx context.Context, req *TLMessagesCheckChatInvite) (*ChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCheckChatInvite not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesImportChatInvite(ctx context.Context, req *TLMessagesImportChatInvite) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesImportChatInvite not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetStickerSet(ctx context.Context, req *TLMessagesGetStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStickerSet not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesInstallStickerSet(ctx context.Context, req *TLMessagesInstallStickerSet) (*Response_MessagesInstallStickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesInstallStickerSet not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesUninstallStickerSet(ctx context.Context, req *TLMessagesUninstallStickerSet) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUninstallStickerSet not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesStartBot(ctx context.Context, req *TLMessagesStartBot) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesStartBot not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetMessagesViews(ctx context.Context, req *TLMessagesGetMessagesViews) (*Response_MessagesGetMessagesViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessagesViews not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesToggleChatAdmins(ctx context.Context, req *TLMessagesToggleChatAdmins) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleChatAdmins not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesEditChatAdmin(ctx context.Context, req *TLMessagesEditChatAdmin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatAdmin not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesMigrateChat(ctx context.Context, req *TLMessagesMigrateChat) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMigrateChat not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSearchGlobal(ctx context.Context, req *TLMessagesSearchGlobal) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGlobal not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReorderStickerSets(ctx context.Context, req *TLMessagesReorderStickerSets) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderStickerSets not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetDocumentByHash(ctx context.Context, req *TLMessagesGetDocumentByHash) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDocumentByHash not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSearchGifs(ctx context.Context, req *TLMessagesSearchGifs) (*Messages_FoundGifs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGifs not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetSavedGifs(ctx context.Context, req *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSavedGifs not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSaveGif(ctx context.Context, req *TLMessagesSaveGif) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveGif not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetInlineBotResults(ctx context.Context, req *TLMessagesGetInlineBotResults) (*Messages_BotResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineBotResults not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetInlineBotResults(ctx context.Context, req *TLMessagesSetInlineBotResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineBotResults not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendInlineBotResult(ctx context.Context, req *TLMessagesSendInlineBotResult) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendInlineBotResult not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetMessageEditData(ctx context.Context, req *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessageEditData not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesEditMessage(ctx context.Context, req *TLMessagesEditMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditMessage not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesEditInlineBotMessage(ctx context.Context, req *TLMessagesEditInlineBotMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditInlineBotMessage not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetBotCallbackAnswer(ctx context.Context, req *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetBotCallbackAnswer not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetBotCallbackAnswer(ctx context.Context, req *TLMessagesSetBotCallbackAnswer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotCallbackAnswer not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetPeerDialogs(ctx context.Context, req *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerDialogs not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSaveDraft(ctx context.Context, req *TLMessagesSaveDraft) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveDraft not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetAllDrafts(ctx context.Context, req *TLMessagesGetAllDrafts) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllDrafts not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetFeaturedStickers(ctx context.Context, req *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFeaturedStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReadFeaturedStickers(ctx context.Context, req *TLMessagesReadFeaturedStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadFeaturedStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetRecentStickers(ctx context.Context, req *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSaveRecentSticker(ctx context.Context, req *TLMessagesSaveRecentSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveRecentSticker not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesClearRecentStickers(ctx context.Context, req *TLMessagesClearRecentStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearRecentStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetArchivedStickers(ctx context.Context, req *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetArchivedStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetMaskStickers(ctx context.Context, req *TLMessagesGetMaskStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMaskStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetAttachedStickers(ctx context.Context, req *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAttachedStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetGameScore(ctx context.Context, req *TLMessagesSetGameScore) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetGameScore not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetInlineGameScore(ctx context.Context, req *TLMessagesSetInlineGameScore) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineGameScore not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetGameHighScores(ctx context.Context, req *TLMessagesGetGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetGameHighScores not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetInlineGameHighScores(ctx context.Context, req *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineGameHighScores not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetCommonChats(ctx context.Context, req *TLMessagesGetCommonChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetCommonChats not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetAllChats(ctx context.Context, req *TLMessagesGetAllChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllChats not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetWebPage(ctx context.Context, req *TLMessagesGetWebPage) (*WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPage not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesToggleDialogPin(ctx context.Context, req *TLMessagesToggleDialogPin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleDialogPin not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReorderPinnedDialogs(ctx context.Context, req *TLMessagesReorderPinnedDialogs) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderPinnedDialogs not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetPinnedDialogs(ctx context.Context, req *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPinnedDialogs not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetBotShippingResults(ctx context.Context, req *TLMessagesSetBotShippingResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotShippingResults not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSetBotPrecheckoutResults(ctx context.Context, req *TLMessagesSetBotPrecheckoutResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotPrecheckoutResults not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesUploadMedia(ctx context.Context, req *TLMessagesUploadMedia) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadMedia not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendScreenshotNotification(ctx context.Context, req *TLMessagesSendScreenshotNotification) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendScreenshotNotification not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetFavedStickers(ctx context.Context, req *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFavedStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesFaveSticker(ctx context.Context, req *TLMessagesFaveSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesFaveSticker not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetUnreadMentions(ctx context.Context, req *TLMessagesGetUnreadMentions) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetUnreadMentions not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesDeleteHistory(ctx context.Context, req *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteHistory not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendBroadcast(ctx context.Context, req *TLMessagesSendBroadcast) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendBroadcast not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetStickers(ctx context.Context, req *TLMessagesGetStickers) (*Messages_Stickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetRecentLocations(ctx context.Context, req *TLMessagesGetRecentLocations) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentLocations not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReport(ctx context.Context, req *TLMessagesReport) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReport not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReadMentions(ctx context.Context, req *TLMessagesReadMentions) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadMentions not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendMultiMedia(ctx context.Context, req *TLMessagesSendMultiMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMultiMedia not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesUploadEncryptedFile(ctx context.Context, req *TLMessagesUploadEncryptedFile) (*EncryptedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadEncryptedFile not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSearchStickerSets(ctx context.Context, req *TLMessagesSearchStickerSets) (*Messages_FoundStickerSets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchStickerSets not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetSplitRanges(ctx context.Context, req *TLMessagesGetSplitRanges) (*Vector_MessageRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSplitRanges not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesMarkDialogUnread(ctx context.Context, req *TLMessagesMarkDialogUnread) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMarkDialogUnread not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetDialogUnreadMarks(ctx context.Context, req *TLMessagesGetDialogUnreadMarks) (*Vector_DialogPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogUnreadMarks not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesClearAllDrafts(ctx context.Context, req *TLMessagesClearAllDrafts) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearAllDrafts not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesUpdatePinnedMessage(ctx context.Context, req *TLMessagesUpdatePinnedMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdatePinnedMessage not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendVote(ctx context.Context, req *TLMessagesSendVote) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendVote not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetPollResults(ctx context.Context, req *TLMessagesGetPollResults) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPollResults not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetOnlines(ctx context.Context, req *TLMessagesGetOnlines) (*ChatOnlines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetOnlines not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetStatsURL(ctx context.Context, req *TLMessagesGetStatsURL) (*StatsURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStatsURL not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesEditChatAbout(ctx context.Context, req *TLMessagesEditChatAbout) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatAbout not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesEditChatDefaultBannedRights(ctx context.Context, req *TLMessagesEditChatDefaultBannedRights) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatDefaultBannedRights not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetEmojiKeywords(ctx context.Context, req *TLMessagesGetEmojiKeywords) (*EmojiKeywordsDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywords not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetEmojiKeywordsDifference(ctx context.Context, req *TLMessagesGetEmojiKeywordsDifference) (*EmojiKeywordsDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywordsDifference not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetEmojiURL(ctx context.Context, req *TLMessagesGetEmojiURL) (*EmojiURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiURL not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetEmojiKeywordsLanguages(ctx context.Context, req *TLMessagesGetEmojiKeywordsLanguages) (*Vector_EmojiLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywordsLanguages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetSearchCounters(ctx context.Context, req *TLMessagesGetSearchCounters) (*VectorMessages_SearchCounter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSearchCounters not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesRequestUrlAuth(ctx context.Context, req *TLMessagesRequestUrlAuth) (*UrlAuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestUrlAuth not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesAcceptUrlAuth(ctx context.Context, req *TLMessagesAcceptUrlAuth) (*UrlAuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAcceptUrlAuth not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesHidePeerSettingsBar(ctx context.Context, req *TLMessagesHidePeerSettingsBar) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHidePeerSettingsBar not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetScheduledHistory(ctx context.Context, req *TLMessagesGetScheduledHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetScheduledHistory not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetScheduledMessages(ctx context.Context, req *TLMessagesGetScheduledMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetScheduledMessages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesSendScheduledMessages(ctx context.Context, req *TLMessagesSendScheduledMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendScheduledMessages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesDeleteScheduledMessages(ctx context.Context, req *TLMessagesDeleteScheduledMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteScheduledMessages not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetPollVotes(ctx context.Context, req *TLMessagesGetPollVotes) (*Messages_VotesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPollVotes not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesToggleStickerSets(ctx context.Context, req *TLMessagesToggleStickerSets) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleStickerSets not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetDialogFilters(ctx context.Context, req *TLMessagesGetDialogFilters) (*Vector_DialogFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogFilters not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetSuggestedDialogFilters(ctx context.Context, req *TLMessagesGetSuggestedDialogFilters) (*Vector_DialogFilterSuggested, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSuggestedDialogFilters not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesUpdateDialogFilter(ctx context.Context, req *TLMessagesUpdateDialogFilter) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdateDialogFilter not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesUpdateDialogFiltersOrder(ctx context.Context, req *TLMessagesUpdateDialogFiltersOrder) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdateDialogFiltersOrder not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetOldFeaturedStickers(ctx context.Context, req *TLMessagesGetOldFeaturedStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetOldFeaturedStickers not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetReplies(ctx context.Context, req *TLMessagesGetReplies) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetReplies not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesGetDiscussionMessage(ctx context.Context, req *TLMessagesGetDiscussionMessage) (*Messages_DiscussionMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDiscussionMessage not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesReadDiscussion(ctx context.Context, req *TLMessagesReadDiscussion) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadDiscussion not implemented")
}
func (*UnimplementedRPCMessagesServiceServer) MessagesUnpinAllMessages(ctx context.Context, req *TLMessagesUnpinAllMessages) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUnpinAllMessages not implemented")
}

func RegisterRPCMessagesServiceServer(s *grpc.Server, srv RPCMessagesServiceServer) {
	s.RegisterService(&_RPCMessagesService_serviceDesc, srv)
}

func _RPCMessagesService_MessagesGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetMessages(ctx, req.(*TLMessagesGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetDialogs(ctx, req.(*TLMessagesGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetHistory(ctx, req.(*TLMessagesGetHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSearch(ctx, req.(*TLMessagesSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReadHistory(ctx, req.(*TLMessagesReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesDeleteMessages(ctx, req.(*TLMessagesDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReceivedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReceivedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReceivedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReceivedMessages(ctx, req.(*TLMessagesReceivedMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetTyping(ctx, req.(*TLMessagesSetTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendMessage(ctx, req.(*TLMessagesSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendMedia(ctx, req.(*TLMessagesSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesForwardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesForwardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesForwardMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesForwardMessages(ctx, req.(*TLMessagesForwardMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReportSpam(ctx, req.(*TLMessagesReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesHideReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHideReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesHideReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesHideReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesHideReportSpam(ctx, req.(*TLMessagesHideReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetPeerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetPeerSettings(ctx, req.(*TLMessagesGetPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetChats(ctx, req.(*TLMessagesGetChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetFullChat(ctx, req.(*TLMessagesGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesEditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesEditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesEditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesEditChatTitle(ctx, req.(*TLMessagesEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesEditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesEditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesEditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesEditChatPhoto(ctx, req.(*TLMessagesEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesAddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesAddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesAddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesAddChatUser(ctx, req.(*TLMessagesAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesDeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesDeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesDeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesDeleteChatUser(ctx, req.(*TLMessagesDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesCreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesCreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesCreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesCreateChat(ctx, req.(*TLMessagesCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesForwardMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesForwardMessage(ctx, req.(*TLMessagesForwardMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetDhConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDhConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetDhConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetDhConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetDhConfig(ctx, req.(*TLMessagesGetDhConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesRequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesRequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesRequestEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesRequestEncryption(ctx, req.(*TLMessagesRequestEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesAcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesAcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesAcceptEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesAcceptEncryption(ctx, req.(*TLMessagesAcceptEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesDiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDiscardEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesDiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesDiscardEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesDiscardEncryption(ctx, req.(*TLMessagesDiscardEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetEncryptedTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetEncryptedTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetEncryptedTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetEncryptedTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetEncryptedTyping(ctx, req.(*TLMessagesSetEncryptedTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadEncryptedHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReadEncryptedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReadEncryptedHistory(ctx, req.(*TLMessagesReadEncryptedHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendEncrypted(ctx, req.(*TLMessagesSendEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendEncryptedFile(ctx, req.(*TLMessagesSendEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendEncryptedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendEncryptedService(ctx, req.(*TLMessagesSendEncryptedService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReceivedQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReceivedQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReceivedQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReceivedQueue(ctx, req.(*TLMessagesReceivedQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReportEncryptedSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportEncryptedSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReportEncryptedSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReportEncryptedSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReportEncryptedSpam(ctx, req.(*TLMessagesReportEncryptedSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReadMessageContents(ctx, req.(*TLMessagesReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetAllStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetAllStickers(ctx, req.(*TLMessagesGetAllStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetWebPagePreview(ctx, req.(*TLMessagesGetWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesExportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesExportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesExportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesExportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesExportChatInvite(ctx, req.(*TLMessagesExportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesCheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesCheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesCheckChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesCheckChatInvite(ctx, req.(*TLMessagesCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesImportChatInvite(ctx, req.(*TLMessagesImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetStickerSet(ctx, req.(*TLMessagesGetStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesInstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesInstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesInstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesInstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesInstallStickerSet(ctx, req.(*TLMessagesInstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesUninstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUninstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesUninstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesUninstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesUninstallStickerSet(ctx, req.(*TLMessagesUninstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesStartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesStartBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesStartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesStartBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesStartBot(ctx, req.(*TLMessagesStartBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetMessagesViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessagesViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetMessagesViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetMessagesViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetMessagesViews(ctx, req.(*TLMessagesGetMessagesViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesToggleChatAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleChatAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesToggleChatAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesToggleChatAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesToggleChatAdmins(ctx, req.(*TLMessagesToggleChatAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesEditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesEditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesEditChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesEditChatAdmin(ctx, req.(*TLMessagesEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesMigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesMigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesMigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesMigrateChat(ctx, req.(*TLMessagesMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSearchGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSearchGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSearchGlobal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSearchGlobal(ctx, req.(*TLMessagesSearchGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReorderStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReorderStickerSets(ctx, req.(*TLMessagesReorderStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetDocumentByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDocumentByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetDocumentByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetDocumentByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetDocumentByHash(ctx, req.(*TLMessagesGetDocumentByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSearchGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSearchGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSearchGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSearchGifs(ctx, req.(*TLMessagesSearchGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetSavedGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetSavedGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetSavedGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetSavedGifs(ctx, req.(*TLMessagesGetSavedGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSaveGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveGif)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSaveGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSaveGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSaveGif(ctx, req.(*TLMessagesSaveGif))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetInlineBotResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetInlineBotResults(ctx, req.(*TLMessagesGetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetInlineBotResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetInlineBotResults(ctx, req.(*TLMessagesSetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendInlineBotResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendInlineBotResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendInlineBotResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendInlineBotResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendInlineBotResult(ctx, req.(*TLMessagesSendInlineBotResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetMessageEditData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetMessageEditData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetMessageEditData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetMessageEditData(ctx, req.(*TLMessagesGetMessageEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesEditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesEditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesEditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesEditMessage(ctx, req.(*TLMessagesEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesEditInlineBotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditInlineBotMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesEditInlineBotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesEditInlineBotMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesEditInlineBotMessage(ctx, req.(*TLMessagesEditInlineBotMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetBotCallbackAnswer(ctx, req.(*TLMessagesGetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetBotCallbackAnswer(ctx, req.(*TLMessagesSetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetPeerDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetPeerDialogs(ctx, req.(*TLMessagesGetPeerDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSaveDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSaveDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSaveDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSaveDraft(ctx, req.(*TLMessagesSaveDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetAllDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetAllDrafts(ctx, req.(*TLMessagesGetAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetFeaturedStickers(ctx, req.(*TLMessagesGetFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReadFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReadFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReadFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReadFeaturedStickers(ctx, req.(*TLMessagesReadFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetRecentStickers(ctx, req.(*TLMessagesGetRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSaveRecentSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveRecentSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSaveRecentSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSaveRecentSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSaveRecentSticker(ctx, req.(*TLMessagesSaveRecentSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesClearRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesClearRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesClearRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesClearRecentStickers(ctx, req.(*TLMessagesClearRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetArchivedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetArchivedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetArchivedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetArchivedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetArchivedStickers(ctx, req.(*TLMessagesGetArchivedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetMaskStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMaskStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetMaskStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetMaskStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetMaskStickers(ctx, req.(*TLMessagesGetMaskStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetAttachedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAttachedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetAttachedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetAttachedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetAttachedStickers(ctx, req.(*TLMessagesGetAttachedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetGameScore(ctx, req.(*TLMessagesSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetInlineGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetInlineGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetInlineGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetInlineGameScore(ctx, req.(*TLMessagesSetInlineGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetGameHighScores(ctx, req.(*TLMessagesGetGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetInlineGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetInlineGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetInlineGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetInlineGameHighScores(ctx, req.(*TLMessagesGetInlineGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetCommonChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetCommonChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetCommonChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetCommonChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetCommonChats(ctx, req.(*TLMessagesGetCommonChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetAllChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetAllChats(ctx, req.(*TLMessagesGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetWebPage(ctx, req.(*TLMessagesGetWebPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesToggleDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesToggleDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesToggleDialogPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesToggleDialogPin(ctx, req.(*TLMessagesToggleDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReorderPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReorderPinnedDialogs(ctx, req.(*TLMessagesReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetPinnedDialogs(ctx, req.(*TLMessagesGetPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetBotShippingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotShippingResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetBotShippingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetBotShippingResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetBotShippingResults(ctx, req.(*TLMessagesSetBotShippingResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSetBotPrecheckoutResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotPrecheckoutResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSetBotPrecheckoutResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSetBotPrecheckoutResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSetBotPrecheckoutResults(ctx, req.(*TLMessagesSetBotPrecheckoutResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesUploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesUploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesUploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesUploadMedia(ctx, req.(*TLMessagesUploadMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendScreenshotNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScreenshotNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendScreenshotNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendScreenshotNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendScreenshotNotification(ctx, req.(*TLMessagesSendScreenshotNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFavedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetFavedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetFavedStickers(ctx, req.(*TLMessagesGetFavedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesFaveSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesFaveSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesFaveSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesFaveSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesFaveSticker(ctx, req.(*TLMessagesFaveSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetUnreadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetUnreadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetUnreadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetUnreadMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetUnreadMentions(ctx, req.(*TLMessagesGetUnreadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesDeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesDeleteHistory(ctx, req.(*TLMessagesDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendBroadcast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendBroadcast(ctx, req.(*TLMessagesSendBroadcast))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetStickers(ctx, req.(*TLMessagesGetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetRecentLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentLocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetRecentLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetRecentLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetRecentLocations(ctx, req.(*TLMessagesGetRecentLocations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReport(ctx, req.(*TLMessagesReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReadMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReadMentions(ctx, req.(*TLMessagesReadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendMultiMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMultiMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendMultiMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendMultiMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendMultiMedia(ctx, req.(*TLMessagesSendMultiMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesUploadEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesUploadEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesUploadEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesUploadEncryptedFile(ctx, req.(*TLMessagesUploadEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSearchStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSearchStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSearchStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSearchStickerSets(ctx, req.(*TLMessagesSearchStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetSplitRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSplitRanges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetSplitRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetSplitRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetSplitRanges(ctx, req.(*TLMessagesGetSplitRanges))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesMarkDialogUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMarkDialogUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesMarkDialogUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesMarkDialogUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesMarkDialogUnread(ctx, req.(*TLMessagesMarkDialogUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetDialogUnreadMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogUnreadMarks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetDialogUnreadMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetDialogUnreadMarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetDialogUnreadMarks(ctx, req.(*TLMessagesGetDialogUnreadMarks))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesClearAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesClearAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesClearAllDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesClearAllDrafts(ctx, req.(*TLMessagesClearAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesUpdatePinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesUpdatePinnedMessage(ctx, req.(*TLMessagesUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendVote(ctx, req.(*TLMessagesSendVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetPollResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPollResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetPollResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetPollResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetPollResults(ctx, req.(*TLMessagesGetPollResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetOnlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetOnlines)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetOnlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetOnlines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetOnlines(ctx, req.(*TLMessagesGetOnlines))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetStatsURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStatsURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetStatsURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetStatsURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetStatsURL(ctx, req.(*TLMessagesGetStatsURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesEditChatAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesEditChatAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesEditChatAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesEditChatAbout(ctx, req.(*TLMessagesEditChatAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesEditChatDefaultBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatDefaultBannedRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesEditChatDefaultBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesEditChatDefaultBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesEditChatDefaultBannedRights(ctx, req.(*TLMessagesEditChatDefaultBannedRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetEmojiKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetEmojiKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiKeywords(ctx, req.(*TLMessagesGetEmojiKeywords))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetEmojiKeywordsDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywordsDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiKeywordsDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetEmojiKeywordsDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiKeywordsDifference(ctx, req.(*TLMessagesGetEmojiKeywordsDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetEmojiURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetEmojiURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiURL(ctx, req.(*TLMessagesGetEmojiURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetEmojiKeywordsLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywordsLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiKeywordsLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetEmojiKeywordsLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetEmojiKeywordsLanguages(ctx, req.(*TLMessagesGetEmojiKeywordsLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetSearchCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSearchCounters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetSearchCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetSearchCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetSearchCounters(ctx, req.(*TLMessagesGetSearchCounters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesRequestUrlAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestUrlAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesRequestUrlAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesRequestUrlAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesRequestUrlAuth(ctx, req.(*TLMessagesRequestUrlAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesAcceptUrlAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptUrlAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesAcceptUrlAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesAcceptUrlAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesAcceptUrlAuth(ctx, req.(*TLMessagesAcceptUrlAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesHidePeerSettingsBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHidePeerSettingsBar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesHidePeerSettingsBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesHidePeerSettingsBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesHidePeerSettingsBar(ctx, req.(*TLMessagesHidePeerSettingsBar))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetScheduledHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetScheduledHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetScheduledHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetScheduledHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetScheduledHistory(ctx, req.(*TLMessagesGetScheduledHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetScheduledMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetScheduledMessages(ctx, req.(*TLMessagesGetScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesSendScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesSendScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesSendScheduledMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesSendScheduledMessages(ctx, req.(*TLMessagesSendScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesDeleteScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesDeleteScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesDeleteScheduledMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesDeleteScheduledMessages(ctx, req.(*TLMessagesDeleteScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetPollVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPollVotes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetPollVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetPollVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetPollVotes(ctx, req.(*TLMessagesGetPollVotes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesToggleStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesToggleStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesToggleStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesToggleStickerSets(ctx, req.(*TLMessagesToggleStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetDialogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetDialogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetDialogFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetDialogFilters(ctx, req.(*TLMessagesGetDialogFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetSuggestedDialogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSuggestedDialogFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetSuggestedDialogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetSuggestedDialogFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetSuggestedDialogFilters(ctx, req.(*TLMessagesGetSuggestedDialogFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesUpdateDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdateDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesUpdateDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesUpdateDialogFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesUpdateDialogFilter(ctx, req.(*TLMessagesUpdateDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesUpdateDialogFiltersOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdateDialogFiltersOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesUpdateDialogFiltersOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesUpdateDialogFiltersOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesUpdateDialogFiltersOrder(ctx, req.(*TLMessagesUpdateDialogFiltersOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetOldFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetOldFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetOldFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetOldFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetOldFeaturedStickers(ctx, req.(*TLMessagesGetOldFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetReplies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetReplies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetReplies(ctx, req.(*TLMessagesGetReplies))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesGetDiscussionMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDiscussionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesGetDiscussionMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesGetDiscussionMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesGetDiscussionMessage(ctx, req.(*TLMessagesGetDiscussionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesReadDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadDiscussion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesReadDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesReadDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesReadDiscussion(ctx, req.(*TLMessagesReadDiscussion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessagesService_MessagesUnpinAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUnpinAllMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServiceServer).MessagesUnpinAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessagesService/MessagesUnpinAllMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServiceServer).MessagesUnpinAllMessages(ctx, req.(*TLMessagesUnpinAllMessages))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCMessagesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMessagesService",
	HandlerType: (*RPCMessagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getMessages",
			Handler:    _RPCMessagesService_MessagesGetMessages_Handler,
		},
		{
			MethodName: "messages_getDialogs",
			Handler:    _RPCMessagesService_MessagesGetDialogs_Handler,
		},
		{
			MethodName: "messages_getHistory",
			Handler:    _RPCMessagesService_MessagesGetHistory_Handler,
		},
		{
			MethodName: "messages_search",
			Handler:    _RPCMessagesService_MessagesSearch_Handler,
		},
		{
			MethodName: "messages_readHistory",
			Handler:    _RPCMessagesService_MessagesReadHistory_Handler,
		},
		{
			MethodName: "messages_deleteMessages",
			Handler:    _RPCMessagesService_MessagesDeleteMessages_Handler,
		},
		{
			MethodName: "messages_receivedMessages",
			Handler:    _RPCMessagesService_MessagesReceivedMessages_Handler,
		},
		{
			MethodName: "messages_setTyping",
			Handler:    _RPCMessagesService_MessagesSetTyping_Handler,
		},
		{
			MethodName: "messages_sendMessage",
			Handler:    _RPCMessagesService_MessagesSendMessage_Handler,
		},
		{
			MethodName: "messages_sendMedia",
			Handler:    _RPCMessagesService_MessagesSendMedia_Handler,
		},
		{
			MethodName: "messages_forwardMessages",
			Handler:    _RPCMessagesService_MessagesForwardMessages_Handler,
		},
		{
			MethodName: "messages_reportSpam",
			Handler:    _RPCMessagesService_MessagesReportSpam_Handler,
		},
		{
			MethodName: "messages_hideReportSpam",
			Handler:    _RPCMessagesService_MessagesHideReportSpam_Handler,
		},
		{
			MethodName: "messages_getPeerSettings",
			Handler:    _RPCMessagesService_MessagesGetPeerSettings_Handler,
		},
		{
			MethodName: "messages_getChats",
			Handler:    _RPCMessagesService_MessagesGetChats_Handler,
		},
		{
			MethodName: "messages_getFullChat",
			Handler:    _RPCMessagesService_MessagesGetFullChat_Handler,
		},
		{
			MethodName: "messages_editChatTitle",
			Handler:    _RPCMessagesService_MessagesEditChatTitle_Handler,
		},
		{
			MethodName: "messages_editChatPhoto",
			Handler:    _RPCMessagesService_MessagesEditChatPhoto_Handler,
		},
		{
			MethodName: "messages_addChatUser",
			Handler:    _RPCMessagesService_MessagesAddChatUser_Handler,
		},
		{
			MethodName: "messages_deleteChatUser",
			Handler:    _RPCMessagesService_MessagesDeleteChatUser_Handler,
		},
		{
			MethodName: "messages_createChat",
			Handler:    _RPCMessagesService_MessagesCreateChat_Handler,
		},
		{
			MethodName: "messages_forwardMessage",
			Handler:    _RPCMessagesService_MessagesForwardMessage_Handler,
		},
		{
			MethodName: "messages_getDhConfig",
			Handler:    _RPCMessagesService_MessagesGetDhConfig_Handler,
		},
		{
			MethodName: "messages_requestEncryption",
			Handler:    _RPCMessagesService_MessagesRequestEncryption_Handler,
		},
		{
			MethodName: "messages_acceptEncryption",
			Handler:    _RPCMessagesService_MessagesAcceptEncryption_Handler,
		},
		{
			MethodName: "messages_discardEncryption",
			Handler:    _RPCMessagesService_MessagesDiscardEncryption_Handler,
		},
		{
			MethodName: "messages_setEncryptedTyping",
			Handler:    _RPCMessagesService_MessagesSetEncryptedTyping_Handler,
		},
		{
			MethodName: "messages_readEncryptedHistory",
			Handler:    _RPCMessagesService_MessagesReadEncryptedHistory_Handler,
		},
		{
			MethodName: "messages_sendEncrypted",
			Handler:    _RPCMessagesService_MessagesSendEncrypted_Handler,
		},
		{
			MethodName: "messages_sendEncryptedFile",
			Handler:    _RPCMessagesService_MessagesSendEncryptedFile_Handler,
		},
		{
			MethodName: "messages_sendEncryptedService",
			Handler:    _RPCMessagesService_MessagesSendEncryptedService_Handler,
		},
		{
			MethodName: "messages_receivedQueue",
			Handler:    _RPCMessagesService_MessagesReceivedQueue_Handler,
		},
		{
			MethodName: "messages_reportEncryptedSpam",
			Handler:    _RPCMessagesService_MessagesReportEncryptedSpam_Handler,
		},
		{
			MethodName: "messages_readMessageContents",
			Handler:    _RPCMessagesService_MessagesReadMessageContents_Handler,
		},
		{
			MethodName: "messages_getAllStickers",
			Handler:    _RPCMessagesService_MessagesGetAllStickers_Handler,
		},
		{
			MethodName: "messages_getWebPagePreview",
			Handler:    _RPCMessagesService_MessagesGetWebPagePreview_Handler,
		},
		{
			MethodName: "messages_exportChatInvite",
			Handler:    _RPCMessagesService_MessagesExportChatInvite_Handler,
		},
		{
			MethodName: "messages_checkChatInvite",
			Handler:    _RPCMessagesService_MessagesCheckChatInvite_Handler,
		},
		{
			MethodName: "messages_importChatInvite",
			Handler:    _RPCMessagesService_MessagesImportChatInvite_Handler,
		},
		{
			MethodName: "messages_getStickerSet",
			Handler:    _RPCMessagesService_MessagesGetStickerSet_Handler,
		},
		{
			MethodName: "messages_installStickerSet",
			Handler:    _RPCMessagesService_MessagesInstallStickerSet_Handler,
		},
		{
			MethodName: "messages_uninstallStickerSet",
			Handler:    _RPCMessagesService_MessagesUninstallStickerSet_Handler,
		},
		{
			MethodName: "messages_startBot",
			Handler:    _RPCMessagesService_MessagesStartBot_Handler,
		},
		{
			MethodName: "messages_getMessagesViews",
			Handler:    _RPCMessagesService_MessagesGetMessagesViews_Handler,
		},
		{
			MethodName: "messages_toggleChatAdmins",
			Handler:    _RPCMessagesService_MessagesToggleChatAdmins_Handler,
		},
		{
			MethodName: "messages_editChatAdmin",
			Handler:    _RPCMessagesService_MessagesEditChatAdmin_Handler,
		},
		{
			MethodName: "messages_migrateChat",
			Handler:    _RPCMessagesService_MessagesMigrateChat_Handler,
		},
		{
			MethodName: "messages_searchGlobal",
			Handler:    _RPCMessagesService_MessagesSearchGlobal_Handler,
		},
		{
			MethodName: "messages_reorderStickerSets",
			Handler:    _RPCMessagesService_MessagesReorderStickerSets_Handler,
		},
		{
			MethodName: "messages_getDocumentByHash",
			Handler:    _RPCMessagesService_MessagesGetDocumentByHash_Handler,
		},
		{
			MethodName: "messages_searchGifs",
			Handler:    _RPCMessagesService_MessagesSearchGifs_Handler,
		},
		{
			MethodName: "messages_getSavedGifs",
			Handler:    _RPCMessagesService_MessagesGetSavedGifs_Handler,
		},
		{
			MethodName: "messages_saveGif",
			Handler:    _RPCMessagesService_MessagesSaveGif_Handler,
		},
		{
			MethodName: "messages_getInlineBotResults",
			Handler:    _RPCMessagesService_MessagesGetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_setInlineBotResults",
			Handler:    _RPCMessagesService_MessagesSetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_sendInlineBotResult",
			Handler:    _RPCMessagesService_MessagesSendInlineBotResult_Handler,
		},
		{
			MethodName: "messages_getMessageEditData",
			Handler:    _RPCMessagesService_MessagesGetMessageEditData_Handler,
		},
		{
			MethodName: "messages_editMessage",
			Handler:    _RPCMessagesService_MessagesEditMessage_Handler,
		},
		{
			MethodName: "messages_editInlineBotMessage",
			Handler:    _RPCMessagesService_MessagesEditInlineBotMessage_Handler,
		},
		{
			MethodName: "messages_getBotCallbackAnswer",
			Handler:    _RPCMessagesService_MessagesGetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_setBotCallbackAnswer",
			Handler:    _RPCMessagesService_MessagesSetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_getPeerDialogs",
			Handler:    _RPCMessagesService_MessagesGetPeerDialogs_Handler,
		},
		{
			MethodName: "messages_saveDraft",
			Handler:    _RPCMessagesService_MessagesSaveDraft_Handler,
		},
		{
			MethodName: "messages_getAllDrafts",
			Handler:    _RPCMessagesService_MessagesGetAllDrafts_Handler,
		},
		{
			MethodName: "messages_getFeaturedStickers",
			Handler:    _RPCMessagesService_MessagesGetFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_readFeaturedStickers",
			Handler:    _RPCMessagesService_MessagesReadFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_getRecentStickers",
			Handler:    _RPCMessagesService_MessagesGetRecentStickers_Handler,
		},
		{
			MethodName: "messages_saveRecentSticker",
			Handler:    _RPCMessagesService_MessagesSaveRecentSticker_Handler,
		},
		{
			MethodName: "messages_clearRecentStickers",
			Handler:    _RPCMessagesService_MessagesClearRecentStickers_Handler,
		},
		{
			MethodName: "messages_getArchivedStickers",
			Handler:    _RPCMessagesService_MessagesGetArchivedStickers_Handler,
		},
		{
			MethodName: "messages_getMaskStickers",
			Handler:    _RPCMessagesService_MessagesGetMaskStickers_Handler,
		},
		{
			MethodName: "messages_getAttachedStickers",
			Handler:    _RPCMessagesService_MessagesGetAttachedStickers_Handler,
		},
		{
			MethodName: "messages_setGameScore",
			Handler:    _RPCMessagesService_MessagesSetGameScore_Handler,
		},
		{
			MethodName: "messages_setInlineGameScore",
			Handler:    _RPCMessagesService_MessagesSetInlineGameScore_Handler,
		},
		{
			MethodName: "messages_getGameHighScores",
			Handler:    _RPCMessagesService_MessagesGetGameHighScores_Handler,
		},
		{
			MethodName: "messages_getInlineGameHighScores",
			Handler:    _RPCMessagesService_MessagesGetInlineGameHighScores_Handler,
		},
		{
			MethodName: "messages_getCommonChats",
			Handler:    _RPCMessagesService_MessagesGetCommonChats_Handler,
		},
		{
			MethodName: "messages_getAllChats",
			Handler:    _RPCMessagesService_MessagesGetAllChats_Handler,
		},
		{
			MethodName: "messages_getWebPage",
			Handler:    _RPCMessagesService_MessagesGetWebPage_Handler,
		},
		{
			MethodName: "messages_toggleDialogPin",
			Handler:    _RPCMessagesService_MessagesToggleDialogPin_Handler,
		},
		{
			MethodName: "messages_reorderPinnedDialogs",
			Handler:    _RPCMessagesService_MessagesReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_getPinnedDialogs",
			Handler:    _RPCMessagesService_MessagesGetPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_setBotShippingResults",
			Handler:    _RPCMessagesService_MessagesSetBotShippingResults_Handler,
		},
		{
			MethodName: "messages_setBotPrecheckoutResults",
			Handler:    _RPCMessagesService_MessagesSetBotPrecheckoutResults_Handler,
		},
		{
			MethodName: "messages_uploadMedia",
			Handler:    _RPCMessagesService_MessagesUploadMedia_Handler,
		},
		{
			MethodName: "messages_sendScreenshotNotification",
			Handler:    _RPCMessagesService_MessagesSendScreenshotNotification_Handler,
		},
		{
			MethodName: "messages_getFavedStickers",
			Handler:    _RPCMessagesService_MessagesGetFavedStickers_Handler,
		},
		{
			MethodName: "messages_faveSticker",
			Handler:    _RPCMessagesService_MessagesFaveSticker_Handler,
		},
		{
			MethodName: "messages_getUnreadMentions",
			Handler:    _RPCMessagesService_MessagesGetUnreadMentions_Handler,
		},
		{
			MethodName: "messages_deleteHistory",
			Handler:    _RPCMessagesService_MessagesDeleteHistory_Handler,
		},
		{
			MethodName: "messages_sendBroadcast",
			Handler:    _RPCMessagesService_MessagesSendBroadcast_Handler,
		},
		{
			MethodName: "messages_getStickers",
			Handler:    _RPCMessagesService_MessagesGetStickers_Handler,
		},
		{
			MethodName: "messages_getRecentLocations",
			Handler:    _RPCMessagesService_MessagesGetRecentLocations_Handler,
		},
		{
			MethodName: "messages_report",
			Handler:    _RPCMessagesService_MessagesReport_Handler,
		},
		{
			MethodName: "messages_readMentions",
			Handler:    _RPCMessagesService_MessagesReadMentions_Handler,
		},
		{
			MethodName: "messages_sendMultiMedia",
			Handler:    _RPCMessagesService_MessagesSendMultiMedia_Handler,
		},
		{
			MethodName: "messages_uploadEncryptedFile",
			Handler:    _RPCMessagesService_MessagesUploadEncryptedFile_Handler,
		},
		{
			MethodName: "messages_searchStickerSets",
			Handler:    _RPCMessagesService_MessagesSearchStickerSets_Handler,
		},
		{
			MethodName: "messages_getSplitRanges",
			Handler:    _RPCMessagesService_MessagesGetSplitRanges_Handler,
		},
		{
			MethodName: "messages_markDialogUnread",
			Handler:    _RPCMessagesService_MessagesMarkDialogUnread_Handler,
		},
		{
			MethodName: "messages_getDialogUnreadMarks",
			Handler:    _RPCMessagesService_MessagesGetDialogUnreadMarks_Handler,
		},
		{
			MethodName: "messages_clearAllDrafts",
			Handler:    _RPCMessagesService_MessagesClearAllDrafts_Handler,
		},
		{
			MethodName: "messages_updatePinnedMessage",
			Handler:    _RPCMessagesService_MessagesUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "messages_sendVote",
			Handler:    _RPCMessagesService_MessagesSendVote_Handler,
		},
		{
			MethodName: "messages_getPollResults",
			Handler:    _RPCMessagesService_MessagesGetPollResults_Handler,
		},
		{
			MethodName: "messages_getOnlines",
			Handler:    _RPCMessagesService_MessagesGetOnlines_Handler,
		},
		{
			MethodName: "messages_getStatsURL",
			Handler:    _RPCMessagesService_MessagesGetStatsURL_Handler,
		},
		{
			MethodName: "messages_editChatAbout",
			Handler:    _RPCMessagesService_MessagesEditChatAbout_Handler,
		},
		{
			MethodName: "messages_editChatDefaultBannedRights",
			Handler:    _RPCMessagesService_MessagesEditChatDefaultBannedRights_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywords",
			Handler:    _RPCMessagesService_MessagesGetEmojiKeywords_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywordsDifference",
			Handler:    _RPCMessagesService_MessagesGetEmojiKeywordsDifference_Handler,
		},
		{
			MethodName: "messages_getEmojiURL",
			Handler:    _RPCMessagesService_MessagesGetEmojiURL_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywordsLanguages",
			Handler:    _RPCMessagesService_MessagesGetEmojiKeywordsLanguages_Handler,
		},
		{
			MethodName: "messages_getSearchCounters",
			Handler:    _RPCMessagesService_MessagesGetSearchCounters_Handler,
		},
		{
			MethodName: "messages_requestUrlAuth",
			Handler:    _RPCMessagesService_MessagesRequestUrlAuth_Handler,
		},
		{
			MethodName: "messages_acceptUrlAuth",
			Handler:    _RPCMessagesService_MessagesAcceptUrlAuth_Handler,
		},
		{
			MethodName: "messages_hidePeerSettingsBar",
			Handler:    _RPCMessagesService_MessagesHidePeerSettingsBar_Handler,
		},
		{
			MethodName: "messages_getScheduledHistory",
			Handler:    _RPCMessagesService_MessagesGetScheduledHistory_Handler,
		},
		{
			MethodName: "messages_getScheduledMessages",
			Handler:    _RPCMessagesService_MessagesGetScheduledMessages_Handler,
		},
		{
			MethodName: "messages_sendScheduledMessages",
			Handler:    _RPCMessagesService_MessagesSendScheduledMessages_Handler,
		},
		{
			MethodName: "messages_deleteScheduledMessages",
			Handler:    _RPCMessagesService_MessagesDeleteScheduledMessages_Handler,
		},
		{
			MethodName: "messages_getPollVotes",
			Handler:    _RPCMessagesService_MessagesGetPollVotes_Handler,
		},
		{
			MethodName: "messages_toggleStickerSets",
			Handler:    _RPCMessagesService_MessagesToggleStickerSets_Handler,
		},
		{
			MethodName: "messages_getDialogFilters",
			Handler:    _RPCMessagesService_MessagesGetDialogFilters_Handler,
		},
		{
			MethodName: "messages_getSuggestedDialogFilters",
			Handler:    _RPCMessagesService_MessagesGetSuggestedDialogFilters_Handler,
		},
		{
			MethodName: "messages_updateDialogFilter",
			Handler:    _RPCMessagesService_MessagesUpdateDialogFilter_Handler,
		},
		{
			MethodName: "messages_updateDialogFiltersOrder",
			Handler:    _RPCMessagesService_MessagesUpdateDialogFiltersOrder_Handler,
		},
		{
			MethodName: "messages_getOldFeaturedStickers",
			Handler:    _RPCMessagesService_MessagesGetOldFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_getReplies",
			Handler:    _RPCMessagesService_MessagesGetReplies_Handler,
		},
		{
			MethodName: "messages_getDiscussionMessage",
			Handler:    _RPCMessagesService_MessagesGetDiscussionMessage_Handler,
		},
		{
			MethodName: "messages_readDiscussion",
			Handler:    _RPCMessagesService_MessagesReadDiscussion_Handler,
		},
		{
			MethodName: "messages_unpinAllMessages",
			Handler:    _RPCMessagesService_MessagesUnpinAllMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCMessagesService_serviceDesc = map[string][]interface{}{
	"TLMessagesGetMessages": {
		"/mtproto.RPCMessagesService/messages_getMessages",
		func() interface{} { return new(Messages_Messages) },
		"MessagesGetMessages",
	},
	"TLMessagesGetDialogs": {
		"/mtproto.RPCMessagesService/messages_getDialogs",
		func() interface{} { return new(Messages_Dialogs) },
		"MessagesGetDialogs",
	},
	"TLMessagesGetHistory": {
		"/mtproto.RPCMessagesService/messages_getHistory",
		func() interface{} { return new(Messages_Messages) },
		"MessagesGetHistory",
	},
	"TLMessagesSearch": {
		"/mtproto.RPCMessagesService/messages_search",
		func() interface{} { return new(Messages_Messages) },
		"MessagesSearch",
	},
	"TLMessagesReadHistory": {
		"/mtproto.RPCMessagesService/messages_readHistory",
		func() interface{} { return new(Response_MessagesReadHistory) },
		"MessagesReadHistory",
	},
	"TLMessagesDeleteMessages": {
		"/mtproto.RPCMessagesService/messages_deleteMessages",
		func() interface{} { return new(Messages_AffectedMessages) },
		"MessagesDeleteMessages",
	},
	"TLMessagesReceivedMessages": {
		"/mtproto.RPCMessagesService/messages_receivedMessages",
		func() interface{} { return new(Vector_ReceivedNotifyMessage) },
		"MessagesReceivedMessages",
	},
	"TLMessagesSetTyping": {
		"/mtproto.RPCMessagesService/messages_setTyping",
		func() interface{} { return new(Bool) },
		"MessagesSetTyping",
	},
	"TLMessagesSendMessage": {
		"/mtproto.RPCMessagesService/messages_sendMessage",
		func() interface{} { return new(Updates) },
		"MessagesSendMessage",
	},
	"TLMessagesSendMedia": {
		"/mtproto.RPCMessagesService/messages_sendMedia",
		func() interface{} { return new(Updates) },
		"MessagesSendMedia",
	},
	"TLMessagesForwardMessages": {
		"/mtproto.RPCMessagesService/messages_forwardMessages",
		func() interface{} { return new(Updates) },
		"MessagesForwardMessages",
	},
	"TLMessagesReportSpam": {
		"/mtproto.RPCMessagesService/messages_reportSpam",
		func() interface{} { return new(Bool) },
		"MessagesReportSpam",
	},
	"TLMessagesHideReportSpam": {
		"/mtproto.RPCMessagesService/messages_hideReportSpam",
		func() interface{} { return new(Bool) },
		"MessagesHideReportSpam",
	},
	"TLMessagesGetPeerSettings": {
		"/mtproto.RPCMessagesService/messages_getPeerSettings",
		func() interface{} { return new(PeerSettings) },
		"MessagesGetPeerSettings",
	},
	"TLMessagesGetChats": {
		"/mtproto.RPCMessagesService/messages_getChats",
		func() interface{} { return new(Messages_Chats) },
		"MessagesGetChats",
	},
	"TLMessagesGetFullChat": {
		"/mtproto.RPCMessagesService/messages_getFullChat",
		func() interface{} { return new(Messages_ChatFull) },
		"MessagesGetFullChat",
	},
	"TLMessagesEditChatTitle": {
		"/mtproto.RPCMessagesService/messages_editChatTitle",
		func() interface{} { return new(Updates) },
		"MessagesEditChatTitle",
	},
	"TLMessagesEditChatPhoto": {
		"/mtproto.RPCMessagesService/messages_editChatPhoto",
		func() interface{} { return new(Updates) },
		"MessagesEditChatPhoto",
	},
	"TLMessagesAddChatUser": {
		"/mtproto.RPCMessagesService/messages_addChatUser",
		func() interface{} { return new(Updates) },
		"MessagesAddChatUser",
	},
	"TLMessagesDeleteChatUser": {
		"/mtproto.RPCMessagesService/messages_deleteChatUser",
		func() interface{} { return new(Updates) },
		"MessagesDeleteChatUser",
	},
	"TLMessagesCreateChat": {
		"/mtproto.RPCMessagesService/messages_createChat",
		func() interface{} { return new(Updates) },
		"MessagesCreateChat",
	},
	"TLMessagesForwardMessage": {
		"/mtproto.RPCMessagesService/messages_forwardMessage",
		func() interface{} { return new(Updates) },
		"MessagesForwardMessage",
	},
	"TLMessagesGetDhConfig": {
		"/mtproto.RPCMessagesService/messages_getDhConfig",
		func() interface{} { return new(Messages_DhConfig) },
		"MessagesGetDhConfig",
	},
	"TLMessagesRequestEncryption": {
		"/mtproto.RPCMessagesService/messages_requestEncryption",
		func() interface{} { return new(EncryptedChat) },
		"MessagesRequestEncryption",
	},
	"TLMessagesAcceptEncryption": {
		"/mtproto.RPCMessagesService/messages_acceptEncryption",
		func() interface{} { return new(EncryptedChat) },
		"MessagesAcceptEncryption",
	},
	"TLMessagesDiscardEncryption": {
		"/mtproto.RPCMessagesService/messages_discardEncryption",
		func() interface{} { return new(Bool) },
		"MessagesDiscardEncryption",
	},
	"TLMessagesSetEncryptedTyping": {
		"/mtproto.RPCMessagesService/messages_setEncryptedTyping",
		func() interface{} { return new(Bool) },
		"MessagesSetEncryptedTyping",
	},
	"TLMessagesReadEncryptedHistory": {
		"/mtproto.RPCMessagesService/messages_readEncryptedHistory",
		func() interface{} { return new(Bool) },
		"MessagesReadEncryptedHistory",
	},
	"TLMessagesSendEncrypted": {
		"/mtproto.RPCMessagesService/messages_sendEncrypted",
		func() interface{} { return new(Messages_SentEncryptedMessage) },
		"MessagesSendEncrypted",
	},
	"TLMessagesSendEncryptedFile": {
		"/mtproto.RPCMessagesService/messages_sendEncryptedFile",
		func() interface{} { return new(Messages_SentEncryptedMessage) },
		"MessagesSendEncryptedFile",
	},
	"TLMessagesSendEncryptedService": {
		"/mtproto.RPCMessagesService/messages_sendEncryptedService",
		func() interface{} { return new(Messages_SentEncryptedMessage) },
		"MessagesSendEncryptedService",
	},
	"TLMessagesReceivedQueue": {
		"/mtproto.RPCMessagesService/messages_receivedQueue",
		func() interface{} { return new(VectorLong) },
		"MessagesReceivedQueue",
	},
	"TLMessagesReportEncryptedSpam": {
		"/mtproto.RPCMessagesService/messages_reportEncryptedSpam",
		func() interface{} { return new(Bool) },
		"MessagesReportEncryptedSpam",
	},
	"TLMessagesReadMessageContents": {
		"/mtproto.RPCMessagesService/messages_readMessageContents",
		func() interface{} { return new(Messages_AffectedMessages) },
		"MessagesReadMessageContents",
	},
	"TLMessagesGetAllStickers": {
		"/mtproto.RPCMessagesService/messages_getAllStickers",
		func() interface{} { return new(Messages_AllStickers) },
		"MessagesGetAllStickers",
	},
	"TLMessagesGetWebPagePreview": {
		"/mtproto.RPCMessagesService/messages_getWebPagePreview",
		func() interface{} { return new(MessageMedia) },
		"MessagesGetWebPagePreview",
	},
	"TLMessagesExportChatInvite": {
		"/mtproto.RPCMessagesService/messages_exportChatInvite",
		func() interface{} { return new(ExportedChatInvite) },
		"MessagesExportChatInvite",
	},
	"TLMessagesCheckChatInvite": {
		"/mtproto.RPCMessagesService/messages_checkChatInvite",
		func() interface{} { return new(ChatInvite) },
		"MessagesCheckChatInvite",
	},
	"TLMessagesImportChatInvite": {
		"/mtproto.RPCMessagesService/messages_importChatInvite",
		func() interface{} { return new(Updates) },
		"MessagesImportChatInvite",
	},
	"TLMessagesGetStickerSet": {
		"/mtproto.RPCMessagesService/messages_getStickerSet",
		func() interface{} { return new(Messages_StickerSet) },
		"MessagesGetStickerSet",
	},
	"TLMessagesInstallStickerSet": {
		"/mtproto.RPCMessagesService/messages_installStickerSet",
		func() interface{} { return new(Response_MessagesInstallStickerSet) },
		"MessagesInstallStickerSet",
	},
	"TLMessagesUninstallStickerSet": {
		"/mtproto.RPCMessagesService/messages_uninstallStickerSet",
		func() interface{} { return new(Bool) },
		"MessagesUninstallStickerSet",
	},
	"TLMessagesStartBot": {
		"/mtproto.RPCMessagesService/messages_startBot",
		func() interface{} { return new(Updates) },
		"MessagesStartBot",
	},
	"TLMessagesGetMessagesViews": {
		"/mtproto.RPCMessagesService/messages_getMessagesViews",
		func() interface{} { return new(Response_MessagesGetMessagesViews) },
		"MessagesGetMessagesViews",
	},
	"TLMessagesToggleChatAdmins": {
		"/mtproto.RPCMessagesService/messages_toggleChatAdmins",
		func() interface{} { return new(Updates) },
		"MessagesToggleChatAdmins",
	},
	"TLMessagesEditChatAdmin": {
		"/mtproto.RPCMessagesService/messages_editChatAdmin",
		func() interface{} { return new(Bool) },
		"MessagesEditChatAdmin",
	},
	"TLMessagesMigrateChat": {
		"/mtproto.RPCMessagesService/messages_migrateChat",
		func() interface{} { return new(Updates) },
		"MessagesMigrateChat",
	},
	"TLMessagesSearchGlobal": {
		"/mtproto.RPCMessagesService/messages_searchGlobal",
		func() interface{} { return new(Messages_Messages) },
		"MessagesSearchGlobal",
	},
	"TLMessagesReorderStickerSets": {
		"/mtproto.RPCMessagesService/messages_reorderStickerSets",
		func() interface{} { return new(Bool) },
		"MessagesReorderStickerSets",
	},
	"TLMessagesGetDocumentByHash": {
		"/mtproto.RPCMessagesService/messages_getDocumentByHash",
		func() interface{} { return new(Document) },
		"MessagesGetDocumentByHash",
	},
	"TLMessagesSearchGifs": {
		"/mtproto.RPCMessagesService/messages_searchGifs",
		func() interface{} { return new(Messages_FoundGifs) },
		"MessagesSearchGifs",
	},
	"TLMessagesGetSavedGifs": {
		"/mtproto.RPCMessagesService/messages_getSavedGifs",
		func() interface{} { return new(Messages_SavedGifs) },
		"MessagesGetSavedGifs",
	},
	"TLMessagesSaveGif": {
		"/mtproto.RPCMessagesService/messages_saveGif",
		func() interface{} { return new(Bool) },
		"MessagesSaveGif",
	},
	"TLMessagesGetInlineBotResults": {
		"/mtproto.RPCMessagesService/messages_getInlineBotResults",
		func() interface{} { return new(Messages_BotResults) },
		"MessagesGetInlineBotResults",
	},
	"TLMessagesSetInlineBotResults": {
		"/mtproto.RPCMessagesService/messages_setInlineBotResults",
		func() interface{} { return new(Bool) },
		"MessagesSetInlineBotResults",
	},
	"TLMessagesSendInlineBotResult": {
		"/mtproto.RPCMessagesService/messages_sendInlineBotResult",
		func() interface{} { return new(Updates) },
		"MessagesSendInlineBotResult",
	},
	"TLMessagesGetMessageEditData": {
		"/mtproto.RPCMessagesService/messages_getMessageEditData",
		func() interface{} { return new(Messages_MessageEditData) },
		"MessagesGetMessageEditData",
	},
	"TLMessagesEditMessage": {
		"/mtproto.RPCMessagesService/messages_editMessage",
		func() interface{} { return new(Updates) },
		"MessagesEditMessage",
	},
	"TLMessagesEditInlineBotMessage": {
		"/mtproto.RPCMessagesService/messages_editInlineBotMessage",
		func() interface{} { return new(Bool) },
		"MessagesEditInlineBotMessage",
	},
	"TLMessagesGetBotCallbackAnswer": {
		"/mtproto.RPCMessagesService/messages_getBotCallbackAnswer",
		func() interface{} { return new(Messages_BotCallbackAnswer) },
		"MessagesGetBotCallbackAnswer",
	},
	"TLMessagesSetBotCallbackAnswer": {
		"/mtproto.RPCMessagesService/messages_setBotCallbackAnswer",
		func() interface{} { return new(Bool) },
		"MessagesSetBotCallbackAnswer",
	},
	"TLMessagesGetPeerDialogs": {
		"/mtproto.RPCMessagesService/messages_getPeerDialogs",
		func() interface{} { return new(Messages_PeerDialogs) },
		"MessagesGetPeerDialogs",
	},
	"TLMessagesSaveDraft": {
		"/mtproto.RPCMessagesService/messages_saveDraft",
		func() interface{} { return new(Bool) },
		"MessagesSaveDraft",
	},
	"TLMessagesGetAllDrafts": {
		"/mtproto.RPCMessagesService/messages_getAllDrafts",
		func() interface{} { return new(Updates) },
		"MessagesGetAllDrafts",
	},
	"TLMessagesGetFeaturedStickers": {
		"/mtproto.RPCMessagesService/messages_getFeaturedStickers",
		func() interface{} { return new(Messages_FeaturedStickers) },
		"MessagesGetFeaturedStickers",
	},
	"TLMessagesReadFeaturedStickers": {
		"/mtproto.RPCMessagesService/messages_readFeaturedStickers",
		func() interface{} { return new(Bool) },
		"MessagesReadFeaturedStickers",
	},
	"TLMessagesGetRecentStickers": {
		"/mtproto.RPCMessagesService/messages_getRecentStickers",
		func() interface{} { return new(Messages_RecentStickers) },
		"MessagesGetRecentStickers",
	},
	"TLMessagesSaveRecentSticker": {
		"/mtproto.RPCMessagesService/messages_saveRecentSticker",
		func() interface{} { return new(Bool) },
		"MessagesSaveRecentSticker",
	},
	"TLMessagesClearRecentStickers": {
		"/mtproto.RPCMessagesService/messages_clearRecentStickers",
		func() interface{} { return new(Bool) },
		"MessagesClearRecentStickers",
	},
	"TLMessagesGetArchivedStickers": {
		"/mtproto.RPCMessagesService/messages_getArchivedStickers",
		func() interface{} { return new(Messages_ArchivedStickers) },
		"MessagesGetArchivedStickers",
	},
	"TLMessagesGetMaskStickers": {
		"/mtproto.RPCMessagesService/messages_getMaskStickers",
		func() interface{} { return new(Messages_AllStickers) },
		"MessagesGetMaskStickers",
	},
	"TLMessagesGetAttachedStickers": {
		"/mtproto.RPCMessagesService/messages_getAttachedStickers",
		func() interface{} { return new(Vector_StickerSetCovered) },
		"MessagesGetAttachedStickers",
	},
	"TLMessagesSetGameScore": {
		"/mtproto.RPCMessagesService/messages_setGameScore",
		func() interface{} { return new(Updates) },
		"MessagesSetGameScore",
	},
	"TLMessagesSetInlineGameScore": {
		"/mtproto.RPCMessagesService/messages_setInlineGameScore",
		func() interface{} { return new(Bool) },
		"MessagesSetInlineGameScore",
	},
	"TLMessagesGetGameHighScores": {
		"/mtproto.RPCMessagesService/messages_getGameHighScores",
		func() interface{} { return new(Messages_HighScores) },
		"MessagesGetGameHighScores",
	},
	"TLMessagesGetInlineGameHighScores": {
		"/mtproto.RPCMessagesService/messages_getInlineGameHighScores",
		func() interface{} { return new(Messages_HighScores) },
		"MessagesGetInlineGameHighScores",
	},
	"TLMessagesGetCommonChats": {
		"/mtproto.RPCMessagesService/messages_getCommonChats",
		func() interface{} { return new(Messages_Chats) },
		"MessagesGetCommonChats",
	},
	"TLMessagesGetAllChats": {
		"/mtproto.RPCMessagesService/messages_getAllChats",
		func() interface{} { return new(Messages_Chats) },
		"MessagesGetAllChats",
	},
	"TLMessagesGetWebPage": {
		"/mtproto.RPCMessagesService/messages_getWebPage",
		func() interface{} { return new(WebPage) },
		"MessagesGetWebPage",
	},
	"TLMessagesToggleDialogPin": {
		"/mtproto.RPCMessagesService/messages_toggleDialogPin",
		func() interface{} { return new(Bool) },
		"MessagesToggleDialogPin",
	},
	"TLMessagesReorderPinnedDialogs": {
		"/mtproto.RPCMessagesService/messages_reorderPinnedDialogs",
		func() interface{} { return new(Bool) },
		"MessagesReorderPinnedDialogs",
	},
	"TLMessagesGetPinnedDialogs": {
		"/mtproto.RPCMessagesService/messages_getPinnedDialogs",
		func() interface{} { return new(Messages_PeerDialogs) },
		"MessagesGetPinnedDialogs",
	},
	"TLMessagesSetBotShippingResults": {
		"/mtproto.RPCMessagesService/messages_setBotShippingResults",
		func() interface{} { return new(Bool) },
		"MessagesSetBotShippingResults",
	},
	"TLMessagesSetBotPrecheckoutResults": {
		"/mtproto.RPCMessagesService/messages_setBotPrecheckoutResults",
		func() interface{} { return new(Bool) },
		"MessagesSetBotPrecheckoutResults",
	},
	"TLMessagesUploadMedia": {
		"/mtproto.RPCMessagesService/messages_uploadMedia",
		func() interface{} { return new(MessageMedia) },
		"MessagesUploadMedia",
	},
	"TLMessagesSendScreenshotNotification": {
		"/mtproto.RPCMessagesService/messages_sendScreenshotNotification",
		func() interface{} { return new(Updates) },
		"MessagesSendScreenshotNotification",
	},
	"TLMessagesGetFavedStickers": {
		"/mtproto.RPCMessagesService/messages_getFavedStickers",
		func() interface{} { return new(Messages_FavedStickers) },
		"MessagesGetFavedStickers",
	},
	"TLMessagesFaveSticker": {
		"/mtproto.RPCMessagesService/messages_faveSticker",
		func() interface{} { return new(Bool) },
		"MessagesFaveSticker",
	},
	"TLMessagesGetUnreadMentions": {
		"/mtproto.RPCMessagesService/messages_getUnreadMentions",
		func() interface{} { return new(Messages_Messages) },
		"MessagesGetUnreadMentions",
	},
	"TLMessagesDeleteHistory": {
		"/mtproto.RPCMessagesService/messages_deleteHistory",
		func() interface{} { return new(Messages_AffectedHistory) },
		"MessagesDeleteHistory",
	},
	"TLMessagesSendBroadcast": {
		"/mtproto.RPCMessagesService/messages_sendBroadcast",
		func() interface{} { return new(Updates) },
		"MessagesSendBroadcast",
	},
	"TLMessagesGetStickers": {
		"/mtproto.RPCMessagesService/messages_getStickers",
		func() interface{} { return new(Messages_Stickers) },
		"MessagesGetStickers",
	},
	"TLMessagesGetRecentLocations": {
		"/mtproto.RPCMessagesService/messages_getRecentLocations",
		func() interface{} { return new(Messages_Messages) },
		"MessagesGetRecentLocations",
	},
	"TLMessagesReport": {
		"/mtproto.RPCMessagesService/messages_report",
		func() interface{} { return new(Bool) },
		"MessagesReport",
	},
	"TLMessagesReadMentions": {
		"/mtproto.RPCMessagesService/messages_readMentions",
		func() interface{} { return new(Messages_AffectedHistory) },
		"MessagesReadMentions",
	},
	"TLMessagesSendMultiMedia": {
		"/mtproto.RPCMessagesService/messages_sendMultiMedia",
		func() interface{} { return new(Updates) },
		"MessagesSendMultiMedia",
	},
	"TLMessagesUploadEncryptedFile": {
		"/mtproto.RPCMessagesService/messages_uploadEncryptedFile",
		func() interface{} { return new(EncryptedFile) },
		"MessagesUploadEncryptedFile",
	},
	"TLMessagesSearchStickerSets": {
		"/mtproto.RPCMessagesService/messages_searchStickerSets",
		func() interface{} { return new(Messages_FoundStickerSets) },
		"MessagesSearchStickerSets",
	},
	"TLMessagesGetSplitRanges": {
		"/mtproto.RPCMessagesService/messages_getSplitRanges",
		func() interface{} { return new(Vector_MessageRange) },
		"MessagesGetSplitRanges",
	},
	"TLMessagesMarkDialogUnread": {
		"/mtproto.RPCMessagesService/messages_markDialogUnread",
		func() interface{} { return new(Bool) },
		"MessagesMarkDialogUnread",
	},
	"TLMessagesGetDialogUnreadMarks": {
		"/mtproto.RPCMessagesService/messages_getDialogUnreadMarks",
		func() interface{} { return new(Vector_DialogPeer) },
		"MessagesGetDialogUnreadMarks",
	},
	"TLMessagesClearAllDrafts": {
		"/mtproto.RPCMessagesService/messages_clearAllDrafts",
		func() interface{} { return new(Bool) },
		"MessagesClearAllDrafts",
	},
	"TLMessagesUpdatePinnedMessage": {
		"/mtproto.RPCMessagesService/messages_updatePinnedMessage",
		func() interface{} { return new(Updates) },
		"MessagesUpdatePinnedMessage",
	},
	"TLMessagesSendVote": {
		"/mtproto.RPCMessagesService/messages_sendVote",
		func() interface{} { return new(Updates) },
		"MessagesSendVote",
	},
	"TLMessagesGetPollResults": {
		"/mtproto.RPCMessagesService/messages_getPollResults",
		func() interface{} { return new(Updates) },
		"MessagesGetPollResults",
	},
	"TLMessagesGetOnlines": {
		"/mtproto.RPCMessagesService/messages_getOnlines",
		func() interface{} { return new(ChatOnlines) },
		"MessagesGetOnlines",
	},
	"TLMessagesGetStatsURL": {
		"/mtproto.RPCMessagesService/messages_getStatsURL",
		func() interface{} { return new(StatsURL) },
		"MessagesGetStatsURL",
	},
	"TLMessagesEditChatAbout": {
		"/mtproto.RPCMessagesService/messages_editChatAbout",
		func() interface{} { return new(Bool) },
		"MessagesEditChatAbout",
	},
	"TLMessagesEditChatDefaultBannedRights": {
		"/mtproto.RPCMessagesService/messages_editChatDefaultBannedRights",
		func() interface{} { return new(Updates) },
		"MessagesEditChatDefaultBannedRights",
	},
	"TLMessagesGetEmojiKeywords": {
		"/mtproto.RPCMessagesService/messages_getEmojiKeywords",
		func() interface{} { return new(EmojiKeywordsDifference) },
		"MessagesGetEmojiKeywords",
	},
	"TLMessagesGetEmojiKeywordsDifference": {
		"/mtproto.RPCMessagesService/messages_getEmojiKeywordsDifference",
		func() interface{} { return new(EmojiKeywordsDifference) },
		"MessagesGetEmojiKeywordsDifference",
	},
	"TLMessagesGetEmojiURL": {
		"/mtproto.RPCMessagesService/messages_getEmojiURL",
		func() interface{} { return new(EmojiURL) },
		"MessagesGetEmojiURL",
	},
	"TLMessagesGetEmojiKeywordsLanguages": {
		"/mtproto.RPCMessagesService/messages_getEmojiKeywordsLanguages",
		func() interface{} { return new(Vector_EmojiLanguage) },
		"MessagesGetEmojiKeywordsLanguages",
	},
	"TLMessagesGetSearchCounters": {
		"/mtproto.RPCMessagesService/messages_getSearchCounters",
		func() interface{} { return new(VectorMessages_SearchCounter) },
		"MessagesGetSearchCounters",
	},
	"TLMessagesRequestUrlAuth": {
		"/mtproto.RPCMessagesService/messages_requestUrlAuth",
		func() interface{} { return new(UrlAuthResult) },
		"MessagesRequestUrlAuth",
	},
	"TLMessagesAcceptUrlAuth": {
		"/mtproto.RPCMessagesService/messages_acceptUrlAuth",
		func() interface{} { return new(UrlAuthResult) },
		"MessagesAcceptUrlAuth",
	},
	"TLMessagesHidePeerSettingsBar": {
		"/mtproto.RPCMessagesService/messages_hidePeerSettingsBar",
		func() interface{} { return new(Bool) },
		"MessagesHidePeerSettingsBar",
	},
	"TLMessagesGetScheduledHistory": {
		"/mtproto.RPCMessagesService/messages_getScheduledHistory",
		func() interface{} { return new(Messages_Messages) },
		"MessagesGetScheduledHistory",
	},
	"TLMessagesGetScheduledMessages": {
		"/mtproto.RPCMessagesService/messages_getScheduledMessages",
		func() interface{} { return new(Messages_Messages) },
		"MessagesGetScheduledMessages",
	},
	"TLMessagesSendScheduledMessages": {
		"/mtproto.RPCMessagesService/messages_sendScheduledMessages",
		func() interface{} { return new(Updates) },
		"MessagesSendScheduledMessages",
	},
	"TLMessagesDeleteScheduledMessages": {
		"/mtproto.RPCMessagesService/messages_deleteScheduledMessages",
		func() interface{} { return new(Updates) },
		"MessagesDeleteScheduledMessages",
	},
	"TLMessagesGetPollVotes": {
		"/mtproto.RPCMessagesService/messages_getPollVotes",
		func() interface{} { return new(Messages_VotesList) },
		"MessagesGetPollVotes",
	},
	"TLMessagesToggleStickerSets": {
		"/mtproto.RPCMessagesService/messages_toggleStickerSets",
		func() interface{} { return new(Bool) },
		"MessagesToggleStickerSets",
	},
	"TLMessagesGetDialogFilters": {
		"/mtproto.RPCMessagesService/messages_getDialogFilters",
		func() interface{} { return new(Vector_DialogFilter) },
		"MessagesGetDialogFilters",
	},
	"TLMessagesGetSuggestedDialogFilters": {
		"/mtproto.RPCMessagesService/messages_getSuggestedDialogFilters",
		func() interface{} { return new(Vector_DialogFilterSuggested) },
		"MessagesGetSuggestedDialogFilters",
	},
	"TLMessagesUpdateDialogFilter": {
		"/mtproto.RPCMessagesService/messages_updateDialogFilter",
		func() interface{} { return new(Bool) },
		"MessagesUpdateDialogFilter",
	},
	"TLMessagesUpdateDialogFiltersOrder": {
		"/mtproto.RPCMessagesService/messages_updateDialogFiltersOrder",
		func() interface{} { return new(Bool) },
		"MessagesUpdateDialogFiltersOrder",
	},
	"TLMessagesGetOldFeaturedStickers": {
		"/mtproto.RPCMessagesService/messages_getOldFeaturedStickers",
		func() interface{} { return new(Messages_FeaturedStickers) },
		"MessagesGetOldFeaturedStickers",
	},
	"TLMessagesGetReplies": {
		"/mtproto.RPCMessagesService/messages_getReplies",
		func() interface{} { return new(Messages_Messages) },
		"MessagesGetReplies",
	},
	"TLMessagesGetDiscussionMessage": {
		"/mtproto.RPCMessagesService/messages_getDiscussionMessage",
		func() interface{} { return new(Messages_DiscussionMessage) },
		"MessagesGetDiscussionMessage",
	},
	"TLMessagesReadDiscussion": {
		"/mtproto.RPCMessagesService/messages_readDiscussion",
		func() interface{} { return new(Bool) },
		"MessagesReadDiscussion",
	},
	"TLMessagesUnpinAllMessages": {
		"/mtproto.RPCMessagesService/messages_unpinAllMessages",
		func() interface{} { return new(Messages_AffectedHistory) },
		"MessagesUnpinAllMessages",
	},
}

// RPCPaymentsServiceClient is the client API for RPCPaymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCPaymentsServiceClient interface {
	//  payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	//
	PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error)
	//  payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	//
	PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error)
	//  payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	//
	PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error)
	//  payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	//
	PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error)
	//  payments.getSavedInfo#227d824b = payments.SavedInfo;
	//
	PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error)
	//  payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	//
	PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error)
	//  payments.getBankCardData#2e79d779 number:string = payments.BankCardData;
	//
	PaymentsGetBankCardData(ctx context.Context, in *TLPaymentsGetBankCardData, opts ...grpc.CallOption) (*Payments_BankCardData, error)
}

type rPCPaymentsServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCPaymentsServiceClient(cc *grpc.ClientConn) RPCPaymentsServiceClient {
	return &rPCPaymentsServiceClient{cc}
}

func (c *rPCPaymentsServiceClient) PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error) {
	out := new(Payments_PaymentForm)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPaymentsService/payments_getPaymentForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsServiceClient) PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error) {
	out := new(Payments_PaymentReceipt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPaymentsService/payments_getPaymentReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsServiceClient) PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error) {
	out := new(Payments_ValidatedRequestedInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPaymentsService/payments_validateRequestedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsServiceClient) PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error) {
	out := new(Payments_PaymentResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPaymentsService/payments_sendPaymentForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsServiceClient) PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error) {
	out := new(Payments_SavedInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPaymentsService/payments_getSavedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsServiceClient) PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPaymentsService/payments_clearSavedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsServiceClient) PaymentsGetBankCardData(ctx context.Context, in *TLPaymentsGetBankCardData, opts ...grpc.CallOption) (*Payments_BankCardData, error) {
	out := new(Payments_BankCardData)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPaymentsService/payments_getBankCardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPaymentsServiceServer is the server API for RPCPaymentsService service.
type RPCPaymentsServiceServer interface {
	//  payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	//
	PaymentsGetPaymentForm(context.Context, *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error)
	//  payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	//
	PaymentsGetPaymentReceipt(context.Context, *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error)
	//  payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	//
	PaymentsValidateRequestedInfo(context.Context, *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error)
	//  payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	//
	PaymentsSendPaymentForm(context.Context, *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error)
	//  payments.getSavedInfo#227d824b = payments.SavedInfo;
	//
	PaymentsGetSavedInfo(context.Context, *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error)
	//  payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	//
	PaymentsClearSavedInfo(context.Context, *TLPaymentsClearSavedInfo) (*Bool, error)
	//  payments.getBankCardData#2e79d779 number:string = payments.BankCardData;
	//
	PaymentsGetBankCardData(context.Context, *TLPaymentsGetBankCardData) (*Payments_BankCardData, error)
}

// UnimplementedRPCPaymentsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCPaymentsServiceServer struct {
}

func (*UnimplementedRPCPaymentsServiceServer) PaymentsGetPaymentForm(ctx context.Context, req *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentForm not implemented")
}
func (*UnimplementedRPCPaymentsServiceServer) PaymentsGetPaymentReceipt(ctx context.Context, req *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentReceipt not implemented")
}
func (*UnimplementedRPCPaymentsServiceServer) PaymentsValidateRequestedInfo(ctx context.Context, req *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsValidateRequestedInfo not implemented")
}
func (*UnimplementedRPCPaymentsServiceServer) PaymentsSendPaymentForm(ctx context.Context, req *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsSendPaymentForm not implemented")
}
func (*UnimplementedRPCPaymentsServiceServer) PaymentsGetSavedInfo(ctx context.Context, req *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetSavedInfo not implemented")
}
func (*UnimplementedRPCPaymentsServiceServer) PaymentsClearSavedInfo(ctx context.Context, req *TLPaymentsClearSavedInfo) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsClearSavedInfo not implemented")
}
func (*UnimplementedRPCPaymentsServiceServer) PaymentsGetBankCardData(ctx context.Context, req *TLPaymentsGetBankCardData) (*Payments_BankCardData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetBankCardData not implemented")
}

func RegisterRPCPaymentsServiceServer(s *grpc.Server, srv RPCPaymentsServiceServer) {
	s.RegisterService(&_RPCPaymentsService_serviceDesc, srv)
}

func _RPCPaymentsService_PaymentsGetPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServiceServer).PaymentsGetPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPaymentsService/PaymentsGetPaymentForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServiceServer).PaymentsGetPaymentForm(ctx, req.(*TLPaymentsGetPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaymentsService_PaymentsGetPaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServiceServer).PaymentsGetPaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPaymentsService/PaymentsGetPaymentReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServiceServer).PaymentsGetPaymentReceipt(ctx, req.(*TLPaymentsGetPaymentReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaymentsService_PaymentsValidateRequestedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsValidateRequestedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServiceServer).PaymentsValidateRequestedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPaymentsService/PaymentsValidateRequestedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServiceServer).PaymentsValidateRequestedInfo(ctx, req.(*TLPaymentsValidateRequestedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaymentsService_PaymentsSendPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsSendPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServiceServer).PaymentsSendPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPaymentsService/PaymentsSendPaymentForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServiceServer).PaymentsSendPaymentForm(ctx, req.(*TLPaymentsSendPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaymentsService_PaymentsGetSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServiceServer).PaymentsGetSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPaymentsService/PaymentsGetSavedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServiceServer).PaymentsGetSavedInfo(ctx, req.(*TLPaymentsGetSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaymentsService_PaymentsClearSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsClearSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServiceServer).PaymentsClearSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPaymentsService/PaymentsClearSavedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServiceServer).PaymentsClearSavedInfo(ctx, req.(*TLPaymentsClearSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPaymentsService_PaymentsGetBankCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetBankCardData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServiceServer).PaymentsGetBankCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPaymentsService/PaymentsGetBankCardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServiceServer).PaymentsGetBankCardData(ctx, req.(*TLPaymentsGetBankCardData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCPaymentsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPaymentsService",
	HandlerType: (*RPCPaymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getPaymentForm",
			Handler:    _RPCPaymentsService_PaymentsGetPaymentForm_Handler,
		},
		{
			MethodName: "payments_getPaymentReceipt",
			Handler:    _RPCPaymentsService_PaymentsGetPaymentReceipt_Handler,
		},
		{
			MethodName: "payments_validateRequestedInfo",
			Handler:    _RPCPaymentsService_PaymentsValidateRequestedInfo_Handler,
		},
		{
			MethodName: "payments_sendPaymentForm",
			Handler:    _RPCPaymentsService_PaymentsSendPaymentForm_Handler,
		},
		{
			MethodName: "payments_getSavedInfo",
			Handler:    _RPCPaymentsService_PaymentsGetSavedInfo_Handler,
		},
		{
			MethodName: "payments_clearSavedInfo",
			Handler:    _RPCPaymentsService_PaymentsClearSavedInfo_Handler,
		},
		{
			MethodName: "payments_getBankCardData",
			Handler:    _RPCPaymentsService_PaymentsGetBankCardData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCPaymentsService_serviceDesc = map[string][]interface{}{
	"TLPaymentsGetPaymentForm": {
		"/mtproto.RPCPaymentsService/payments_getPaymentForm",
		func() interface{} { return new(Payments_PaymentForm) },
		"PaymentsGetPaymentForm",
	},
	"TLPaymentsGetPaymentReceipt": {
		"/mtproto.RPCPaymentsService/payments_getPaymentReceipt",
		func() interface{} { return new(Payments_PaymentReceipt) },
		"PaymentsGetPaymentReceipt",
	},
	"TLPaymentsValidateRequestedInfo": {
		"/mtproto.RPCPaymentsService/payments_validateRequestedInfo",
		func() interface{} { return new(Payments_ValidatedRequestedInfo) },
		"PaymentsValidateRequestedInfo",
	},
	"TLPaymentsSendPaymentForm": {
		"/mtproto.RPCPaymentsService/payments_sendPaymentForm",
		func() interface{} { return new(Payments_PaymentResult) },
		"PaymentsSendPaymentForm",
	},
	"TLPaymentsGetSavedInfo": {
		"/mtproto.RPCPaymentsService/payments_getSavedInfo",
		func() interface{} { return new(Payments_SavedInfo) },
		"PaymentsGetSavedInfo",
	},
	"TLPaymentsClearSavedInfo": {
		"/mtproto.RPCPaymentsService/payments_clearSavedInfo",
		func() interface{} { return new(Bool) },
		"PaymentsClearSavedInfo",
	},
	"TLPaymentsGetBankCardData": {
		"/mtproto.RPCPaymentsService/payments_getBankCardData",
		func() interface{} { return new(Payments_BankCardData) },
		"PaymentsGetBankCardData",
	},
}

// RPCPhoneServiceClient is the client API for RPCPhoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCPhoneServiceClient interface {
	//  phone.getCallConfig#55451fa9 = DataJSON;
	//
	PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error)
	//  phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	//  phone.requestCall#42ff96ed flags:# video:flags.0?true user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	//
	PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	//  phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	//
	PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	//  phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	//
	PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	//  phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	//
	PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error)
	//  phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	//  phone.discardCall#b2cbc1c0 flags:# video:flags.0?true peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	//
	PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error)
	//  phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	//  phone.setCallRating#59ead627 flags:# user_initiative:flags.0?true peer:InputPhoneCall rating:int comment:string = Updates;
	//
	PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error)
	//  phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	//
	PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error)
	//  phone.sendSignalingData#ff7a9383 peer:InputPhoneCall data:bytes = Bool;
	//
	PhoneSendSignalingData(ctx context.Context, in *TLPhoneSendSignalingData, opts ...grpc.CallOption) (*Bool, error)
	//  phone.createGroupCall#bd3dabe0 peer:InputPeer random_id:int = Updates;
	//
	PhoneCreateGroupCall(ctx context.Context, in *TLPhoneCreateGroupCall, opts ...grpc.CallOption) (*Updates, error)
	//  phone.joinGroupCall#5f9c8e62 flags:# muted:flags.0?true call:InputGroupCall params:DataJSON = Updates;
	//
	PhoneJoinGroupCall(ctx context.Context, in *TLPhoneJoinGroupCall, opts ...grpc.CallOption) (*Updates, error)
	//  phone.leaveGroupCall#500377f9 call:InputGroupCall source:int = Updates;
	//
	PhoneLeaveGroupCall(ctx context.Context, in *TLPhoneLeaveGroupCall, opts ...grpc.CallOption) (*Updates, error)
	//  phone.editGroupCallMember#63146ae4 flags:# muted:flags.0?true call:InputGroupCall user_id:InputUser = Updates;
	//
	PhoneEditGroupCallMember(ctx context.Context, in *TLPhoneEditGroupCallMember, opts ...grpc.CallOption) (*Updates, error)
	//  phone.inviteToGroupCall#7b393160 call:InputGroupCall users:Vector<InputUser> = Updates;
	//
	PhoneInviteToGroupCall(ctx context.Context, in *TLPhoneInviteToGroupCall, opts ...grpc.CallOption) (*Updates, error)
	//  phone.discardGroupCall#7a777135 call:InputGroupCall = Updates;
	//
	PhoneDiscardGroupCall(ctx context.Context, in *TLPhoneDiscardGroupCall, opts ...grpc.CallOption) (*Updates, error)
	//  phone.toggleGroupCallSettings#74bbb43d flags:# call:InputGroupCall join_muted:flags.0?Bool = Updates;
	//
	PhoneToggleGroupCallSettings(ctx context.Context, in *TLPhoneToggleGroupCallSettings, opts ...grpc.CallOption) (*Updates, error)
	//  phone.getGroupCall#c7cb017 call:InputGroupCall = phone.GroupCall;
	//
	PhoneGetGroupCall(ctx context.Context, in *TLPhoneGetGroupCall, opts ...grpc.CallOption) (*Phone_GroupCall, error)
	//  phone.getGroupParticipants#c9f1d285 call:InputGroupCall ids:Vector<int> sources:Vector<int> offset:string limit:int = phone.GroupParticipants;
	//
	PhoneGetGroupParticipants(ctx context.Context, in *TLPhoneGetGroupParticipants, opts ...grpc.CallOption) (*Phone_GroupParticipants, error)
	//  phone.checkGroupCall#b74a7bea call:InputGroupCall source:int = Bool;
	//
	PhoneCheckGroupCall(ctx context.Context, in *TLPhoneCheckGroupCall, opts ...grpc.CallOption) (*Bool, error)
}

type rPCPhoneServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCPhoneServiceClient(cc *grpc.ClientConn) RPCPhoneServiceClient {
	return &rPCPhoneServiceClient{cc}
}

func (c *rPCPhoneServiceClient) PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_getCallConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_requestCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_acceptCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_confirmCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_receivedCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_discardCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_setCallRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_saveCallDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneSendSignalingData(ctx context.Context, in *TLPhoneSendSignalingData, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_sendSignalingData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneCreateGroupCall(ctx context.Context, in *TLPhoneCreateGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_createGroupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneJoinGroupCall(ctx context.Context, in *TLPhoneJoinGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_joinGroupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneLeaveGroupCall(ctx context.Context, in *TLPhoneLeaveGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_leaveGroupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneEditGroupCallMember(ctx context.Context, in *TLPhoneEditGroupCallMember, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_editGroupCallMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneInviteToGroupCall(ctx context.Context, in *TLPhoneInviteToGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_inviteToGroupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneDiscardGroupCall(ctx context.Context, in *TLPhoneDiscardGroupCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_discardGroupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneToggleGroupCallSettings(ctx context.Context, in *TLPhoneToggleGroupCallSettings, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_toggleGroupCallSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneGetGroupCall(ctx context.Context, in *TLPhoneGetGroupCall, opts ...grpc.CallOption) (*Phone_GroupCall, error) {
	out := new(Phone_GroupCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_getGroupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneGetGroupParticipants(ctx context.Context, in *TLPhoneGetGroupParticipants, opts ...grpc.CallOption) (*Phone_GroupParticipants, error) {
	out := new(Phone_GroupParticipants)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_getGroupParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneServiceClient) PhoneCheckGroupCall(ctx context.Context, in *TLPhoneCheckGroupCall, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhoneService/phone_checkGroupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPhoneServiceServer is the server API for RPCPhoneService service.
type RPCPhoneServiceServer interface {
	//  phone.getCallConfig#55451fa9 = DataJSON;
	//
	PhoneGetCallConfig(context.Context, *TLPhoneGetCallConfig) (*DataJSON, error)
	//  phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	//  phone.requestCall#42ff96ed flags:# video:flags.0?true user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	//
	PhoneRequestCall(context.Context, *TLPhoneRequestCall) (*Phone_PhoneCall, error)
	//  phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	//
	PhoneAcceptCall(context.Context, *TLPhoneAcceptCall) (*Phone_PhoneCall, error)
	//  phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	//
	PhoneConfirmCall(context.Context, *TLPhoneConfirmCall) (*Phone_PhoneCall, error)
	//  phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	//
	PhoneReceivedCall(context.Context, *TLPhoneReceivedCall) (*Bool, error)
	//  phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	//  phone.discardCall#b2cbc1c0 flags:# video:flags.0?true peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	//
	PhoneDiscardCall(context.Context, *TLPhoneDiscardCall) (*Updates, error)
	//  phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	//  phone.setCallRating#59ead627 flags:# user_initiative:flags.0?true peer:InputPhoneCall rating:int comment:string = Updates;
	//
	PhoneSetCallRating(context.Context, *TLPhoneSetCallRating) (*Updates, error)
	//  phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	//
	PhoneSaveCallDebug(context.Context, *TLPhoneSaveCallDebug) (*Bool, error)
	//  phone.sendSignalingData#ff7a9383 peer:InputPhoneCall data:bytes = Bool;
	//
	PhoneSendSignalingData(context.Context, *TLPhoneSendSignalingData) (*Bool, error)
	//  phone.createGroupCall#bd3dabe0 peer:InputPeer random_id:int = Updates;
	//
	PhoneCreateGroupCall(context.Context, *TLPhoneCreateGroupCall) (*Updates, error)
	//  phone.joinGroupCall#5f9c8e62 flags:# muted:flags.0?true call:InputGroupCall params:DataJSON = Updates;
	//
	PhoneJoinGroupCall(context.Context, *TLPhoneJoinGroupCall) (*Updates, error)
	//  phone.leaveGroupCall#500377f9 call:InputGroupCall source:int = Updates;
	//
	PhoneLeaveGroupCall(context.Context, *TLPhoneLeaveGroupCall) (*Updates, error)
	//  phone.editGroupCallMember#63146ae4 flags:# muted:flags.0?true call:InputGroupCall user_id:InputUser = Updates;
	//
	PhoneEditGroupCallMember(context.Context, *TLPhoneEditGroupCallMember) (*Updates, error)
	//  phone.inviteToGroupCall#7b393160 call:InputGroupCall users:Vector<InputUser> = Updates;
	//
	PhoneInviteToGroupCall(context.Context, *TLPhoneInviteToGroupCall) (*Updates, error)
	//  phone.discardGroupCall#7a777135 call:InputGroupCall = Updates;
	//
	PhoneDiscardGroupCall(context.Context, *TLPhoneDiscardGroupCall) (*Updates, error)
	//  phone.toggleGroupCallSettings#74bbb43d flags:# call:InputGroupCall join_muted:flags.0?Bool = Updates;
	//
	PhoneToggleGroupCallSettings(context.Context, *TLPhoneToggleGroupCallSettings) (*Updates, error)
	//  phone.getGroupCall#c7cb017 call:InputGroupCall = phone.GroupCall;
	//
	PhoneGetGroupCall(context.Context, *TLPhoneGetGroupCall) (*Phone_GroupCall, error)
	//  phone.getGroupParticipants#c9f1d285 call:InputGroupCall ids:Vector<int> sources:Vector<int> offset:string limit:int = phone.GroupParticipants;
	//
	PhoneGetGroupParticipants(context.Context, *TLPhoneGetGroupParticipants) (*Phone_GroupParticipants, error)
	//  phone.checkGroupCall#b74a7bea call:InputGroupCall source:int = Bool;
	//
	PhoneCheckGroupCall(context.Context, *TLPhoneCheckGroupCall) (*Bool, error)
}

// UnimplementedRPCPhoneServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCPhoneServiceServer struct {
}

func (*UnimplementedRPCPhoneServiceServer) PhoneGetCallConfig(ctx context.Context, req *TLPhoneGetCallConfig) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetCallConfig not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneRequestCall(ctx context.Context, req *TLPhoneRequestCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneRequestCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneAcceptCall(ctx context.Context, req *TLPhoneAcceptCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneAcceptCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneConfirmCall(ctx context.Context, req *TLPhoneConfirmCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneConfirmCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneReceivedCall(ctx context.Context, req *TLPhoneReceivedCall) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneReceivedCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneDiscardCall(ctx context.Context, req *TLPhoneDiscardCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneDiscardCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneSetCallRating(ctx context.Context, req *TLPhoneSetCallRating) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSetCallRating not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneSaveCallDebug(ctx context.Context, req *TLPhoneSaveCallDebug) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSaveCallDebug not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneSendSignalingData(ctx context.Context, req *TLPhoneSendSignalingData) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSendSignalingData not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneCreateGroupCall(ctx context.Context, req *TLPhoneCreateGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneCreateGroupCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneJoinGroupCall(ctx context.Context, req *TLPhoneJoinGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneJoinGroupCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneLeaveGroupCall(ctx context.Context, req *TLPhoneLeaveGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneLeaveGroupCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneEditGroupCallMember(ctx context.Context, req *TLPhoneEditGroupCallMember) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneEditGroupCallMember not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneInviteToGroupCall(ctx context.Context, req *TLPhoneInviteToGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneInviteToGroupCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneDiscardGroupCall(ctx context.Context, req *TLPhoneDiscardGroupCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneDiscardGroupCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneToggleGroupCallSettings(ctx context.Context, req *TLPhoneToggleGroupCallSettings) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneToggleGroupCallSettings not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneGetGroupCall(ctx context.Context, req *TLPhoneGetGroupCall) (*Phone_GroupCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetGroupCall not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneGetGroupParticipants(ctx context.Context, req *TLPhoneGetGroupParticipants) (*Phone_GroupParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetGroupParticipants not implemented")
}
func (*UnimplementedRPCPhoneServiceServer) PhoneCheckGroupCall(ctx context.Context, req *TLPhoneCheckGroupCall) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneCheckGroupCall not implemented")
}

func RegisterRPCPhoneServiceServer(s *grpc.Server, srv RPCPhoneServiceServer) {
	s.RegisterService(&_RPCPhoneService_serviceDesc, srv)
}

func _RPCPhoneService_PhoneGetCallConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetCallConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneGetCallConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneGetCallConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneGetCallConfig(ctx, req.(*TLPhoneGetCallConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneRequestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneRequestCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneRequestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneRequestCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneRequestCall(ctx, req.(*TLPhoneRequestCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneAcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneAcceptCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneAcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneAcceptCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneAcceptCall(ctx, req.(*TLPhoneAcceptCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneConfirmCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneConfirmCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneConfirmCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneConfirmCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneConfirmCall(ctx, req.(*TLPhoneConfirmCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneReceivedCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneReceivedCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneReceivedCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneReceivedCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneReceivedCall(ctx, req.(*TLPhoneReceivedCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneDiscardCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneDiscardCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneDiscardCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneDiscardCall(ctx, req.(*TLPhoneDiscardCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneSetCallRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSetCallRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneSetCallRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneSetCallRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneSetCallRating(ctx, req.(*TLPhoneSetCallRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneSaveCallDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSaveCallDebug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneSaveCallDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneSaveCallDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneSaveCallDebug(ctx, req.(*TLPhoneSaveCallDebug))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneSendSignalingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSendSignalingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneSendSignalingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneSendSignalingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneSendSignalingData(ctx, req.(*TLPhoneSendSignalingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneCreateGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneCreateGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneCreateGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneCreateGroupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneCreateGroupCall(ctx, req.(*TLPhoneCreateGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneJoinGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneJoinGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneJoinGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneJoinGroupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneJoinGroupCall(ctx, req.(*TLPhoneJoinGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneLeaveGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneLeaveGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneLeaveGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneLeaveGroupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneLeaveGroupCall(ctx, req.(*TLPhoneLeaveGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneEditGroupCallMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneEditGroupCallMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneEditGroupCallMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneEditGroupCallMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneEditGroupCallMember(ctx, req.(*TLPhoneEditGroupCallMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneInviteToGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneInviteToGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneInviteToGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneInviteToGroupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneInviteToGroupCall(ctx, req.(*TLPhoneInviteToGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneDiscardGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneDiscardGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneDiscardGroupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneDiscardGroupCall(ctx, req.(*TLPhoneDiscardGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneToggleGroupCallSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneToggleGroupCallSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneToggleGroupCallSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneToggleGroupCallSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneToggleGroupCallSettings(ctx, req.(*TLPhoneToggleGroupCallSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneGetGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneGetGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneGetGroupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneGetGroupCall(ctx, req.(*TLPhoneGetGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneGetGroupParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetGroupParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneGetGroupParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneGetGroupParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneGetGroupParticipants(ctx, req.(*TLPhoneGetGroupParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhoneService_PhoneCheckGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneCheckGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServiceServer).PhoneCheckGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhoneService/PhoneCheckGroupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServiceServer).PhoneCheckGroupCall(ctx, req.(*TLPhoneCheckGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCPhoneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPhoneService",
	HandlerType: (*RPCPhoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "phone_getCallConfig",
			Handler:    _RPCPhoneService_PhoneGetCallConfig_Handler,
		},
		{
			MethodName: "phone_requestCall",
			Handler:    _RPCPhoneService_PhoneRequestCall_Handler,
		},
		{
			MethodName: "phone_acceptCall",
			Handler:    _RPCPhoneService_PhoneAcceptCall_Handler,
		},
		{
			MethodName: "phone_confirmCall",
			Handler:    _RPCPhoneService_PhoneConfirmCall_Handler,
		},
		{
			MethodName: "phone_receivedCall",
			Handler:    _RPCPhoneService_PhoneReceivedCall_Handler,
		},
		{
			MethodName: "phone_discardCall",
			Handler:    _RPCPhoneService_PhoneDiscardCall_Handler,
		},
		{
			MethodName: "phone_setCallRating",
			Handler:    _RPCPhoneService_PhoneSetCallRating_Handler,
		},
		{
			MethodName: "phone_saveCallDebug",
			Handler:    _RPCPhoneService_PhoneSaveCallDebug_Handler,
		},
		{
			MethodName: "phone_sendSignalingData",
			Handler:    _RPCPhoneService_PhoneSendSignalingData_Handler,
		},
		{
			MethodName: "phone_createGroupCall",
			Handler:    _RPCPhoneService_PhoneCreateGroupCall_Handler,
		},
		{
			MethodName: "phone_joinGroupCall",
			Handler:    _RPCPhoneService_PhoneJoinGroupCall_Handler,
		},
		{
			MethodName: "phone_leaveGroupCall",
			Handler:    _RPCPhoneService_PhoneLeaveGroupCall_Handler,
		},
		{
			MethodName: "phone_editGroupCallMember",
			Handler:    _RPCPhoneService_PhoneEditGroupCallMember_Handler,
		},
		{
			MethodName: "phone_inviteToGroupCall",
			Handler:    _RPCPhoneService_PhoneInviteToGroupCall_Handler,
		},
		{
			MethodName: "phone_discardGroupCall",
			Handler:    _RPCPhoneService_PhoneDiscardGroupCall_Handler,
		},
		{
			MethodName: "phone_toggleGroupCallSettings",
			Handler:    _RPCPhoneService_PhoneToggleGroupCallSettings_Handler,
		},
		{
			MethodName: "phone_getGroupCall",
			Handler:    _RPCPhoneService_PhoneGetGroupCall_Handler,
		},
		{
			MethodName: "phone_getGroupParticipants",
			Handler:    _RPCPhoneService_PhoneGetGroupParticipants_Handler,
		},
		{
			MethodName: "phone_checkGroupCall",
			Handler:    _RPCPhoneService_PhoneCheckGroupCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCPhoneService_serviceDesc = map[string][]interface{}{
	"TLPhoneGetCallConfig": {
		"/mtproto.RPCPhoneService/phone_getCallConfig",
		func() interface{} { return new(DataJSON) },
		"PhoneGetCallConfig",
	},
	"TLPhoneRequestCall": {
		"/mtproto.RPCPhoneService/phone_requestCall",
		func() interface{} { return new(Phone_PhoneCall) },
		"PhoneRequestCall",
	},
	"TLPhoneAcceptCall": {
		"/mtproto.RPCPhoneService/phone_acceptCall",
		func() interface{} { return new(Phone_PhoneCall) },
		"PhoneAcceptCall",
	},
	"TLPhoneConfirmCall": {
		"/mtproto.RPCPhoneService/phone_confirmCall",
		func() interface{} { return new(Phone_PhoneCall) },
		"PhoneConfirmCall",
	},
	"TLPhoneReceivedCall": {
		"/mtproto.RPCPhoneService/phone_receivedCall",
		func() interface{} { return new(Bool) },
		"PhoneReceivedCall",
	},
	"TLPhoneDiscardCall": {
		"/mtproto.RPCPhoneService/phone_discardCall",
		func() interface{} { return new(Updates) },
		"PhoneDiscardCall",
	},
	"TLPhoneSetCallRating": {
		"/mtproto.RPCPhoneService/phone_setCallRating",
		func() interface{} { return new(Updates) },
		"PhoneSetCallRating",
	},
	"TLPhoneSaveCallDebug": {
		"/mtproto.RPCPhoneService/phone_saveCallDebug",
		func() interface{} { return new(Bool) },
		"PhoneSaveCallDebug",
	},
	"TLPhoneSendSignalingData": {
		"/mtproto.RPCPhoneService/phone_sendSignalingData",
		func() interface{} { return new(Bool) },
		"PhoneSendSignalingData",
	},
	"TLPhoneCreateGroupCall": {
		"/mtproto.RPCPhoneService/phone_createGroupCall",
		func() interface{} { return new(Updates) },
		"PhoneCreateGroupCall",
	},
	"TLPhoneJoinGroupCall": {
		"/mtproto.RPCPhoneService/phone_joinGroupCall",
		func() interface{} { return new(Updates) },
		"PhoneJoinGroupCall",
	},
	"TLPhoneLeaveGroupCall": {
		"/mtproto.RPCPhoneService/phone_leaveGroupCall",
		func() interface{} { return new(Updates) },
		"PhoneLeaveGroupCall",
	},
	"TLPhoneEditGroupCallMember": {
		"/mtproto.RPCPhoneService/phone_editGroupCallMember",
		func() interface{} { return new(Updates) },
		"PhoneEditGroupCallMember",
	},
	"TLPhoneInviteToGroupCall": {
		"/mtproto.RPCPhoneService/phone_inviteToGroupCall",
		func() interface{} { return new(Updates) },
		"PhoneInviteToGroupCall",
	},
	"TLPhoneDiscardGroupCall": {
		"/mtproto.RPCPhoneService/phone_discardGroupCall",
		func() interface{} { return new(Updates) },
		"PhoneDiscardGroupCall",
	},
	"TLPhoneToggleGroupCallSettings": {
		"/mtproto.RPCPhoneService/phone_toggleGroupCallSettings",
		func() interface{} { return new(Updates) },
		"PhoneToggleGroupCallSettings",
	},
	"TLPhoneGetGroupCall": {
		"/mtproto.RPCPhoneService/phone_getGroupCall",
		func() interface{} { return new(Phone_GroupCall) },
		"PhoneGetGroupCall",
	},
	"TLPhoneGetGroupParticipants": {
		"/mtproto.RPCPhoneService/phone_getGroupParticipants",
		func() interface{} { return new(Phone_GroupParticipants) },
		"PhoneGetGroupParticipants",
	},
	"TLPhoneCheckGroupCall": {
		"/mtproto.RPCPhoneService/phone_checkGroupCall",
		func() interface{} { return new(Bool) },
		"PhoneCheckGroupCall",
	},
}

// RPCPhotosServiceClient is the client API for RPCPhotosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCPhotosServiceClient interface {
	//  photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	//  photos.updateProfilePhoto#eef579a0 id:InputPhoto crop:InputPhotoCrop = UserProfilePhoto;
	//  photos.updateProfilePhoto#72d4742c id:InputPhoto = photos.Photo;
	//
	PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*Response_PhotosUpdateProfilePhoto, error)
	//  photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	//  photos.uploadProfilePhoto#d50f9c88 file:InputFile caption:string geo_point:InputGeoPoint crop:InputPhotoCrop = photos.Photo;
	//  photos.uploadProfilePhoto#89f30f69 flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double = photos.Photo;
	//
	PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error)
	//  photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	//
	PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error)
	//  photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	//
	PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error)
}

type rPCPhotosServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCPhotosServiceClient(cc *grpc.ClientConn) RPCPhotosServiceClient {
	return &rPCPhotosServiceClient{cc}
}

func (c *rPCPhotosServiceClient) PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*Response_PhotosUpdateProfilePhoto, error) {
	out := new(Response_PhotosUpdateProfilePhoto)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotosService/photos_updateProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosServiceClient) PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error) {
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotosService/photos_uploadProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosServiceClient) PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error) {
	out := new(VectorLong)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotosService/photos_deletePhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosServiceClient) PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error) {
	out := new(Photos_Photos)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotosService/photos_getUserPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPhotosServiceServer is the server API for RPCPhotosService service.
type RPCPhotosServiceServer interface {
	//  photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	//  photos.updateProfilePhoto#eef579a0 id:InputPhoto crop:InputPhotoCrop = UserProfilePhoto;
	//  photos.updateProfilePhoto#72d4742c id:InputPhoto = photos.Photo;
	//
	PhotosUpdateProfilePhoto(context.Context, *TLPhotosUpdateProfilePhoto) (*Response_PhotosUpdateProfilePhoto, error)
	//  photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	//  photos.uploadProfilePhoto#d50f9c88 file:InputFile caption:string geo_point:InputGeoPoint crop:InputPhotoCrop = photos.Photo;
	//  photos.uploadProfilePhoto#89f30f69 flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double = photos.Photo;
	//
	PhotosUploadProfilePhoto(context.Context, *TLPhotosUploadProfilePhoto) (*Photos_Photo, error)
	//  photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	//
	PhotosDeletePhotos(context.Context, *TLPhotosDeletePhotos) (*VectorLong, error)
	//  photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	//
	PhotosGetUserPhotos(context.Context, *TLPhotosGetUserPhotos) (*Photos_Photos, error)
}

// UnimplementedRPCPhotosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCPhotosServiceServer struct {
}

func (*UnimplementedRPCPhotosServiceServer) PhotosUpdateProfilePhoto(ctx context.Context, req *TLPhotosUpdateProfilePhoto) (*Response_PhotosUpdateProfilePhoto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUpdateProfilePhoto not implemented")
}
func (*UnimplementedRPCPhotosServiceServer) PhotosUploadProfilePhoto(ctx context.Context, req *TLPhotosUploadProfilePhoto) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUploadProfilePhoto not implemented")
}
func (*UnimplementedRPCPhotosServiceServer) PhotosDeletePhotos(ctx context.Context, req *TLPhotosDeletePhotos) (*VectorLong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosDeletePhotos not implemented")
}
func (*UnimplementedRPCPhotosServiceServer) PhotosGetUserPhotos(ctx context.Context, req *TLPhotosGetUserPhotos) (*Photos_Photos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosGetUserPhotos not implemented")
}

func RegisterRPCPhotosServiceServer(s *grpc.Server, srv RPCPhotosServiceServer) {
	s.RegisterService(&_RPCPhotosService_serviceDesc, srv)
}

func _RPCPhotosService_PhotosUpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUpdateProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServiceServer).PhotosUpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotosService/PhotosUpdateProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServiceServer).PhotosUpdateProfilePhoto(ctx, req.(*TLPhotosUpdateProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotosService_PhotosUploadProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServiceServer).PhotosUploadProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotosService/PhotosUploadProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServiceServer).PhotosUploadProfilePhoto(ctx, req.(*TLPhotosUploadProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotosService_PhotosDeletePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosDeletePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServiceServer).PhotosDeletePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotosService/PhotosDeletePhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServiceServer).PhotosDeletePhotos(ctx, req.(*TLPhotosDeletePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotosService_PhotosGetUserPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosGetUserPhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServiceServer).PhotosGetUserPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotosService/PhotosGetUserPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServiceServer).PhotosGetUserPhotos(ctx, req.(*TLPhotosGetUserPhotos))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCPhotosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPhotosService",
	HandlerType: (*RPCPhotosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "photos_updateProfilePhoto",
			Handler:    _RPCPhotosService_PhotosUpdateProfilePhoto_Handler,
		},
		{
			MethodName: "photos_uploadProfilePhoto",
			Handler:    _RPCPhotosService_PhotosUploadProfilePhoto_Handler,
		},
		{
			MethodName: "photos_deletePhotos",
			Handler:    _RPCPhotosService_PhotosDeletePhotos_Handler,
		},
		{
			MethodName: "photos_getUserPhotos",
			Handler:    _RPCPhotosService_PhotosGetUserPhotos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCPhotosService_serviceDesc = map[string][]interface{}{
	"TLPhotosUpdateProfilePhoto": {
		"/mtproto.RPCPhotosService/photos_updateProfilePhoto",
		func() interface{} { return new(Response_PhotosUpdateProfilePhoto) },
		"PhotosUpdateProfilePhoto",
	},
	"TLPhotosUploadProfilePhoto": {
		"/mtproto.RPCPhotosService/photos_uploadProfilePhoto",
		func() interface{} { return new(Photos_Photo) },
		"PhotosUploadProfilePhoto",
	},
	"TLPhotosDeletePhotos": {
		"/mtproto.RPCPhotosService/photos_deletePhotos",
		func() interface{} { return new(VectorLong) },
		"PhotosDeletePhotos",
	},
	"TLPhotosGetUserPhotos": {
		"/mtproto.RPCPhotosService/photos_getUserPhotos",
		func() interface{} { return new(Photos_Photos) },
		"PhotosGetUserPhotos",
	},
}

// RPCStatsServiceClient is the client API for RPCStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCStatsServiceClient interface {
	//  stats.getBroadcastStats#ab42441a flags:# dark:flags.0?true channel:InputChannel = stats.BroadcastStats;
	//  stats.getBroadcastStats#e6300dba flags:# dark:flags.0?true channel:InputChannel tz_offset:int = stats.BroadcastStats;
	//
	StatsGetBroadcastStats(ctx context.Context, in *TLStatsGetBroadcastStats, opts ...grpc.CallOption) (*Stats_BroadcastStats, error)
	//  stats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;
	//
	StatsLoadAsyncGraph(ctx context.Context, in *TLStatsLoadAsyncGraph, opts ...grpc.CallOption) (*StatsGraph, error)
	//  stats.getMegagroupStats#dcdf8607 flags:# dark:flags.0?true channel:InputChannel = stats.MegagroupStats;
	//
	StatsGetMegagroupStats(ctx context.Context, in *TLStatsGetMegagroupStats, opts ...grpc.CallOption) (*Stats_MegagroupStats, error)
	//  stats.getMessagePublicForwards#5630281b channel:InputChannel msg_id:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//
	StatsGetMessagePublicForwards(ctx context.Context, in *TLStatsGetMessagePublicForwards, opts ...grpc.CallOption) (*Messages_Messages, error)
	//  stats.getMessageStats#b6e0a3f5 flags:# dark:flags.0?true channel:InputChannel msg_id:int = stats.MessageStats;
	//
	StatsGetMessageStats(ctx context.Context, in *TLStatsGetMessageStats, opts ...grpc.CallOption) (*Stats_MessageStats, error)
}

type rPCStatsServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCStatsServiceClient(cc *grpc.ClientConn) RPCStatsServiceClient {
	return &rPCStatsServiceClient{cc}
}

func (c *rPCStatsServiceClient) StatsGetBroadcastStats(ctx context.Context, in *TLStatsGetBroadcastStats, opts ...grpc.CallOption) (*Stats_BroadcastStats, error) {
	out := new(Stats_BroadcastStats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStatsService/stats_getBroadcastStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatsServiceClient) StatsLoadAsyncGraph(ctx context.Context, in *TLStatsLoadAsyncGraph, opts ...grpc.CallOption) (*StatsGraph, error) {
	out := new(StatsGraph)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStatsService/stats_loadAsyncGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatsServiceClient) StatsGetMegagroupStats(ctx context.Context, in *TLStatsGetMegagroupStats, opts ...grpc.CallOption) (*Stats_MegagroupStats, error) {
	out := new(Stats_MegagroupStats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStatsService/stats_getMegagroupStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatsServiceClient) StatsGetMessagePublicForwards(ctx context.Context, in *TLStatsGetMessagePublicForwards, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStatsService/stats_getMessagePublicForwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatsServiceClient) StatsGetMessageStats(ctx context.Context, in *TLStatsGetMessageStats, opts ...grpc.CallOption) (*Stats_MessageStats, error) {
	out := new(Stats_MessageStats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStatsService/stats_getMessageStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStatsServiceServer is the server API for RPCStatsService service.
type RPCStatsServiceServer interface {
	//  stats.getBroadcastStats#ab42441a flags:# dark:flags.0?true channel:InputChannel = stats.BroadcastStats;
	//  stats.getBroadcastStats#e6300dba flags:# dark:flags.0?true channel:InputChannel tz_offset:int = stats.BroadcastStats;
	//
	StatsGetBroadcastStats(context.Context, *TLStatsGetBroadcastStats) (*Stats_BroadcastStats, error)
	//  stats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;
	//
	StatsLoadAsyncGraph(context.Context, *TLStatsLoadAsyncGraph) (*StatsGraph, error)
	//  stats.getMegagroupStats#dcdf8607 flags:# dark:flags.0?true channel:InputChannel = stats.MegagroupStats;
	//
	StatsGetMegagroupStats(context.Context, *TLStatsGetMegagroupStats) (*Stats_MegagroupStats, error)
	//  stats.getMessagePublicForwards#5630281b channel:InputChannel msg_id:int offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	//
	StatsGetMessagePublicForwards(context.Context, *TLStatsGetMessagePublicForwards) (*Messages_Messages, error)
	//  stats.getMessageStats#b6e0a3f5 flags:# dark:flags.0?true channel:InputChannel msg_id:int = stats.MessageStats;
	//
	StatsGetMessageStats(context.Context, *TLStatsGetMessageStats) (*Stats_MessageStats, error)
}

// UnimplementedRPCStatsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCStatsServiceServer struct {
}

func (*UnimplementedRPCStatsServiceServer) StatsGetBroadcastStats(ctx context.Context, req *TLStatsGetBroadcastStats) (*Stats_BroadcastStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetBroadcastStats not implemented")
}
func (*UnimplementedRPCStatsServiceServer) StatsLoadAsyncGraph(ctx context.Context, req *TLStatsLoadAsyncGraph) (*StatsGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsLoadAsyncGraph not implemented")
}
func (*UnimplementedRPCStatsServiceServer) StatsGetMegagroupStats(ctx context.Context, req *TLStatsGetMegagroupStats) (*Stats_MegagroupStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMegagroupStats not implemented")
}
func (*UnimplementedRPCStatsServiceServer) StatsGetMessagePublicForwards(ctx context.Context, req *TLStatsGetMessagePublicForwards) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMessagePublicForwards not implemented")
}
func (*UnimplementedRPCStatsServiceServer) StatsGetMessageStats(ctx context.Context, req *TLStatsGetMessageStats) (*Stats_MessageStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMessageStats not implemented")
}

func RegisterRPCStatsServiceServer(s *grpc.Server, srv RPCStatsServiceServer) {
	s.RegisterService(&_RPCStatsService_serviceDesc, srv)
}

func _RPCStatsService_StatsGetBroadcastStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetBroadcastStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServiceServer).StatsGetBroadcastStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStatsService/StatsGetBroadcastStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServiceServer).StatsGetBroadcastStats(ctx, req.(*TLStatsGetBroadcastStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatsService_StatsLoadAsyncGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsLoadAsyncGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServiceServer).StatsLoadAsyncGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStatsService/StatsLoadAsyncGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServiceServer).StatsLoadAsyncGraph(ctx, req.(*TLStatsLoadAsyncGraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatsService_StatsGetMegagroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMegagroupStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServiceServer).StatsGetMegagroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStatsService/StatsGetMegagroupStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServiceServer).StatsGetMegagroupStats(ctx, req.(*TLStatsGetMegagroupStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatsService_StatsGetMessagePublicForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMessagePublicForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServiceServer).StatsGetMessagePublicForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStatsService/StatsGetMessagePublicForwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServiceServer).StatsGetMessagePublicForwards(ctx, req.(*TLStatsGetMessagePublicForwards))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatsService_StatsGetMessageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMessageStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServiceServer).StatsGetMessageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStatsService/StatsGetMessageStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServiceServer).StatsGetMessageStats(ctx, req.(*TLStatsGetMessageStats))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCStatsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStatsService",
	HandlerType: (*RPCStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stats_getBroadcastStats",
			Handler:    _RPCStatsService_StatsGetBroadcastStats_Handler,
		},
		{
			MethodName: "stats_loadAsyncGraph",
			Handler:    _RPCStatsService_StatsLoadAsyncGraph_Handler,
		},
		{
			MethodName: "stats_getMegagroupStats",
			Handler:    _RPCStatsService_StatsGetMegagroupStats_Handler,
		},
		{
			MethodName: "stats_getMessagePublicForwards",
			Handler:    _RPCStatsService_StatsGetMessagePublicForwards_Handler,
		},
		{
			MethodName: "stats_getMessageStats",
			Handler:    _RPCStatsService_StatsGetMessageStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCStatsService_serviceDesc = map[string][]interface{}{
	"TLStatsGetBroadcastStats": {
		"/mtproto.RPCStatsService/stats_getBroadcastStats",
		func() interface{} { return new(Stats_BroadcastStats) },
		"StatsGetBroadcastStats",
	},
	"TLStatsLoadAsyncGraph": {
		"/mtproto.RPCStatsService/stats_loadAsyncGraph",
		func() interface{} { return new(StatsGraph) },
		"StatsLoadAsyncGraph",
	},
	"TLStatsGetMegagroupStats": {
		"/mtproto.RPCStatsService/stats_getMegagroupStats",
		func() interface{} { return new(Stats_MegagroupStats) },
		"StatsGetMegagroupStats",
	},
	"TLStatsGetMessagePublicForwards": {
		"/mtproto.RPCStatsService/stats_getMessagePublicForwards",
		func() interface{} { return new(Messages_Messages) },
		"StatsGetMessagePublicForwards",
	},
	"TLStatsGetMessageStats": {
		"/mtproto.RPCStatsService/stats_getMessageStats",
		func() interface{} { return new(Stats_MessageStats) },
		"StatsGetMessageStats",
	},
}

// RPCStickersServiceClient is the client API for RPCStickersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCStickersServiceClient interface {
	//  stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	//  stickers.createStickerSet#f1036780 flags:# masks:flags.0?true animated:flags.1?true user_id:InputUser title:string short_name:string thumb:flags.2?InputDocument stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	//
	StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	//  stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	//
	StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	//  stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	//
	StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	//  stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	//
	StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	//  stickers.setStickerSetThumb#9a364e30 stickerset:InputStickerSet thumb:InputDocument = messages.StickerSet;
	//
	StickersSetStickerSetThumb(ctx context.Context, in *TLStickersSetStickerSetThumb, opts ...grpc.CallOption) (*Messages_StickerSet, error)
}

type rPCStickersServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCStickersServiceClient(cc *grpc.ClientConn) RPCStickersServiceClient {
	return &rPCStickersServiceClient{cc}
}

func (c *rPCStickersServiceClient) StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickersService/stickers_createStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersServiceClient) StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickersService/stickers_removeStickerFromSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersServiceClient) StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickersService/stickers_changeStickerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersServiceClient) StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickersService/stickers_addStickerToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersServiceClient) StickersSetStickerSetThumb(ctx context.Context, in *TLStickersSetStickerSetThumb, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickersService/stickers_setStickerSetThumb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStickersServiceServer is the server API for RPCStickersService service.
type RPCStickersServiceServer interface {
	//  stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	//  stickers.createStickerSet#f1036780 flags:# masks:flags.0?true animated:flags.1?true user_id:InputUser title:string short_name:string thumb:flags.2?InputDocument stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	//
	StickersCreateStickerSet(context.Context, *TLStickersCreateStickerSet) (*Messages_StickerSet, error)
	//  stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	//
	StickersRemoveStickerFromSet(context.Context, *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error)
	//  stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	//
	StickersChangeStickerPosition(context.Context, *TLStickersChangeStickerPosition) (*Messages_StickerSet, error)
	//  stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	//
	StickersAddStickerToSet(context.Context, *TLStickersAddStickerToSet) (*Messages_StickerSet, error)
	//  stickers.setStickerSetThumb#9a364e30 stickerset:InputStickerSet thumb:InputDocument = messages.StickerSet;
	//
	StickersSetStickerSetThumb(context.Context, *TLStickersSetStickerSetThumb) (*Messages_StickerSet, error)
}

// UnimplementedRPCStickersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCStickersServiceServer struct {
}

func (*UnimplementedRPCStickersServiceServer) StickersCreateStickerSet(ctx context.Context, req *TLStickersCreateStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersCreateStickerSet not implemented")
}
func (*UnimplementedRPCStickersServiceServer) StickersRemoveStickerFromSet(ctx context.Context, req *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersRemoveStickerFromSet not implemented")
}
func (*UnimplementedRPCStickersServiceServer) StickersChangeStickerPosition(ctx context.Context, req *TLStickersChangeStickerPosition) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersChangeStickerPosition not implemented")
}
func (*UnimplementedRPCStickersServiceServer) StickersAddStickerToSet(ctx context.Context, req *TLStickersAddStickerToSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersAddStickerToSet not implemented")
}
func (*UnimplementedRPCStickersServiceServer) StickersSetStickerSetThumb(ctx context.Context, req *TLStickersSetStickerSetThumb) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersSetStickerSetThumb not implemented")
}

func RegisterRPCStickersServiceServer(s *grpc.Server, srv RPCStickersServiceServer) {
	s.RegisterService(&_RPCStickersService_serviceDesc, srv)
}

func _RPCStickersService_StickersCreateStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersCreateStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServiceServer).StickersCreateStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickersService/StickersCreateStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServiceServer).StickersCreateStickerSet(ctx, req.(*TLStickersCreateStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickersService_StickersRemoveStickerFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersRemoveStickerFromSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServiceServer).StickersRemoveStickerFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickersService/StickersRemoveStickerFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServiceServer).StickersRemoveStickerFromSet(ctx, req.(*TLStickersRemoveStickerFromSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickersService_StickersChangeStickerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersChangeStickerPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServiceServer).StickersChangeStickerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickersService/StickersChangeStickerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServiceServer).StickersChangeStickerPosition(ctx, req.(*TLStickersChangeStickerPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickersService_StickersAddStickerToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersAddStickerToSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServiceServer).StickersAddStickerToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickersService/StickersAddStickerToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServiceServer).StickersAddStickerToSet(ctx, req.(*TLStickersAddStickerToSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickersService_StickersSetStickerSetThumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersSetStickerSetThumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServiceServer).StickersSetStickerSetThumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickersService/StickersSetStickerSetThumb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServiceServer).StickersSetStickerSetThumb(ctx, req.(*TLStickersSetStickerSetThumb))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCStickersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStickersService",
	HandlerType: (*RPCStickersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stickers_createStickerSet",
			Handler:    _RPCStickersService_StickersCreateStickerSet_Handler,
		},
		{
			MethodName: "stickers_removeStickerFromSet",
			Handler:    _RPCStickersService_StickersRemoveStickerFromSet_Handler,
		},
		{
			MethodName: "stickers_changeStickerPosition",
			Handler:    _RPCStickersService_StickersChangeStickerPosition_Handler,
		},
		{
			MethodName: "stickers_addStickerToSet",
			Handler:    _RPCStickersService_StickersAddStickerToSet_Handler,
		},
		{
			MethodName: "stickers_setStickerSetThumb",
			Handler:    _RPCStickersService_StickersSetStickerSetThumb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCStickersService_serviceDesc = map[string][]interface{}{
	"TLStickersCreateStickerSet": {
		"/mtproto.RPCStickersService/stickers_createStickerSet",
		func() interface{} { return new(Messages_StickerSet) },
		"StickersCreateStickerSet",
	},
	"TLStickersRemoveStickerFromSet": {
		"/mtproto.RPCStickersService/stickers_removeStickerFromSet",
		func() interface{} { return new(Messages_StickerSet) },
		"StickersRemoveStickerFromSet",
	},
	"TLStickersChangeStickerPosition": {
		"/mtproto.RPCStickersService/stickers_changeStickerPosition",
		func() interface{} { return new(Messages_StickerSet) },
		"StickersChangeStickerPosition",
	},
	"TLStickersAddStickerToSet": {
		"/mtproto.RPCStickersService/stickers_addStickerToSet",
		func() interface{} { return new(Messages_StickerSet) },
		"StickersAddStickerToSet",
	},
	"TLStickersSetStickerSetThumb": {
		"/mtproto.RPCStickersService/stickers_setStickerSetThumb",
		func() interface{} { return new(Messages_StickerSet) },
		"StickersSetStickerSetThumb",
	},
}

// RPCUpdatesServiceClient is the client API for RPCUpdatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUpdatesServiceClient interface {
	//  updates.getState#edd4882a = updates.State;
	//
	UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error)
	//  updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	//  updates.getDifference#a041495 pts:int date:int qts:int = updates.Difference;
	//
	UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error)
	//  updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	//  updates.getChannelDifference#bb32d7c0 channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	//
	UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error)
}

type rPCUpdatesServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCUpdatesServiceClient(cc *grpc.ClientConn) RPCUpdatesServiceClient {
	return &rPCUpdatesServiceClient{cc}
}

func (c *rPCUpdatesServiceClient) UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error) {
	out := new(Updates_State)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpdatesService/updates_getState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesServiceClient) UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error) {
	out := new(Updates_Difference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpdatesService/updates_getDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesServiceClient) UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error) {
	out := new(Updates_ChannelDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpdatesService/updates_getChannelDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUpdatesServiceServer is the server API for RPCUpdatesService service.
type RPCUpdatesServiceServer interface {
	//  updates.getState#edd4882a = updates.State;
	//
	UpdatesGetState(context.Context, *TLUpdatesGetState) (*Updates_State, error)
	//  updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	//  updates.getDifference#a041495 pts:int date:int qts:int = updates.Difference;
	//
	UpdatesGetDifference(context.Context, *TLUpdatesGetDifference) (*Updates_Difference, error)
	//  updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	//  updates.getChannelDifference#bb32d7c0 channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	//
	UpdatesGetChannelDifference(context.Context, *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error)
}

// UnimplementedRPCUpdatesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUpdatesServiceServer struct {
}

func (*UnimplementedRPCUpdatesServiceServer) UpdatesGetState(ctx context.Context, req *TLUpdatesGetState) (*Updates_State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetState not implemented")
}
func (*UnimplementedRPCUpdatesServiceServer) UpdatesGetDifference(ctx context.Context, req *TLUpdatesGetDifference) (*Updates_Difference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetDifference not implemented")
}
func (*UnimplementedRPCUpdatesServiceServer) UpdatesGetChannelDifference(ctx context.Context, req *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetChannelDifference not implemented")
}

func RegisterRPCUpdatesServiceServer(s *grpc.Server, srv RPCUpdatesServiceServer) {
	s.RegisterService(&_RPCUpdatesService_serviceDesc, srv)
}

func _RPCUpdatesService_UpdatesGetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServiceServer).UpdatesGetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpdatesService/UpdatesGetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServiceServer).UpdatesGetState(ctx, req.(*TLUpdatesGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdatesService_UpdatesGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServiceServer).UpdatesGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpdatesService/UpdatesGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServiceServer).UpdatesGetDifference(ctx, req.(*TLUpdatesGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdatesService_UpdatesGetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServiceServer).UpdatesGetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpdatesService/UpdatesGetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServiceServer).UpdatesGetChannelDifference(ctx, req.(*TLUpdatesGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUpdatesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUpdatesService",
	HandlerType: (*RPCUpdatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updates_getState",
			Handler:    _RPCUpdatesService_UpdatesGetState_Handler,
		},
		{
			MethodName: "updates_getDifference",
			Handler:    _RPCUpdatesService_UpdatesGetDifference_Handler,
		},
		{
			MethodName: "updates_getChannelDifference",
			Handler:    _RPCUpdatesService_UpdatesGetChannelDifference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCUpdatesService_serviceDesc = map[string][]interface{}{
	"TLUpdatesGetState": {
		"/mtproto.RPCUpdatesService/updates_getState",
		func() interface{} { return new(Updates_State) },
		"UpdatesGetState",
	},
	"TLUpdatesGetDifference": {
		"/mtproto.RPCUpdatesService/updates_getDifference",
		func() interface{} { return new(Updates_Difference) },
		"UpdatesGetDifference",
	},
	"TLUpdatesGetChannelDifference": {
		"/mtproto.RPCUpdatesService/updates_getChannelDifference",
		func() interface{} { return new(Updates_ChannelDifference) },
		"UpdatesGetChannelDifference",
	},
}

// RPCUploadServiceClient is the client API for RPCUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUploadServiceClient interface {
	//  upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	//
	UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error)
	//  upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	//  upload.getFile#b15a9afc flags:# precise:flags.0?true location:InputFileLocation offset:int limit:int = upload.File;
	//
	UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error)
	//  upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	//
	UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error)
	//  upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	//
	UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error)
	//  upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	//
	UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error)
	//  upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	//  upload.reuploadCdnFile#9b2754a8 file_token:bytes request_token:bytes = Vector<FileHash>;
	//
	UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Response_UploadReuploadCdnFile, error)
	//  upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	//  upload.getCdnFileHashes#4da54231 file_token:bytes offset:int = Vector<FileHash>;
	//
	UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Response_UploadGetCdnFileHashes, error)
	//  upload.getFileHashes#c7025931 location:InputFileLocation offset:int = Vector<FileHash>;
	//
	UploadGetFileHashes(ctx context.Context, in *TLUploadGetFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error)
}

type rPCUploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCUploadServiceClient(cc *grpc.ClientConn) RPCUploadServiceClient {
	return &rPCUploadServiceClient{cc}
}

func (c *rPCUploadServiceClient) UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_saveFilePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadServiceClient) UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error) {
	out := new(Upload_File)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_getFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadServiceClient) UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_saveBigFilePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadServiceClient) UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error) {
	out := new(Upload_WebFile)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_getWebFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadServiceClient) UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error) {
	out := new(Upload_CdnFile)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_getCdnFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadServiceClient) UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Response_UploadReuploadCdnFile, error) {
	out := new(Response_UploadReuploadCdnFile)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_reuploadCdnFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadServiceClient) UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Response_UploadGetCdnFileHashes, error) {
	out := new(Response_UploadGetCdnFileHashes)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_getCdnFileHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadServiceClient) UploadGetFileHashes(ctx context.Context, in *TLUploadGetFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error) {
	out := new(Vector_FileHash)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUploadService/upload_getFileHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUploadServiceServer is the server API for RPCUploadService service.
type RPCUploadServiceServer interface {
	//  upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	//
	UploadSaveFilePart(context.Context, *TLUploadSaveFilePart) (*Bool, error)
	//  upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	//  upload.getFile#b15a9afc flags:# precise:flags.0?true location:InputFileLocation offset:int limit:int = upload.File;
	//
	UploadGetFile(context.Context, *TLUploadGetFile) (*Upload_File, error)
	//  upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	//
	UploadSaveBigFilePart(context.Context, *TLUploadSaveBigFilePart) (*Bool, error)
	//  upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	//
	UploadGetWebFile(context.Context, *TLUploadGetWebFile) (*Upload_WebFile, error)
	//  upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	//
	UploadGetCdnFile(context.Context, *TLUploadGetCdnFile) (*Upload_CdnFile, error)
	//  upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	//  upload.reuploadCdnFile#9b2754a8 file_token:bytes request_token:bytes = Vector<FileHash>;
	//
	UploadReuploadCdnFile(context.Context, *TLUploadReuploadCdnFile) (*Response_UploadReuploadCdnFile, error)
	//  upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	//  upload.getCdnFileHashes#4da54231 file_token:bytes offset:int = Vector<FileHash>;
	//
	UploadGetCdnFileHashes(context.Context, *TLUploadGetCdnFileHashes) (*Response_UploadGetCdnFileHashes, error)
	//  upload.getFileHashes#c7025931 location:InputFileLocation offset:int = Vector<FileHash>;
	//
	UploadGetFileHashes(context.Context, *TLUploadGetFileHashes) (*Vector_FileHash, error)
}

// UnimplementedRPCUploadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUploadServiceServer struct {
}

func (*UnimplementedRPCUploadServiceServer) UploadSaveFilePart(ctx context.Context, req *TLUploadSaveFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveFilePart not implemented")
}
func (*UnimplementedRPCUploadServiceServer) UploadGetFile(ctx context.Context, req *TLUploadGetFile) (*Upload_File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFile not implemented")
}
func (*UnimplementedRPCUploadServiceServer) UploadSaveBigFilePart(ctx context.Context, req *TLUploadSaveBigFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveBigFilePart not implemented")
}
func (*UnimplementedRPCUploadServiceServer) UploadGetWebFile(ctx context.Context, req *TLUploadGetWebFile) (*Upload_WebFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetWebFile not implemented")
}
func (*UnimplementedRPCUploadServiceServer) UploadGetCdnFile(ctx context.Context, req *TLUploadGetCdnFile) (*Upload_CdnFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFile not implemented")
}
func (*UnimplementedRPCUploadServiceServer) UploadReuploadCdnFile(ctx context.Context, req *TLUploadReuploadCdnFile) (*Response_UploadReuploadCdnFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReuploadCdnFile not implemented")
}
func (*UnimplementedRPCUploadServiceServer) UploadGetCdnFileHashes(ctx context.Context, req *TLUploadGetCdnFileHashes) (*Response_UploadGetCdnFileHashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFileHashes not implemented")
}
func (*UnimplementedRPCUploadServiceServer) UploadGetFileHashes(ctx context.Context, req *TLUploadGetFileHashes) (*Vector_FileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFileHashes not implemented")
}

func RegisterRPCUploadServiceServer(s *grpc.Server, srv RPCUploadServiceServer) {
	s.RegisterService(&_RPCUploadService_serviceDesc, srv)
}

func _RPCUploadService_UploadSaveFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadSaveFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadSaveFilePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadSaveFilePart(ctx, req.(*TLUploadSaveFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUploadService_UploadGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadGetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadGetFile(ctx, req.(*TLUploadGetFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUploadService_UploadSaveBigFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveBigFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadSaveBigFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadSaveBigFilePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadSaveBigFilePart(ctx, req.(*TLUploadSaveBigFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUploadService_UploadGetWebFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetWebFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadGetWebFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadGetWebFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadGetWebFile(ctx, req.(*TLUploadGetWebFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUploadService_UploadGetCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadGetCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadGetCdnFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadGetCdnFile(ctx, req.(*TLUploadGetCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUploadService_UploadReuploadCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadReuploadCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadReuploadCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadReuploadCdnFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadReuploadCdnFile(ctx, req.(*TLUploadReuploadCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUploadService_UploadGetCdnFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadGetCdnFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadGetCdnFileHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadGetCdnFileHashes(ctx, req.(*TLUploadGetCdnFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUploadService_UploadGetFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServiceServer).UploadGetFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUploadService/UploadGetFileHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServiceServer).UploadGetFileHashes(ctx, req.(*TLUploadGetFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUploadService",
	HandlerType: (*RPCUploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "upload_saveFilePart",
			Handler:    _RPCUploadService_UploadSaveFilePart_Handler,
		},
		{
			MethodName: "upload_getFile",
			Handler:    _RPCUploadService_UploadGetFile_Handler,
		},
		{
			MethodName: "upload_saveBigFilePart",
			Handler:    _RPCUploadService_UploadSaveBigFilePart_Handler,
		},
		{
			MethodName: "upload_getWebFile",
			Handler:    _RPCUploadService_UploadGetWebFile_Handler,
		},
		{
			MethodName: "upload_getCdnFile",
			Handler:    _RPCUploadService_UploadGetCdnFile_Handler,
		},
		{
			MethodName: "upload_reuploadCdnFile",
			Handler:    _RPCUploadService_UploadReuploadCdnFile_Handler,
		},
		{
			MethodName: "upload_getCdnFileHashes",
			Handler:    _RPCUploadService_UploadGetCdnFileHashes_Handler,
		},
		{
			MethodName: "upload_getFileHashes",
			Handler:    _RPCUploadService_UploadGetFileHashes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCUploadService_serviceDesc = map[string][]interface{}{
	"TLUploadSaveFilePart": {
		"/mtproto.RPCUploadService/upload_saveFilePart",
		func() interface{} { return new(Bool) },
		"UploadSaveFilePart",
	},
	"TLUploadGetFile": {
		"/mtproto.RPCUploadService/upload_getFile",
		func() interface{} { return new(Upload_File) },
		"UploadGetFile",
	},
	"TLUploadSaveBigFilePart": {
		"/mtproto.RPCUploadService/upload_saveBigFilePart",
		func() interface{} { return new(Bool) },
		"UploadSaveBigFilePart",
	},
	"TLUploadGetWebFile": {
		"/mtproto.RPCUploadService/upload_getWebFile",
		func() interface{} { return new(Upload_WebFile) },
		"UploadGetWebFile",
	},
	"TLUploadGetCdnFile": {
		"/mtproto.RPCUploadService/upload_getCdnFile",
		func() interface{} { return new(Upload_CdnFile) },
		"UploadGetCdnFile",
	},
	"TLUploadReuploadCdnFile": {
		"/mtproto.RPCUploadService/upload_reuploadCdnFile",
		func() interface{} { return new(Response_UploadReuploadCdnFile) },
		"UploadReuploadCdnFile",
	},
	"TLUploadGetCdnFileHashes": {
		"/mtproto.RPCUploadService/upload_getCdnFileHashes",
		func() interface{} { return new(Response_UploadGetCdnFileHashes) },
		"UploadGetCdnFileHashes",
	},
	"TLUploadGetFileHashes": {
		"/mtproto.RPCUploadService/upload_getFileHashes",
		func() interface{} { return new(Vector_FileHash) },
		"UploadGetFileHashes",
	},
}

// RPCUsersServiceClient is the client API for RPCUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUsersServiceClient interface {
	//  users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	//
	UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error)
	//  users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	//
	UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error)
	//  users.setSecureValueErrors#90c894b5 id:InputUser errors:Vector<SecureValueError> = Bool;
	//
	UsersSetSecureValueErrors(ctx context.Context, in *TLUsersSetSecureValueErrors, opts ...grpc.CallOption) (*Bool, error)
}

type rPCUsersServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCUsersServiceClient(cc *grpc.ClientConn) RPCUsersServiceClient {
	return &rPCUsersServiceClient{cc}
}

func (c *rPCUsersServiceClient) UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error) {
	out := new(Vector_User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsersService/users_getUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersServiceClient) UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error) {
	out := new(UserFull)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsersService/users_getFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersServiceClient) UsersSetSecureValueErrors(ctx context.Context, in *TLUsersSetSecureValueErrors, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsersService/users_setSecureValueErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUsersServiceServer is the server API for RPCUsersService service.
type RPCUsersServiceServer interface {
	//  users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	//
	UsersGetUsers(context.Context, *TLUsersGetUsers) (*Vector_User, error)
	//  users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	//
	UsersGetFullUser(context.Context, *TLUsersGetFullUser) (*UserFull, error)
	//  users.setSecureValueErrors#90c894b5 id:InputUser errors:Vector<SecureValueError> = Bool;
	//
	UsersSetSecureValueErrors(context.Context, *TLUsersSetSecureValueErrors) (*Bool, error)
}

// UnimplementedRPCUsersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUsersServiceServer struct {
}

func (*UnimplementedRPCUsersServiceServer) UsersGetUsers(ctx context.Context, req *TLUsersGetUsers) (*Vector_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetUsers not implemented")
}
func (*UnimplementedRPCUsersServiceServer) UsersGetFullUser(ctx context.Context, req *TLUsersGetFullUser) (*UserFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetFullUser not implemented")
}
func (*UnimplementedRPCUsersServiceServer) UsersSetSecureValueErrors(ctx context.Context, req *TLUsersSetSecureValueErrors) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersSetSecureValueErrors not implemented")
}

func RegisterRPCUsersServiceServer(s *grpc.Server, srv RPCUsersServiceServer) {
	s.RegisterService(&_RPCUsersService_serviceDesc, srv)
}

func _RPCUsersService_UsersGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServiceServer).UsersGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsersService/UsersGetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServiceServer).UsersGetUsers(ctx, req.(*TLUsersGetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsersService_UsersGetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetFullUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServiceServer).UsersGetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsersService/UsersGetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServiceServer).UsersGetFullUser(ctx, req.(*TLUsersGetFullUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsersService_UsersSetSecureValueErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersSetSecureValueErrors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServiceServer).UsersSetSecureValueErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsersService/UsersSetSecureValueErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServiceServer).UsersSetSecureValueErrors(ctx, req.(*TLUsersSetSecureValueErrors))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUsersService",
	HandlerType: (*RPCUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "users_getUsers",
			Handler:    _RPCUsersService_UsersGetUsers_Handler,
		},
		{
			MethodName: "users_getFullUser",
			Handler:    _RPCUsersService_UsersGetFullUser_Handler,
		},
		{
			MethodName: "users_setSecureValueErrors",
			Handler:    _RPCUsersService_UsersSetSecureValueErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCUsersService_serviceDesc = map[string][]interface{}{
	"TLUsersGetUsers": {
		"/mtproto.RPCUsersService/users_getUsers",
		func() interface{} { return new(Vector_User) },
		"UsersGetUsers",
	},
	"TLUsersGetFullUser": {
		"/mtproto.RPCUsersService/users_getFullUser",
		func() interface{} { return new(UserFull) },
		"UsersGetFullUser",
	},
	"TLUsersSetSecureValueErrors": {
		"/mtproto.RPCUsersService/users_setSecureValueErrors",
		func() interface{} { return new(Bool) },
		"UsersSetSecureValueErrors",
	},
}

// RPCWalletServiceClient is the client API for RPCWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCWalletServiceClient interface {
	//  wallet.sendLiteRequest#e2c9d33e body:bytes = wallet.LiteResponse;
	//
	WalletSendLiteRequest(ctx context.Context, in *TLWalletSendLiteRequest, opts ...grpc.CallOption) (*Wallet_LiteResponse, error)
	//  wallet.getKeySecretSalt#b57f346 revoke:Bool = wallet.KeySecretSalt;
	//
	WalletGetKeySecretSalt(ctx context.Context, in *TLWalletGetKeySecretSalt, opts ...grpc.CallOption) (*Wallet_KeySecretSalt, error)
}

type rPCWalletServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCWalletServiceClient(cc *grpc.ClientConn) RPCWalletServiceClient {
	return &rPCWalletServiceClient{cc}
}

func (c *rPCWalletServiceClient) WalletSendLiteRequest(ctx context.Context, in *TLWalletSendLiteRequest, opts ...grpc.CallOption) (*Wallet_LiteResponse, error) {
	out := new(Wallet_LiteResponse)
	err := c.cc.Invoke(ctx, "/mtproto.RPCWalletService/wallet_sendLiteRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCWalletServiceClient) WalletGetKeySecretSalt(ctx context.Context, in *TLWalletGetKeySecretSalt, opts ...grpc.CallOption) (*Wallet_KeySecretSalt, error) {
	out := new(Wallet_KeySecretSalt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCWalletService/wallet_getKeySecretSalt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCWalletServiceServer is the server API for RPCWalletService service.
type RPCWalletServiceServer interface {
	//  wallet.sendLiteRequest#e2c9d33e body:bytes = wallet.LiteResponse;
	//
	WalletSendLiteRequest(context.Context, *TLWalletSendLiteRequest) (*Wallet_LiteResponse, error)
	//  wallet.getKeySecretSalt#b57f346 revoke:Bool = wallet.KeySecretSalt;
	//
	WalletGetKeySecretSalt(context.Context, *TLWalletGetKeySecretSalt) (*Wallet_KeySecretSalt, error)
}

// UnimplementedRPCWalletServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPCWalletServiceServer struct {
}

func (*UnimplementedRPCWalletServiceServer) WalletSendLiteRequest(ctx context.Context, req *TLWalletSendLiteRequest) (*Wallet_LiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletSendLiteRequest not implemented")
}
func (*UnimplementedRPCWalletServiceServer) WalletGetKeySecretSalt(ctx context.Context, req *TLWalletGetKeySecretSalt) (*Wallet_KeySecretSalt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletGetKeySecretSalt not implemented")
}

func RegisterRPCWalletServiceServer(s *grpc.Server, srv RPCWalletServiceServer) {
	s.RegisterService(&_RPCWalletService_serviceDesc, srv)
}

func _RPCWalletService_WalletSendLiteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLWalletSendLiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWalletServiceServer).WalletSendLiteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCWalletService/WalletSendLiteRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWalletServiceServer).WalletSendLiteRequest(ctx, req.(*TLWalletSendLiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCWalletService_WalletGetKeySecretSalt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLWalletGetKeySecretSalt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCWalletServiceServer).WalletGetKeySecretSalt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCWalletService/WalletGetKeySecretSalt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCWalletServiceServer).WalletGetKeySecretSalt(ctx, req.(*TLWalletGetKeySecretSalt))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCWalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCWalletService",
	HandlerType: (*RPCWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "wallet_sendLiteRequest",
			Handler:    _RPCWalletService_WalletSendLiteRequest_Handler,
		},
		{
			MethodName: "wallet_getKeySecretSalt",
			Handler:    _RPCWalletService_WalletGetKeySecretSalt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.rpc.proto",
}

var RPCWalletService_serviceDesc = map[string][]interface{}{
	"TLWalletSendLiteRequest": {
		"/mtproto.RPCWalletService/wallet_sendLiteRequest",
		func() interface{} { return new(Wallet_LiteResponse) },
		"WalletSendLiteRequest",
	},
	"TLWalletGetKeySecretSalt": {
		"/mtproto.RPCWalletService/wallet_getKeySecretSalt",
		func() interface{} { return new(Wallet_KeySecretSalt) },
		"WalletGetKeySecretSalt",
	},
}
