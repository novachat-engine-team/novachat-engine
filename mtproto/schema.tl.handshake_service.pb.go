// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.tl.handshake_service.proto

package mtproto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

///////////////////////////////////////////////////////////////////////////////
// [destroy_auth_key#d1435160 = DestroyAuthKeyRes;]
type TLDestroyAuthKey struct {
	Cmd                  TLCmd    `protobuf:"varint,1,opt,name=cmd,proto3,enum=mtproto.TLCmd" json:"cmd,omitempty"`
	ClassName            string   `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLDestroyAuthKey) Reset()         { *m = TLDestroyAuthKey{} }
func (m *TLDestroyAuthKey) String() string { return proto.CompactTextString(m) }
func (*TLDestroyAuthKey) ProtoMessage()    {}
func (*TLDestroyAuthKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f7ab58ab796049, []int{0}
}
func (m *TLDestroyAuthKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDestroyAuthKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDestroyAuthKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDestroyAuthKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDestroyAuthKey.Merge(m, src)
}
func (m *TLDestroyAuthKey) XXX_Size() int {
	return m.Size()
}
func (m *TLDestroyAuthKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDestroyAuthKey.DiscardUnknown(m)
}

var xxx_messageInfo_TLDestroyAuthKey proto.InternalMessageInfo

func (m *TLDestroyAuthKey) GetCmd() TLCmd {
	if m != nil {
		return m.Cmd
	}
	return Cmd_UNKNOWN
}

func (m *TLDestroyAuthKey) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// [req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:string q:string public_key_fingerprint:long encrypted_data:string = Server_DH_Params;]
type TLReq_DHParams struct {
	Cmd                  TLCmd    `protobuf:"varint,1,opt,name=cmd,proto3,enum=mtproto.TLCmd" json:"cmd,omitempty"`
	ClassName            string   `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Nonce                []byte   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte   `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	P                    string   `protobuf:"bytes,5,opt,name=p,proto3" json:"p,omitempty"`
	Q                    string   `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	PublicKeyFingerprint int64    `protobuf:"varint,7,opt,name=public_key_fingerprint,json=publicKeyFingerprint,proto3" json:"public_key_fingerprint,omitempty"`
	EncryptedData        string   `protobuf:"bytes,8,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLReq_DHParams) Reset()         { *m = TLReq_DHParams{} }
func (m *TLReq_DHParams) String() string { return proto.CompactTextString(m) }
func (*TLReq_DHParams) ProtoMessage()    {}
func (*TLReq_DHParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f7ab58ab796049, []int{1}
}
func (m *TLReq_DHParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReq_DHParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReq_DHParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReq_DHParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReq_DHParams.Merge(m, src)
}
func (m *TLReq_DHParams) XXX_Size() int {
	return m.Size()
}
func (m *TLReq_DHParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReq_DHParams.DiscardUnknown(m)
}

var xxx_messageInfo_TLReq_DHParams proto.InternalMessageInfo

func (m *TLReq_DHParams) GetCmd() TLCmd {
	if m != nil {
		return m.Cmd
	}
	return Cmd_UNKNOWN
}

func (m *TLReq_DHParams) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *TLReq_DHParams) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *TLReq_DHParams) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *TLReq_DHParams) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

func (m *TLReq_DHParams) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLReq_DHParams) GetPublicKeyFingerprint() int64 {
	if m != nil {
		return m.PublicKeyFingerprint
	}
	return 0
}

func (m *TLReq_DHParams) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// [req_pq#60469778 nonce:int128 = ResPQ;]
type TLReqPq struct {
	Cmd                  TLCmd    `protobuf:"varint,1,opt,name=cmd,proto3,enum=mtproto.TLCmd" json:"cmd,omitempty"`
	ClassName            string   `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Nonce                []byte   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLReqPq) Reset()         { *m = TLReqPq{} }
func (m *TLReqPq) String() string { return proto.CompactTextString(m) }
func (*TLReqPq) ProtoMessage()    {}
func (*TLReqPq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f7ab58ab796049, []int{2}
}
func (m *TLReqPq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReqPq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReqPq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReqPq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReqPq.Merge(m, src)
}
func (m *TLReqPq) XXX_Size() int {
	return m.Size()
}
func (m *TLReqPq) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReqPq.DiscardUnknown(m)
}

var xxx_messageInfo_TLReqPq proto.InternalMessageInfo

func (m *TLReqPq) GetCmd() TLCmd {
	if m != nil {
		return m.Cmd
	}
	return Cmd_UNKNOWN
}

func (m *TLReqPq) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *TLReqPq) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// [req_pq_multi#be7e8ef1 nonce:int128 = ResPQ;]
type TLReqPqMulti struct {
	Cmd                  TLCmd    `protobuf:"varint,1,opt,name=cmd,proto3,enum=mtproto.TLCmd" json:"cmd,omitempty"`
	ClassName            string   `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Nonce                []byte   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLReqPqMulti) Reset()         { *m = TLReqPqMulti{} }
func (m *TLReqPqMulti) String() string { return proto.CompactTextString(m) }
func (*TLReqPqMulti) ProtoMessage()    {}
func (*TLReqPqMulti) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f7ab58ab796049, []int{3}
}
func (m *TLReqPqMulti) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLReqPqMulti) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLReqPqMulti.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLReqPqMulti) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLReqPqMulti.Merge(m, src)
}
func (m *TLReqPqMulti) XXX_Size() int {
	return m.Size()
}
func (m *TLReqPqMulti) XXX_DiscardUnknown() {
	xxx_messageInfo_TLReqPqMulti.DiscardUnknown(m)
}

var xxx_messageInfo_TLReqPqMulti proto.InternalMessageInfo

func (m *TLReqPqMulti) GetCmd() TLCmd {
	if m != nil {
		return m.Cmd
	}
	return Cmd_UNKNOWN
}

func (m *TLReqPqMulti) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *TLReqPqMulti) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// [set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:string = Set_client_DH_params_answer;]
type TLSetClient_DHParams struct {
	Cmd                  TLCmd    `protobuf:"varint,1,opt,name=cmd,proto3,enum=mtproto.TLCmd" json:"cmd,omitempty"`
	ClassName            string   `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Nonce                []byte   `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce          []byte   `protobuf:"bytes,4,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	EncryptedData        string   `protobuf:"bytes,5,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSetClient_DHParams) Reset()         { *m = TLSetClient_DHParams{} }
func (m *TLSetClient_DHParams) String() string { return proto.CompactTextString(m) }
func (*TLSetClient_DHParams) ProtoMessage()    {}
func (*TLSetClient_DHParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f7ab58ab796049, []int{4}
}
func (m *TLSetClient_DHParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSetClient_DHParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSetClient_DHParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSetClient_DHParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSetClient_DHParams.Merge(m, src)
}
func (m *TLSetClient_DHParams) XXX_Size() int {
	return m.Size()
}
func (m *TLSetClient_DHParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSetClient_DHParams.DiscardUnknown(m)
}

var xxx_messageInfo_TLSetClient_DHParams proto.InternalMessageInfo

func (m *TLSetClient_DHParams) GetCmd() TLCmd {
	if m != nil {
		return m.Cmd
	}
	return Cmd_UNKNOWN
}

func (m *TLSetClient_DHParams) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *TLSetClient_DHParams) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *TLSetClient_DHParams) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *TLSetClient_DHParams) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

func init() {
	proto.RegisterType((*TLDestroyAuthKey)(nil), "mtproto.TL_destroy_auth_key")
	proto.RegisterType((*TLReq_DHParams)(nil), "mtproto.TL_req_DH_params")
	proto.RegisterType((*TLReqPq)(nil), "mtproto.TL_req_pq")
	proto.RegisterType((*TLReqPqMulti)(nil), "mtproto.TL_req_pq_multi")
	proto.RegisterType((*TLSetClient_DHParams)(nil), "mtproto.TL_set_client_DH_params")
}

func init() { proto.RegisterFile("schema.tl.handshake_service.proto", fileDescriptor_c6f7ab58ab796049) }

var fileDescriptor_c6f7ab58ab796049 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x65, 0x5e, 0xed, 0x7b, 0x76, 0xac, 0x55, 0xf2, 0x1e, 0x1a, 0x1f, 0x18, 0xd2, 0x80, 0x90,
	0x8d, 0x29, 0xa8, 0x5f, 0xa0, 0x45, 0x04, 0x43, 0x17, 0x21, 0xb8, 0x70, 0x33, 0x4c, 0x26, 0xb7,
	0x49, 0x68, 0x66, 0x32, 0x99, 0x99, 0x08, 0xf9, 0x00, 0x7f, 0xca, 0x2f, 0x70, 0xe9, 0x27, 0x68,
	0xbf, 0xc0, 0x4f, 0x90, 0x4c, 0x6a, 0xbb, 0xd0, 0x9d, 0x14, 0x5c, 0xcd, 0x3d, 0xe7, 0xcc, 0x9c,
	0xcb, 0xbd, 0x87, 0xc1, 0x4b, 0xcd, 0x4a, 0xe0, 0x34, 0x32, 0x75, 0x54, 0x52, 0x91, 0xeb, 0x92,
	0xee, 0x80, 0x68, 0x50, 0x9f, 0x2a, 0x06, 0x91, 0x54, 0x8d, 0x69, 0x9c, 0x2b, 0x6e, 0x6c, 0x71,
	0xfb, 0xbc, 0xa8, 0x4c, 0xd9, 0x65, 0x11, 0x6b, 0xf8, 0xaa, 0x68, 0x8a, 0x66, 0x65, 0xe9, 0xac,
	0xdb, 0x5a, 0x64, 0x81, 0xad, 0xc6, 0x77, 0xb7, 0xd7, 0x27, 0x6b, 0xc6, 0xf3, 0x91, 0x0c, 0x3e,
	0xe0, 0xeb, 0x34, 0x26, 0x39, 0x68, 0xa3, 0x9a, 0x9e, 0xd0, 0xce, 0x94, 0x64, 0x07, 0xbd, 0xe3,
	0xe3, 0x09, 0xe3, 0xb9, 0x8b, 0x7c, 0x14, 0x2e, 0x5e, 0x2c, 0xa2, 0x43, 0xc7, 0x28, 0x8d, 0xdf,
	0xf0, 0x3c, 0x19, 0x24, 0xe7, 0x29, 0xc6, 0xac, 0xa6, 0x5a, 0x13, 0x41, 0x39, 0xb8, 0x17, 0x3e,
	0x0a, 0x67, 0xc9, 0xcc, 0x32, 0x1b, 0xca, 0x21, 0xf8, 0x7c, 0x81, 0x1f, 0xa6, 0x31, 0x51, 0xd0,
	0x92, 0xf5, 0x3b, 0x22, 0xa9, 0xa2, 0x5c, 0xff, 0xb3, 0xab, 0x73, 0x83, 0xa7, 0xa2, 0x11, 0x0c,
	0xdc, 0x89, 0x8f, 0xc2, 0x79, 0x32, 0x02, 0x67, 0x89, 0xe7, 0xc3, 0x86, 0x40, 0x91, 0x51, 0xbc,
	0x63, 0xc5, 0x7b, 0x23, 0xb7, 0xb1, 0x57, 0xe6, 0x18, 0x49, 0x77, 0x6a, 0xed, 0x90, 0x1c, 0x50,
	0xeb, 0x5e, 0x8e, 0xa8, 0x75, 0x5e, 0xe1, 0x47, 0xb2, 0xcb, 0xea, 0x8a, 0x0d, 0x93, 0x93, 0x6d,
	0x25, 0x0a, 0x50, 0x52, 0x55, 0xc2, 0xb8, 0x57, 0x3e, 0x0a, 0x27, 0xc9, 0xcd, 0xa8, 0xbe, 0x87,
	0xfe, 0xed, 0x49, 0x73, 0x9e, 0xe1, 0x05, 0x08, 0xa6, 0x7a, 0x69, 0x20, 0x27, 0x39, 0x35, 0xd4,
	0xbd, 0x6b, 0x0d, 0xef, 0x1f, 0xd9, 0x35, 0x35, 0x34, 0xc8, 0xf0, 0xec, 0xb0, 0x06, 0xd9, 0x9e,
	0x69, 0xfe, 0xa0, 0xc4, 0x0f, 0x8e, 0x3d, 0x08, 0xef, 0x6a, 0x53, 0x9d, 0xab, 0xd3, 0x17, 0x84,
	0x1f, 0xa7, 0x31, 0xd1, 0x60, 0x08, 0xab, 0x2b, 0x10, 0xe6, 0xbf, 0x08, 0xf7, 0xcf, 0x28, 0xa6,
	0x7f, 0x89, 0xe2, 0xf5, 0x93, 0x9f, 0x3f, 0x3c, 0xf4, 0x75, 0xef, 0xa1, 0x6f, 0x7b, 0x0f, 0x7d,
	0xdf, 0x7b, 0xe8, 0xe3, 0xef, 0x9f, 0x94, 0x5d, 0xda, 0xe3, 0xe5, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x17, 0x68, 0x71, 0xcb, 0x7e, 0x03, 0x00, 0x00,
}

func (this *TLDestroyAuthKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mtproto.TLDestroyAuthKey{")
	s = append(s, "Cmd: "+fmt.Sprintf("%#v", this.Cmd)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReq_DHParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&mtproto.TLReq_DHParams{")
	s = append(s, "Cmd: "+fmt.Sprintf("%#v", this.Cmd)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "P: "+fmt.Sprintf("%#v", this.P)+",\n")
	s = append(s, "Q: "+fmt.Sprintf("%#v", this.Q)+",\n")
	s = append(s, "PublicKeyFingerprint: "+fmt.Sprintf("%#v", this.PublicKeyFingerprint)+",\n")
	s = append(s, "EncryptedData: "+fmt.Sprintf("%#v", this.EncryptedData)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReqPq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&mtproto.TLReqPq{")
	s = append(s, "Cmd: "+fmt.Sprintf("%#v", this.Cmd)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLReqPqMulti) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&mtproto.TLReqPqMulti{")
	s = append(s, "Cmd: "+fmt.Sprintf("%#v", this.Cmd)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSetClient_DHParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&mtproto.TLSetClient_DHParams{")
	s = append(s, "Cmd: "+fmt.Sprintf("%#v", this.Cmd)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "ServerNonce: "+fmt.Sprintf("%#v", this.ServerNonce)+",\n")
	s = append(s, "EncryptedData: "+fmt.Sprintf("%#v", this.EncryptedData)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchemaTlHandshakeService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TLDestroyAuthKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDestroyAuthKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDestroyAuthKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cmd != 0 {
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReq_DHParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReq_DHParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReq_DHParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EncryptedData) > 0 {
		i -= len(m.EncryptedData)
		copy(dAtA[i:], m.EncryptedData)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.EncryptedData)))
		i--
		dAtA[i] = 0x42
	}
	if m.PublicKeyFingerprint != 0 {
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.PublicKeyFingerprint))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.P) > 0 {
		i -= len(m.P)
		copy(dAtA[i:], m.P)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.P)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerNonce) > 0 {
		i -= len(m.ServerNonce)
		copy(dAtA[i:], m.ServerNonce)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ServerNonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cmd != 0 {
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReqPq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReqPq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReqPq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cmd != 0 {
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLReqPqMulti) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLReqPqMulti) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLReqPqMulti) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cmd != 0 {
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSetClient_DHParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSetClient_DHParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSetClient_DHParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EncryptedData) > 0 {
		i -= len(m.EncryptedData)
		copy(dAtA[i:], m.EncryptedData)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.EncryptedData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerNonce) > 0 {
		i -= len(m.ServerNonce)
		copy(dAtA[i:], m.ServerNonce)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ServerNonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cmd != 0 {
		i = encodeVarintSchemaTlHandshakeService(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchemaTlHandshakeService(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchemaTlHandshakeService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLDestroyAuthKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Cmd))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReq_DHParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Cmd))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.PublicKeyFingerprint != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.PublicKeyFingerprint))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReqPq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Cmd))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLReqPqMulti) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Cmd))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSetClient_DHParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovSchemaTlHandshakeService(uint64(m.Cmd))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovSchemaTlHandshakeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSchemaTlHandshakeService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchemaTlHandshakeService(x uint64) (n int) {
	return sovSchemaTlHandshakeService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TLDestroyAuthKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_destroy_auth_key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_destroy_auth_key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= TLCmd(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReq_DHParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_req_DH_params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_req_DH_params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= TLCmd(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyFingerprint", wireType)
			}
			m.PublicKeyFingerprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicKeyFingerprint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReqPq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_req_pq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_req_pq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= TLCmd(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLReqPqMulti) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_req_pq_multi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_req_pq_multi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= TLCmd(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSetClient_DHParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_set_client_DH_params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_set_client_DH_params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= TLCmd(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlHandshakeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlHandshakeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchemaTlHandshakeService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchemaTlHandshakeService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlHandshakeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchemaTlHandshakeService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchemaTlHandshakeService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchemaTlHandshakeService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchemaTlHandshakeService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchemaTlHandshakeService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchemaTlHandshakeService = fmt.Errorf("proto: unexpected end of group")
)
