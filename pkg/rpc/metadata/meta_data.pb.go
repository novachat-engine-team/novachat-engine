// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta_data.proto

package metadata

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// rpc
// rpc_meta_data
type RpcMetaData struct {
	AuthKeyId         int64    `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId         int64    `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId            int64    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServerPeer        string   `protobuf:"bytes,4,opt,name=server_peer,json=serverPeer,proto3" json:"server_peer,omitempty"`
	Layer             int32    `protobuf:"varint,5,opt,name=layer,proto3" json:"layer,omitempty"`
	Ip                string   `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	SessionServerPeer string   `protobuf:"bytes,7,opt,name=session_server_peer,json=sessionServerPeer,proto3" json:"session_server_peer,omitempty"`
	ServerTrace       []string `protobuf:"bytes,8,rep,name=server_trace,json=serverTrace,proto3" json:"server_trace,omitempty"`
	ReqMsgId          int64    `protobuf:"varint,9,opt,name=req_msg_id,json=reqMsgId,proto3" json:"req_msg_id,omitempty"`
	ApiId             int32    `protobuf:"varint,10,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel       string   `protobuf:"bytes,11,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion     string   `protobuf:"bytes,12,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion        string   `protobuf:"bytes,13,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	SystemLangCode    string   `protobuf:"bytes,14,opt,name=system_lang_code,json=systemLangCode,proto3" json:"system_lang_code,omitempty"`
	LangPack          string   `protobuf:"bytes,15,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode          string   `protobuf:"bytes,16,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	ProxyAddress      string   `protobuf:"bytes,17,opt,name=proxy_address,json=proxyAddress,proto3" json:"proxy_address,omitempty"`
	ProxyPort         int32    `protobuf:"varint,18,opt,name=proxy_port,json=proxyPort,proto3" json:"proxy_port,omitempty"`
	PermAuthKeyId     int64    `protobuf:"varint,19,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
}

func (m *RpcMetaData) Reset()         { *m = RpcMetaData{} }
func (m *RpcMetaData) String() string { return proto.CompactTextString(m) }
func (*RpcMetaData) ProtoMessage()    {}
func (*RpcMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d96a7c3dcac8720, []int{0}
}
func (m *RpcMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcMetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcMetaData.Merge(m, src)
}
func (m *RpcMetaData) XXX_Size() int {
	return m.Size()
}
func (m *RpcMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_RpcMetaData proto.InternalMessageInfo

func (m *RpcMetaData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *RpcMetaData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *RpcMetaData) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RpcMetaData) GetServerPeer() string {
	if m != nil {
		return m.ServerPeer
	}
	return ""
}

func (m *RpcMetaData) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *RpcMetaData) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RpcMetaData) GetSessionServerPeer() string {
	if m != nil {
		return m.SessionServerPeer
	}
	return ""
}

func (m *RpcMetaData) GetServerTrace() []string {
	if m != nil {
		return m.ServerTrace
	}
	return nil
}

func (m *RpcMetaData) GetReqMsgId() int64 {
	if m != nil {
		return m.ReqMsgId
	}
	return 0
}

func (m *RpcMetaData) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *RpcMetaData) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *RpcMetaData) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *RpcMetaData) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *RpcMetaData) GetSystemLangCode() string {
	if m != nil {
		return m.SystemLangCode
	}
	return ""
}

func (m *RpcMetaData) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *RpcMetaData) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *RpcMetaData) GetProxyAddress() string {
	if m != nil {
		return m.ProxyAddress
	}
	return ""
}

func (m *RpcMetaData) GetProxyPort() int32 {
	if m != nil {
		return m.ProxyPort
	}
	return 0
}

func (m *RpcMetaData) GetPermAuthKeyId() int64 {
	if m != nil {
		return m.PermAuthKeyId
	}
	return 0
}

func init() {
	proto.RegisterType((*RpcMetaData)(nil), "metadata.rpc_meta_data")
}

func init() { proto.RegisterFile("meta_data.proto", fileDescriptor_5d96a7c3dcac8720) }

var fileDescriptor_5d96a7c3dcac8720 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xcf, 0x72, 0x12, 0x41,
	0x10, 0x87, 0xb3, 0x20, 0x84, 0x6d, 0xfe, 0x84, 0x4c, 0xb4, 0x9c, 0x8a, 0x0a, 0xa8, 0x65, 0xc9,
	0x45, 0x72, 0xf0, 0xe6, 0x2d, 0x7a, 0xa2, 0x34, 0x55, 0x14, 0x5a, 0x1e, 0xbc, 0x4c, 0x0d, 0x3b,
	0xed, 0x66, 0x0b, 0x96, 0x99, 0xcc, 0x2c, 0x94, 0xdc, 0x7c, 0x04, 0x8f, 0x5e, 0xcd, 0xd3, 0x78,
	0xcc, 0x23, 0x28, 0x4f, 0xe0, 0x23, 0x58, 0xd3, 0xb3, 0x90, 0xdc, 0xe8, 0xef, 0xf7, 0x4d, 0xd3,
	0xd5, 0xdb, 0x70, 0x94, 0x63, 0x21, 0x85, 0x92, 0x85, 0x1c, 0x19, 0xab, 0x0b, 0xcd, 0x1a, 0x1e,
	0xf8, 0xfa, 0xf4, 0x55, 0x9a, 0x15, 0x97, 0xab, 0xd9, 0x28, 0xd1, 0xf9, 0x59, 0xaa, 0x53, 0x7d,
	0x46, 0xc2, 0x6c, 0xf5, 0x95, 0x2a, 0x2a, 0xe8, 0x57, 0x78, 0xf8, 0xec, 0x7b, 0x0d, 0xda, 0xd6,
	0x24, 0x62, 0xdf, 0x90, 0xf5, 0xa0, 0x29, 0x57, 0xc5, 0xa5, 0x98, 0xe3, 0x46, 0x64, 0x8a, 0x47,
	0x83, 0x68, 0x58, 0x9d, 0xc6, 0x1e, 0xbd, 0xc7, 0xcd, 0x58, 0xb1, 0x27, 0x00, 0x0e, 0x9d, 0xcb,
	0xf4, 0xd2, 0xc7, 0x95, 0x10, 0x97, 0x64, 0xac, 0xd8, 0x43, 0x38, 0x5c, 0x39, 0xb4, 0x3e, 0xab,
	0x52, 0x56, 0xf7, 0xe5, 0x58, 0xb1, 0x3e, 0x34, 0x1d, 0xda, 0x35, 0x5a, 0x61, 0x10, 0x2d, 0xbf,
	0x37, 0x88, 0x86, 0xf1, 0x14, 0x02, 0x9a, 0x20, 0x5a, 0x76, 0x1f, 0x6a, 0x0b, 0xb9, 0x41, 0xcb,
	0x6b, 0x83, 0x68, 0x58, 0x9b, 0x86, 0x82, 0x75, 0xa0, 0x92, 0x19, 0x5e, 0x27, 0xbb, 0x92, 0x19,
	0x36, 0x82, 0x93, 0xdd, 0xdf, 0xdf, 0x6d, 0x77, 0x48, 0xc2, 0x71, 0x19, 0x7d, 0xbc, 0xed, 0xfa,
	0x14, 0x5a, 0xa5, 0x57, 0x58, 0x99, 0x20, 0x6f, 0x0c, 0xaa, 0xc3, 0x78, 0x5a, 0x8e, 0xf2, 0xc9,
	0x23, 0xf6, 0x18, 0xc0, 0xe2, 0x95, 0xc8, 0x5d, 0xea, 0xa7, 0x8e, 0x69, 0xea, 0x86, 0xc5, 0xab,
	0x0b, 0x97, 0x8e, 0x15, 0x7b, 0x00, 0x75, 0x69, 0x32, 0x9f, 0x40, 0x98, 0x4b, 0x9a, 0x6c, 0xac,
	0x7c, 0x5f, 0x85, 0xeb, 0x2c, 0x41, 0x91, 0x6b, 0x85, 0x0b, 0xde, 0xa4, 0x01, 0x9a, 0x81, 0x5d,
	0x78, 0xc4, 0x5e, 0x40, 0xc7, 0x6d, 0x5c, 0x81, 0xb9, 0x58, 0xa3, 0xf5, 0x63, 0xf1, 0x16, 0x49,
	0xed, 0x40, 0x3f, 0x07, 0xe8, 0x17, 0x23, 0x8d, 0xd9, 0x3b, 0xed, 0xb0, 0x18, 0x69, 0xcc, 0x4e,
	0x18, 0x42, 0xb7, 0xec, 0xb3, 0x90, 0xcb, 0x54, 0x24, 0x5a, 0x21, 0xef, 0x90, 0x55, 0xf6, 0xff,
	0x20, 0x97, 0xe9, 0x3b, 0xad, 0x90, 0x3d, 0x82, 0x98, 0x14, 0x23, 0x93, 0x39, 0x3f, 0x22, 0xa5,
	0xe1, 0xc1, 0x44, 0x26, 0xf3, 0x7d, 0x48, 0xef, 0xbb, 0xb7, 0x21, 0xbd, 0x7c, 0x0e, 0x6d, 0x63,
	0xf5, 0xb7, 0x8d, 0x90, 0x4a, 0x59, 0x74, 0x8e, 0x1f, 0x93, 0xd0, 0x22, 0x78, 0x1e, 0x98, 0xff,
	0xf4, 0x41, 0x32, 0xda, 0x16, 0x9c, 0xd1, 0x3a, 0x62, 0x22, 0x13, 0x6d, 0x0b, 0xf6, 0x12, 0xba,
	0x06, 0x6d, 0x2e, 0xee, 0x9e, 0xcf, 0x09, 0x6d, 0xb3, 0xed, 0xf9, 0xf9, 0xee, 0x84, 0xde, 0xb4,
	0x6e, 0x7e, 0xf5, 0x0f, 0x7e, 0x5c, 0xf7, 0x0f, 0x7e, 0x5e, 0xf7, 0x0f, 0xde, 0x9e, 0xfe, 0xfb,
	0xdb, 0x8b, 0x7e, 0x6f, 0x7b, 0xd1, 0xcd, 0xb6, 0x17, 0xfd, 0xd9, 0xf6, 0xa2, 0x2f, 0xfb, 0x6b,
	0x9e, 0xd5, 0xe9, 0x4a, 0x5f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x7a, 0xc6, 0x16, 0xf1,
	0x02, 0x00, 0x00,
}

func (this *RpcMetaData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&metadata.RpcMetaData{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ServerPeer: "+fmt.Sprintf("%#v", this.ServerPeer)+",\n")
	s = append(s, "Layer: "+fmt.Sprintf("%#v", this.Layer)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "SessionServerPeer: "+fmt.Sprintf("%#v", this.SessionServerPeer)+",\n")
	s = append(s, "ServerTrace: "+fmt.Sprintf("%#v", this.ServerTrace)+",\n")
	s = append(s, "ReqMsgId: "+fmt.Sprintf("%#v", this.ReqMsgId)+",\n")
	s = append(s, "ApiId: "+fmt.Sprintf("%#v", this.ApiId)+",\n")
	s = append(s, "DeviceModel: "+fmt.Sprintf("%#v", this.DeviceModel)+",\n")
	s = append(s, "SystemVersion: "+fmt.Sprintf("%#v", this.SystemVersion)+",\n")
	s = append(s, "AppVersion: "+fmt.Sprintf("%#v", this.AppVersion)+",\n")
	s = append(s, "SystemLangCode: "+fmt.Sprintf("%#v", this.SystemLangCode)+",\n")
	s = append(s, "LangPack: "+fmt.Sprintf("%#v", this.LangPack)+",\n")
	s = append(s, "LangCode: "+fmt.Sprintf("%#v", this.LangCode)+",\n")
	s = append(s, "ProxyAddress: "+fmt.Sprintf("%#v", this.ProxyAddress)+",\n")
	s = append(s, "ProxyPort: "+fmt.Sprintf("%#v", this.ProxyPort)+",\n")
	s = append(s, "PermAuthKeyId: "+fmt.Sprintf("%#v", this.PermAuthKeyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMetaData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RpcMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcMetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcMetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PermAuthKeyId != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.PermAuthKeyId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ProxyPort != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.ProxyPort))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.ProxyAddress) > 0 {
		i -= len(m.ProxyAddress)
		copy(dAtA[i:], m.ProxyAddress)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.ProxyAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SystemLangCode) > 0 {
		i -= len(m.SystemLangCode)
		copy(dAtA[i:], m.SystemLangCode)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.SystemLangCode)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SystemVersion) > 0 {
		i -= len(m.SystemVersion)
		copy(dAtA[i:], m.SystemVersion)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.SystemVersion)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DeviceModel) > 0 {
		i -= len(m.DeviceModel)
		copy(dAtA[i:], m.DeviceModel)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.DeviceModel)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ApiId != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x50
	}
	if m.ReqMsgId != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.ReqMsgId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ServerTrace) > 0 {
		for iNdEx := len(m.ServerTrace) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServerTrace[iNdEx])
			copy(dAtA[i:], m.ServerTrace[iNdEx])
			i = encodeVarintMetaData(dAtA, i, uint64(len(m.ServerTrace[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SessionServerPeer) > 0 {
		i -= len(m.SessionServerPeer)
		copy(dAtA[i:], m.SessionServerPeer)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.SessionServerPeer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if m.Layer != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ServerPeer) > 0 {
		i -= len(m.ServerPeer)
		copy(dAtA[i:], m.ServerPeer)
		i = encodeVarintMetaData(dAtA, i, uint64(len(m.ServerPeer)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.SessionId != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintMetaData(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetaData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetaData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RpcMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovMetaData(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovMetaData(uint64(m.SessionId))
	}
	if m.UserId != 0 {
		n += 1 + sovMetaData(uint64(m.UserId))
	}
	l = len(m.ServerPeer)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	if m.Layer != 0 {
		n += 1 + sovMetaData(uint64(m.Layer))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	l = len(m.SessionServerPeer)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	if len(m.ServerTrace) > 0 {
		for _, s := range m.ServerTrace {
			l = len(s)
			n += 1 + l + sovMetaData(uint64(l))
		}
	}
	if m.ReqMsgId != 0 {
		n += 1 + sovMetaData(uint64(m.ReqMsgId))
	}
	if m.ApiId != 0 {
		n += 1 + sovMetaData(uint64(m.ApiId))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	l = len(m.SystemLangCode)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovMetaData(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 2 + l + sovMetaData(uint64(l))
	}
	l = len(m.ProxyAddress)
	if l > 0 {
		n += 2 + l + sovMetaData(uint64(l))
	}
	if m.ProxyPort != 0 {
		n += 2 + sovMetaData(uint64(m.ProxyPort))
	}
	if m.PermAuthKeyId != 0 {
		n += 2 + sovMetaData(uint64(m.PermAuthKeyId))
	}
	return n
}

func sovMetaData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetaData(x uint64) (n int) {
	return sovMetaData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpcMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: rpc_meta_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: rpc_meta_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPeer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerPeer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionServerPeer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionServerPeer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerTrace = append(m.ServerTrace, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMsgId", wireType)
			}
			m.ReqMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqMsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemLangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemLangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyPort", wireType)
			}
			m.ProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermAuthKeyId", wireType)
			}
			m.PermAuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermAuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetaData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetaData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetaData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetaData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetaData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetaData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetaData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetaData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetaData = fmt.Errorf("proto: unexpected end of group")
)
