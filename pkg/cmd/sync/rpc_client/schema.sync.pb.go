// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.sync.proto

package rpc_client

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	mtproto "novachat_engine/mtproto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

/////  Sync
type SyncUpdate struct {
	UserId          int64            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId       int64            `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	IgnoreAuthKeyId int64            `protobuf:"varint,3,opt,name=ignore_auth_key_id,json=ignoreAuthKeyId,proto3" json:"ignore_auth_key_id,omitempty"`
	Updates         *mtproto.Updates `protobuf:"bytes,4,opt,name=updates,proto3" json:"updates,omitempty"`
	Push            bool             `protobuf:"varint,5,opt,name=push,proto3" json:"push,omitempty"`
	PeerType        int32            `protobuf:"varint,6,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
}

func (m *SyncUpdate) Reset()         { *m = SyncUpdate{} }
func (m *SyncUpdate) String() string { return proto.CompactTextString(m) }
func (*SyncUpdate) ProtoMessage()    {}
func (*SyncUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7d2ed87059b503, []int{0}
}
func (m *SyncUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncUpdate.Merge(m, src)
}
func (m *SyncUpdate) XXX_Size() int {
	return m.Size()
}
func (m *SyncUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_SyncUpdate proto.InternalMessageInfo

func (m *SyncUpdate) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SyncUpdate) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *SyncUpdate) GetIgnoreAuthKeyId() int64 {
	if m != nil {
		return m.IgnoreAuthKeyId
	}
	return 0
}

func (m *SyncUpdate) GetUpdates() *mtproto.Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *SyncUpdate) GetPush() bool {
	if m != nil {
		return m.Push
	}
	return false
}

func (m *SyncUpdate) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

type UpdateData struct {
	UserId               int64            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId            int64            `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	IgnoreAuthKeyId      int64            `protobuf:"varint,3,opt,name=ignore_auth_key_id,json=ignoreAuthKeyId,proto3" json:"ignore_auth_key_id,omitempty"`
	Updates              *mtproto.Updates `protobuf:"bytes,4,opt,name=updates,proto3" json:"updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateData) Reset()         { *m = UpdateData{} }
func (m *UpdateData) String() string { return proto.CompactTextString(m) }
func (*UpdateData) ProtoMessage()    {}
func (*UpdateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7d2ed87059b503, []int{1}
}
func (m *UpdateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateData.Merge(m, src)
}
func (m *UpdateData) XXX_Size() int {
	return m.Size()
}
func (m *UpdateData) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateData.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateData proto.InternalMessageInfo

func (m *UpdateData) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UpdateData) GetIgnoreAuthKeyId() int64 {
	if m != nil {
		return m.IgnoreAuthKeyId
	}
	return 0
}

func (m *UpdateData) GetUpdates() *mtproto.Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

type SyncUpdates struct {
	UpdateDataList []*UpdateData `protobuf:"bytes,1,rep,name=update_data_list,json=updateDataList,proto3" json:"update_data_list,omitempty"`
	Push           bool          `protobuf:"varint,2,opt,name=push,proto3" json:"push,omitempty"`
	PeerType       int32         `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
}

func (m *SyncUpdates) Reset()         { *m = SyncUpdates{} }
func (m *SyncUpdates) String() string { return proto.CompactTextString(m) }
func (*SyncUpdates) ProtoMessage()    {}
func (*SyncUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c7d2ed87059b503, []int{2}
}
func (m *SyncUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncUpdates.Merge(m, src)
}
func (m *SyncUpdates) XXX_Size() int {
	return m.Size()
}
func (m *SyncUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_SyncUpdates proto.InternalMessageInfo

func (m *SyncUpdates) GetUpdateDataList() []*UpdateData {
	if m != nil {
		return m.UpdateDataList
	}
	return nil
}

func (m *SyncUpdates) GetPush() bool {
	if m != nil {
		return m.Push
	}
	return false
}

func (m *SyncUpdates) GetPeerType() int32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func init() {
	proto.RegisterType((*SyncUpdate)(nil), "rpc_client.SyncUpdate")
	proto.RegisterType((*UpdateData)(nil), "rpc_client.UpdateData")
	proto.RegisterType((*SyncUpdates)(nil), "rpc_client.SyncUpdates")
}

func init() { proto.RegisterFile("schema.sync.proto", fileDescriptor_3c7d2ed87059b503) }

var fileDescriptor_3c7d2ed87059b503 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x52, 0x3d, 0x4e, 0xf3, 0x40,
	0x10, 0xcd, 0xc6, 0xf9, 0x1d, 0x7f, 0xfa, 0xbe, 0x7c, 0x2b, 0x04, 0x56, 0x40, 0x8e, 0x95, 0xca,
	0x02, 0xe1, 0x48, 0xa1, 0xa3, 0x02, 0x44, 0x13, 0x41, 0x65, 0xa0, 0xa1, 0xb1, 0x36, 0xf6, 0x62,
	0x5b, 0x24, 0xf6, 0xca, 0xbb, 0x5b, 0xf8, 0x12, 0x88, 0x92, 0x0a, 0x89, 0x9c, 0x86, 0x32, 0x17,
	0x40, 0x82, 0x9c, 0x80, 0x23, 0x20, 0xaf, 0x21, 0x49, 0x03, 0x35, 0xdd, 0xcc, 0xbc, 0xe7, 0xe7,
	0x79, 0x6f, 0x16, 0xfe, 0x73, 0x3f, 0xa2, 0x53, 0xe2, 0xf0, 0x3c, 0xf1, 0x1d, 0x96, 0xa5, 0x22,
	0xc5, 0x90, 0x31, 0xdf, 0xf3, 0x27, 0x31, 0x4d, 0x44, 0x77, 0x3f, 0x8c, 0x45, 0x24, 0xc7, 0x8e,
	0x9f, 0x4e, 0x07, 0x61, 0x1a, 0xa6, 0x03, 0x45, 0x19, 0xcb, 0x1b, 0xd5, 0xa9, 0x46, 0x55, 0xe5,
	0xa7, 0xdd, 0x8d, 0x4f, 0x35, 0x31, 0x59, 0x13, 0xec, 0xbf, 0x20, 0x80, 0x8b, 0x3c, 0xf1, 0xaf,
	0x58, 0x40, 0x04, 0xc5, 0x5b, 0xd0, 0x94, 0x9c, 0x66, 0x5e, 0x1c, 0x18, 0xc8, 0x42, 0xb6, 0xe6,
	0x36, 0x8a, 0x76, 0x14, 0x60, 0x13, 0x74, 0x22, 0x45, 0xe4, 0xdd, 0xd2, 0xbc, 0x00, 0xab, 0x0a,
	0x6c, 0x17, 0xa3, 0x33, 0x9a, 0x8f, 0x02, 0xbc, 0x07, 0x38, 0x0e, 0x93, 0x34, 0xa3, 0xde, 0x3a,
	0x4d, 0x53, 0xb4, 0x7f, 0x25, 0x72, 0xbc, 0x24, 0xef, 0x42, 0x53, 0xaa, 0xff, 0x71, 0xa3, 0x66,
	0x21, 0x5b, 0x1f, 0x76, 0x9c, 0xa9, 0x50, 0xfb, 0x38, 0xe5, 0x1e, 0xdc, 0xfd, 0x22, 0x60, 0x0c,
	0x35, 0x26, 0x79, 0x64, 0xd4, 0x2d, 0x64, 0xb7, 0x5c, 0x55, 0xe3, 0x6d, 0x68, 0x33, 0x4a, 0x33,
	0x4f, 0xe4, 0x8c, 0x1a, 0x0d, 0x0b, 0xd9, 0x75, 0xb7, 0x55, 0x0c, 0x2e, 0x73, 0x46, 0x0f, 0xff,
	0xcc, 0x9f, 0x7a, 0x95, 0xfb, 0x59, 0xaf, 0xf2, 0x30, 0xeb, 0x55, 0xfa, 0x8f, 0x08, 0xa0, 0xd4,
	0x3c, 0x25, 0x82, 0xfc, 0x3e, 0x7f, 0xfd, 0x3b, 0x04, 0xfa, 0xea, 0x00, 0x1c, 0x1f, 0x41, 0xa7,
	0x84, 0xbc, 0x80, 0x08, 0xe2, 0x4d, 0x62, 0x2e, 0x0c, 0x64, 0x69, 0xb6, 0x3e, 0xdc, 0x74, 0x56,
	0xc7, 0x77, 0x56, 0x9e, 0xdc, 0xbf, 0x72, 0x59, 0x9f, 0xc7, 0x5c, 0x2c, 0x13, 0xab, 0x7e, 0x97,
	0x98, 0xf6, 0x53, 0x62, 0x27, 0x3b, 0xef, 0x6f, 0x26, 0x7a, 0x5e, 0x98, 0x68, 0xbe, 0x30, 0xd1,
	0xeb, 0xc2, 0x44, 0xd7, 0x6b, 0x8f, 0x6e, 0xdc, 0x50, 0x36, 0x0e, 0x3e, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x83, 0xca, 0x14, 0x3a, 0x9c, 0x02, 0x00, 0x00,
}

func (this *SyncUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rpc_client.SyncUpdate{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "IgnoreAuthKeyId: "+fmt.Sprintf("%#v", this.IgnoreAuthKeyId)+",\n")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	s = append(s, "Push: "+fmt.Sprintf("%#v", this.Push)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rpc_client.UpdateData{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "IgnoreAuthKeyId: "+fmt.Sprintf("%#v", this.IgnoreAuthKeyId)+",\n")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncUpdates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc_client.SyncUpdates{")
	if this.UpdateDataList != nil {
		s = append(s, "UpdateDataList: "+fmt.Sprintf("%#v", this.UpdateDataList)+",\n")
	}
	s = append(s, "Push: "+fmt.Sprintf("%#v", this.Push)+",\n")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchemaSync(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SyncUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerType != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x30
	}
	if m.Push {
		i--
		if m.Push {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Updates != nil {
		{
			size, err := m.Updates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IgnoreAuthKeyId != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.IgnoreAuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Updates != nil {
		{
			size, err := m.Updates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IgnoreAuthKeyId != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.IgnoreAuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerType != 0 {
		i = encodeVarintSchemaSync(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x18
	}
	if m.Push {
		i--
		if m.Push {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.UpdateDataList) > 0 {
		for iNdEx := len(m.UpdateDataList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateDataList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaSync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchemaSync(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchemaSync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSchemaSync(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSchemaSync(uint64(m.AuthKeyId))
	}
	if m.IgnoreAuthKeyId != 0 {
		n += 1 + sovSchemaSync(uint64(m.IgnoreAuthKeyId))
	}
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovSchemaSync(uint64(l))
	}
	if m.Push {
		n += 2
	}
	if m.PeerType != 0 {
		n += 1 + sovSchemaSync(uint64(m.PeerType))
	}
	return n
}

func (m *UpdateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSchemaSync(uint64(m.UserId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSchemaSync(uint64(m.AuthKeyId))
	}
	if m.IgnoreAuthKeyId != 0 {
		n += 1 + sovSchemaSync(uint64(m.IgnoreAuthKeyId))
	}
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovSchemaSync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdateDataList) > 0 {
		for _, e := range m.UpdateDataList {
			l = e.Size()
			n += 1 + l + sovSchemaSync(uint64(l))
		}
	}
	if m.Push {
		n += 2
	}
	if m.PeerType != 0 {
		n += 1 + sovSchemaSync(uint64(m.PeerType))
	}
	return n
}

func sovSchemaSync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchemaSync(x uint64) (n int) {
	return sovSchemaSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreAuthKeyId", wireType)
			}
			m.IgnoreAuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgnoreAuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &mtproto.Updates{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Push", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Push = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreAuthKeyId", wireType)
			}
			m.IgnoreAuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IgnoreAuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &mtproto.Updates{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDataList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateDataList = append(m.UpdateDataList, &UpdateData{})
			if err := m.UpdateDataList[len(m.UpdateDataList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Push", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Push = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchemaSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchemaSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchemaSync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchemaSync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchemaSync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchemaSync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchemaSync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchemaSync = fmt.Errorf("proto: unexpected end of group")
)
