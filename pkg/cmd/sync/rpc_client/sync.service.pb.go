// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sync.service.proto

package rpc_client

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("sync.service.proto", fileDescriptor_65a5322c54c3517f) }

var fileDescriptor_65a5322c54c3517f = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xae, 0xcc, 0x4b,
	0xd6, 0x2b, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x2a, 0x2a, 0x48, 0x8e, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x91, 0x12, 0x2c, 0x4e, 0xce, 0x48,
	0xcd, 0x4d, 0xd4, 0x03, 0x2b, 0x03, 0x4b, 0x4b, 0x49, 0xa6, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea,
	0x83, 0x79, 0x49, 0xa5, 0x69, 0xfa, 0x89, 0x79, 0x95, 0x10, 0x29, 0xa3, 0x89, 0x8c, 0x5c, 0xdc,
	0xc1, 0x95, 0x79, 0xc9, 0xc1, 0x10, 0xf3, 0x84, 0xec, 0xb9, 0x78, 0x83, 0x52, 0x0b, 0x41, 0x22,
	0xa1, 0x05, 0x29, 0x89, 0x25, 0xa9, 0x42, 0x62, 0x7a, 0x08, 0xb3, 0xf5, 0x10, 0xe2, 0x52, 0x22,
	0x7a, 0x10, 0x43, 0xf5, 0x60, 0x86, 0xea, 0x39, 0xe6, 0x55, 0x2a, 0x31, 0x08, 0x39, 0x72, 0xf1,
	0xa1, 0x18, 0x50, 0x2c, 0x24, 0x8e, 0xdd, 0x84, 0x62, 0x5c, 0x46, 0x38, 0xf1, 0x44, 0x21, 0xf9,
	0x27, 0x89, 0x0d, 0x2c, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x47, 0x9a, 0x61, 0xbf, 0xf8,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyncServiceClient interface {
	ReqSyncUpdate(ctx context.Context, in *SyncUpdate, opts ...grpc.CallOption) (*types.Any, error)
	ReqSyncUpdates(ctx context.Context, in *SyncUpdates, opts ...grpc.CallOption) (*types.Any, error)
}

type syncServiceClient struct {
	cc *grpc.ClientConn
}

func NewSyncServiceClient(cc *grpc.ClientConn) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) ReqSyncUpdate(ctx context.Context, in *SyncUpdate, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.SyncService/ReqSyncUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) ReqSyncUpdates(ctx context.Context, in *SyncUpdates, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.SyncService/ReqSyncUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServiceServer is the server API for SyncService service.
type SyncServiceServer interface {
	ReqSyncUpdate(context.Context, *SyncUpdate) (*types.Any, error)
	ReqSyncUpdates(context.Context, *SyncUpdates) (*types.Any, error)
}

// UnimplementedSyncServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSyncServiceServer struct {
}

func (*UnimplementedSyncServiceServer) ReqSyncUpdate(ctx context.Context, req *SyncUpdate) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqSyncUpdate not implemented")
}
func (*UnimplementedSyncServiceServer) ReqSyncUpdates(ctx context.Context, req *SyncUpdates) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqSyncUpdates not implemented")
}

func RegisterSyncServiceServer(s *grpc.Server, srv SyncServiceServer) {
	s.RegisterService(&_SyncService_serviceDesc, srv)
}

func _SyncService_ReqSyncUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).ReqSyncUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.SyncService/ReqSyncUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).ReqSyncUpdate(ctx, req.(*SyncUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_ReqSyncUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).ReqSyncUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.SyncService/ReqSyncUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).ReqSyncUpdates(ctx, req.(*SyncUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_client.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqSyncUpdate",
			Handler:    _SyncService_ReqSyncUpdate_Handler,
		},
		{
			MethodName: "ReqSyncUpdates",
			Handler:    _SyncService_ReqSyncUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sync.service.proto",
}

var SyncService_serviceDesc = map[string][]interface{}{
	"SyncUpdate": {
		"/rpc_client.SyncService/ReqSyncUpdate",
		func() interface{} { return new(types.Any) },
		"ReqSyncUpdate",
	},
	"SyncUpdates": {
		"/rpc_client.SyncService/ReqSyncUpdates",
		func() interface{} { return new(types.Any) },
		"ReqSyncUpdates",
	},
}
