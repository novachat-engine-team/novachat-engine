// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat_service.proto

package rpc_client

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	mtproto "novachat_engine/mtproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("chat_service.proto", fileDescriptor_e881f93b317ee75c) }

var fileDescriptor_e881f93b317ee75c = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x6d, 0x36, 0xdf, 0x62, 0xfa, 0x01, 0x61, 0x08, 0xa5, 0x35, 0x34, 0x85, 0xee, 0x71, 0x25,
	0x58, 0x20, 0x84, 0x10, 0x6a, 0x42, 0x69, 0x23, 0x51, 0x1a, 0xdc, 0x66, 0xc3, 0xa6, 0x9a, 0xd8,
	0x17, 0x7b, 0x84, 0x3d, 0x13, 0x7b, 0x26, 0x15, 0x79, 0x30, 0xde, 0x81, 0x25, 0x8f, 0x00, 0x79,
	0x02, 0x1e, 0x01, 0xd9, 0x9e, 0xd8, 0x1e, 0x3b, 0x53, 0x67, 0x17, 0x9f, 0x7b, 0xef, 0xb9, 0x3f,
	0x3e, 0xc7, 0x0a, 0xc2, 0x6e, 0x40, 0xe4, 0xb5, 0x80, 0xe4, 0x86, 0xba, 0x60, 0xcf, 0x12, 0x2e,
	0x39, 0x46, 0xc9, 0xcc, 0xbd, 0x76, 0x43, 0x0a, 0x4c, 0x5a, 0xcf, 0x7d, 0x2a, 0x83, 0xf9, 0xd4,
	0x76, 0x79, 0x74, 0xe4, 0x73, 0x9f, 0x1f, 0x65, 0x29, 0xd3, 0xf9, 0xd7, 0xec, 0x29, 0x7b, 0xc8,
	0x7e, 0xe5, 0xa5, 0xd6, 0x9e, 0xcf, 0xb9, 0x1f, 0x42, 0x99, 0x45, 0xd8, 0x42, 0x85, 0x50, 0xda,
	0x49, 0xfd, 0xee, 0x09, 0x37, 0x80, 0x88, 0xd8, 0x32, 0xb4, 0xc5, 0x82, 0xb9, 0x39, 0xfa, 0xe2,
	0x47, 0x17, 0x6d, 0x0f, 0x03, 0x22, 0x2f, 0xf3, 0x69, 0xf0, 0x3b, 0x74, 0xc7, 0x81, 0x78, 0x98,
	0x00, 0x91, 0x90, 0xe2, 0x78, 0xc7, 0x2e, 0x27, 0xb3, 0x4b, 0xdc, 0xea, 0xd9, 0x79, 0x5b, 0x7b,
	0xd5, 0xd6, 0x3e, 0x66, 0x8b, 0xc3, 0x2d, 0xfc, 0x0a, 0x6d, 0x3b, 0x10, 0x7f, 0x98, 0x87, 0x61,
	0x56, 0xde, 0xab, 0x96, 0xaf, 0x50, 0xab, 0xab, 0x91, 0x06, 0x44, 0x1e, 0x6e, 0xe1, 0xb7, 0xe8,
	0x7f, 0x07, 0xe2, 0x13, 0x8f, 0xca, 0x2b, 0x2a, 0x43, 0xc0, 0x0f, 0xab, 0x39, 0x05, 0x6c, 0xec,
	0x5b, 0x96, 0x8f, 0x83, 0xf4, 0xa0, 0x8d, 0xf2, 0x0c, 0xde, 0xa0, 0xfc, 0x78, 0xca, 0xe7, 0xb2,
	0x59, 0x9e, 0xc1, 0xc6, 0x72, 0x75, 0xb6, 0x80, 0xc8, 0x21, 0x8f, 0x22, 0xce, 0x6a, 0x67, 0x2b,
	0x70, 0xab, 0x57, 0xc7, 0x3f, 0x52, 0x91, 0x6e, 0x3f, 0x44, 0xf7, 0x1c, 0x88, 0x07, 0x84, 0x31,
	0xf0, 0x1c, 0xea, 0x07, 0x52, 0xe0, 0xdd, 0x6a, 0x6a, 0x35, 0xb2, 0xc9, 0x12, 0x5e, 0x44, 0xd9,
	0x9a, 0x25, 0x52, 0xd8, 0x58, 0xfe, 0xa6, 0x58, 0x62, 0xb0, 0xf8, 0x44, 0x22, 0x68, 0x2e, 0x91,
	0xe3, 0x6b, 0x5f, 0xdf, 0x6b, 0x84, 0x1c, 0x88, 0x8f, 0x3d, 0x6f, 0x22, 0x20, 0xc1, 0x0f, 0xaa,
	0x19, 0x0a, 0x6c, 0x39, 0xde, 0x7b, 0x08, 0x41, 0x42, 0x56, 0xad, 0xf5, 0x2d, 0x71, 0x23, 0xc1,
	0x05, 0x7a, 0xe4, 0x40, 0x7c, 0x09, 0xcc, 0xbb, 0x98, 0xcb, 0x29, 0xff, 0x0e, 0xe2, 0x1c, 0x84,
	0x20, 0x3e, 0x08, 0xfc, 0xb4, 0x4a, 0xb5, 0x2e, 0xc3, 0xea, 0xda, 0x91, 0xcc, 0xf8, 0xec, 0xc9,
	0xcc, 0x23, 0x12, 0xc4, 0xe1, 0x16, 0xfe, 0x8c, 0x76, 0x14, 0xe1, 0x88, 0x0d, 0x34, 0xbe, 0x83,
	0x3a, 0x5f, 0x2d, 0xc1, 0x38, 0xe3, 0x09, 0xba, 0xeb, 0x40, 0xec, 0x00, 0xf1, 0xce, 0xa8, 0x90,
	0x3c, 0x59, 0xe0, 0xc7, 0xf5, 0x2b, 0x56, 0x82, 0x46, 0x9a, 0x53, 0x74, 0x5f, 0xd1, 0x8c, 0x58,
	0x31, 0x94, 0x55, 0x65, 0xd2, 0x63, 0x46, 0x22, 0xf5, 0xbe, 0x94, 0x4d, 0xf5, 0xf7, 0xa5, 0x5c,
	0x6a, 0xd2, 0xea, 0x08, 0x75, 0x1d, 0x88, 0xc7, 0x34, 0x55, 0xa4, 0xea, 0x83, 0xf7, 0xeb, 0xb9,
	0x5a, 0xd8, 0x38, 0xc5, 0x39, 0xc2, 0x0e, 0xc4, 0x23, 0xa6, 0x93, 0x1d, 0xd4, 0xc9, 0x6a, 0x09,
	0xb7, 0x1c, 0xb9, 0x9b, 0x29, 0x18, 0xdc, 0x6f, 0xa9, 0x60, 0x58, 0x2a, 0xe2, 0x3d, 0x9d, 0xac,
	0x12, 0x6a, 0x11, 0x64, 0x6e, 0xb9, 0xa6, 0x20, 0x4b, 0xdc, 0x48, 0x90, 0xbb, 0x39, 0x75, 0xdc,
	0x29, 0xf0, 0x31, 0xa7, 0x4c, 0xea, 0x6e, 0xae, 0x46, 0x8c, 0x24, 0x23, 0x75, 0x9b, 0x1b, 0x2a,
	0xe1, 0x8a, 0x0f, 0x83, 0xb4, 0x6d, 0xa8, 0xab, 0xa6, 0x16, 0xdc, 0xc8, 0x61, 0xcd, 0xaf, 0x7a,
	0x89, 0xb7, 0x1c, 0x56, 0x89, 0xf3, 0x8c, 0x7a, 0x1e, 0x30, 0xfd, 0xb0, 0x5a, 0xa8, 0x45, 0xbd,
	0xb9, 0xcf, 0x8a, 0x17, 0xa4, 0xa9, 0x57, 0x8f, 0x19, 0x89, 0x26, 0x68, 0xb7, 0x58, 0x68, 0x25,
	0x75, 0x65, 0x5f, 0xfc, 0xac, 0xb9, 0x5b, 0x2d, 0xa5, 0x65, 0xcd, 0xbc, 0x66, 0x65, 0xd3, 0xbd,
	0x26, 0xdd, 0x66, 0x26, 0xd5, 0x5b, 0xeb, 0x6b, 0xea, 0xb1, 0x5b, 0xec, 0xd1, 0xd3, 0xbe, 0x8c,
	0xab, 0x99, 0xf6, 0xd7, 0x7f, 0x20, 0xdb, 0xe6, 0xca, 0x15, 0x75, 0x0a, 0x72, 0x4c, 0x12, 0x49,
	0x5d, 0x3a, 0x23, 0x4c, 0x0a, 0x5d, 0x51, 0xb5, 0xa0, 0x89, 0x6a, 0xf0, 0xe4, 0xef, 0x9f, 0x7e,
	0xe7, 0xe7, 0xb2, 0xdf, 0xf9, 0xb5, 0xec, 0x77, 0x7e, 0x2f, 0xfb, 0x9d, 0x2f, 0x95, 0x7f, 0x30,
	0xd3, 0xff, 0xb2, 0xec, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xda, 0xd7, 0xd1, 0x7d, 0xea,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	ReqCreateChat(ctx context.Context, in *CreateChat, opts ...grpc.CallOption) (*types.Any, error)
	ReqFullChat(ctx context.Context, in *FullChat, opts ...grpc.CallOption) (*Chat, error)
	ReqEditTitle(ctx context.Context, in *EditTitle, opts ...grpc.CallOption) (*types.Any, error)
	ReqEditPhoto(ctx context.Context, in *EditPhoto, opts ...grpc.CallOption) (*types.Any, error)
	ReqEditAbout(ctx context.Context, in *EditAbout, opts ...grpc.CallOption) (*types.Any, error)
	ReqChatCommon(ctx context.Context, in *ChatCommon, opts ...grpc.CallOption) (*ChatList, error)
	ReqBannedRights(ctx context.Context, in *BannedRights, opts ...grpc.CallOption) (*types.Any, error)
	ReqEditAdmin(ctx context.Context, in *EditAdmin, opts ...grpc.CallOption) (*types.Any, error)
	ReqChatByName(ctx context.Context, in *ChatByName, opts ...grpc.CallOption) (*Chat, error)
	ReqAddUser(ctx context.Context, in *AddUser, opts ...grpc.CallOption) (*types.Any, error)
	ReqDeleteUser(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*types.Any, error)
	ReqSendOutboxesMessages(ctx context.Context, in *SendOutboxesMessages, opts ...grpc.CallOption) (*mtproto.Updates, error)
	ReqSendInBoxesMessages(ctx context.Context, in *SendInBoxesMessages, opts ...grpc.CallOption) (*types.Any, error)
	ReqReadHistory(ctx context.Context, in *ChatReadHistory, opts ...grpc.CallOption) (*types.Any, error)
	ReqReadInMessages(ctx context.Context, in *ReadInMessages, opts ...grpc.CallOption) (*types.Any, error)
	//  rpc ReqEditMessage(rpc_client.EditMessage) returns (mtproto.Updates) {}
	//  rpc ReqRevokeMessages(rpc_client.RevokeMessages) returns (google.protobuf.Any) {}
	//  rpc ReqReadHistory(rpc_client.ReadHistory) returns (google.protobuf.Any) {}
	ReqAllChat(ctx context.Context, in *AllChat, opts ...grpc.CallOption) (*ChatList, error)
	ReqPinnedMessage(ctx context.Context, in *ChatPinnedMessage, opts ...grpc.CallOption) (*types.Any, error)
	ReqInPinnedMessage(ctx context.Context, in *ChatInPinnedMessage, opts ...grpc.CallOption) (*types.Any, error)
	ReqCheckUsername(ctx context.Context, in *CheckUsername, opts ...grpc.CallOption) (*types.Any, error)
	ReqBannedUser(ctx context.Context, in *BannedUser, opts ...grpc.CallOption) (*types.Any, error)
	ReqEditGeoPoint(ctx context.Context, in *EditGeoPoint, opts ...grpc.CallOption) (*types.Any, error)
	ReqInviteToChannel(ctx context.Context, in *InviteToChannel, opts ...grpc.CallOption) (*types.Any, error)
	ReqDeleteChat(ctx context.Context, in *DeleteChat, opts ...grpc.CallOption) (*types.Any, error)
	ReqHistoryHidden(ctx context.Context, in *HistoryHidden, opts ...grpc.CallOption) (*types.Any, error)
	ReqUpdateUsername(ctx context.Context, in *UpdateUsername, opts ...grpc.CallOption) (*types.Any, error)
	ReqDeleteMessagesUpdates(ctx context.Context, in *DeleteMessagesUpdates, opts ...grpc.CallOption) (*types.Any, error)
	ReqDeleteHistory(ctx context.Context, in *DeleteHistory, opts ...grpc.CallOption) (*types.Any, error)
	ReqDeleteMessages(ctx context.Context, in *DeleteMessages, opts ...grpc.CallOption) (*types.Any, error)
	ReqDeleteUserHistory(ctx context.Context, in *DeleteUserHistory, opts ...grpc.CallOption) (*types.Any, error)
	ReqGetParticipants(ctx context.Context, in *GetParticipants, opts ...grpc.CallOption) (*types.Any, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ReqCreateChat(ctx context.Context, in *CreateChat, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqCreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqFullChat(ctx context.Context, in *FullChat, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqFullChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqEditTitle(ctx context.Context, in *EditTitle, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqEditTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqEditPhoto(ctx context.Context, in *EditPhoto, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqEditPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqEditAbout(ctx context.Context, in *EditAbout, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqEditAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqChatCommon(ctx context.Context, in *ChatCommon, opts ...grpc.CallOption) (*ChatList, error) {
	out := new(ChatList)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqChatCommon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqBannedRights(ctx context.Context, in *BannedRights, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqBannedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqEditAdmin(ctx context.Context, in *EditAdmin, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqEditAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqChatByName(ctx context.Context, in *ChatByName, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqChatByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqAddUser(ctx context.Context, in *AddUser, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqAddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqDeleteUser(ctx context.Context, in *DeleteUser, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqDeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqSendOutboxesMessages(ctx context.Context, in *SendOutboxesMessages, opts ...grpc.CallOption) (*mtproto.Updates, error) {
	out := new(mtproto.Updates)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqSendOutboxesMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqSendInBoxesMessages(ctx context.Context, in *SendInBoxesMessages, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqSendInBoxesMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqReadHistory(ctx context.Context, in *ChatReadHistory, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqReadHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqReadInMessages(ctx context.Context, in *ReadInMessages, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqReadInMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqAllChat(ctx context.Context, in *AllChat, opts ...grpc.CallOption) (*ChatList, error) {
	out := new(ChatList)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqAllChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqPinnedMessage(ctx context.Context, in *ChatPinnedMessage, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqPinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqInPinnedMessage(ctx context.Context, in *ChatInPinnedMessage, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqInPinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqCheckUsername(ctx context.Context, in *CheckUsername, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqCheckUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqBannedUser(ctx context.Context, in *BannedUser, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqBannedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqEditGeoPoint(ctx context.Context, in *EditGeoPoint, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqEditGeoPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqInviteToChannel(ctx context.Context, in *InviteToChannel, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqInviteToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqDeleteChat(ctx context.Context, in *DeleteChat, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqDeleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqHistoryHidden(ctx context.Context, in *HistoryHidden, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqHistoryHidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqUpdateUsername(ctx context.Context, in *UpdateUsername, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqUpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqDeleteMessagesUpdates(ctx context.Context, in *DeleteMessagesUpdates, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqDeleteMessagesUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqDeleteHistory(ctx context.Context, in *DeleteHistory, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqDeleteHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqDeleteMessages(ctx context.Context, in *DeleteMessages, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqDeleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqDeleteUserHistory(ctx context.Context, in *DeleteUserHistory, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqDeleteUserHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReqGetParticipants(ctx context.Context, in *GetParticipants, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.ChatService/ReqGetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	ReqCreateChat(context.Context, *CreateChat) (*types.Any, error)
	ReqFullChat(context.Context, *FullChat) (*Chat, error)
	ReqEditTitle(context.Context, *EditTitle) (*types.Any, error)
	ReqEditPhoto(context.Context, *EditPhoto) (*types.Any, error)
	ReqEditAbout(context.Context, *EditAbout) (*types.Any, error)
	ReqChatCommon(context.Context, *ChatCommon) (*ChatList, error)
	ReqBannedRights(context.Context, *BannedRights) (*types.Any, error)
	ReqEditAdmin(context.Context, *EditAdmin) (*types.Any, error)
	ReqChatByName(context.Context, *ChatByName) (*Chat, error)
	ReqAddUser(context.Context, *AddUser) (*types.Any, error)
	ReqDeleteUser(context.Context, *DeleteUser) (*types.Any, error)
	ReqSendOutboxesMessages(context.Context, *SendOutboxesMessages) (*mtproto.Updates, error)
	ReqSendInBoxesMessages(context.Context, *SendInBoxesMessages) (*types.Any, error)
	ReqReadHistory(context.Context, *ChatReadHistory) (*types.Any, error)
	ReqReadInMessages(context.Context, *ReadInMessages) (*types.Any, error)
	//  rpc ReqEditMessage(rpc_client.EditMessage) returns (mtproto.Updates) {}
	//  rpc ReqRevokeMessages(rpc_client.RevokeMessages) returns (google.protobuf.Any) {}
	//  rpc ReqReadHistory(rpc_client.ReadHistory) returns (google.protobuf.Any) {}
	ReqAllChat(context.Context, *AllChat) (*ChatList, error)
	ReqPinnedMessage(context.Context, *ChatPinnedMessage) (*types.Any, error)
	ReqInPinnedMessage(context.Context, *ChatInPinnedMessage) (*types.Any, error)
	ReqCheckUsername(context.Context, *CheckUsername) (*types.Any, error)
	ReqBannedUser(context.Context, *BannedUser) (*types.Any, error)
	ReqEditGeoPoint(context.Context, *EditGeoPoint) (*types.Any, error)
	ReqInviteToChannel(context.Context, *InviteToChannel) (*types.Any, error)
	ReqDeleteChat(context.Context, *DeleteChat) (*types.Any, error)
	ReqHistoryHidden(context.Context, *HistoryHidden) (*types.Any, error)
	ReqUpdateUsername(context.Context, *UpdateUsername) (*types.Any, error)
	ReqDeleteMessagesUpdates(context.Context, *DeleteMessagesUpdates) (*types.Any, error)
	ReqDeleteHistory(context.Context, *DeleteHistory) (*types.Any, error)
	ReqDeleteMessages(context.Context, *DeleteMessages) (*types.Any, error)
	ReqDeleteUserHistory(context.Context, *DeleteUserHistory) (*types.Any, error)
	ReqGetParticipants(context.Context, *GetParticipants) (*types.Any, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) ReqCreateChat(ctx context.Context, req *CreateChat) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqCreateChat not implemented")
}
func (*UnimplementedChatServiceServer) ReqFullChat(ctx context.Context, req *FullChat) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqFullChat not implemented")
}
func (*UnimplementedChatServiceServer) ReqEditTitle(ctx context.Context, req *EditTitle) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqEditTitle not implemented")
}
func (*UnimplementedChatServiceServer) ReqEditPhoto(ctx context.Context, req *EditPhoto) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqEditPhoto not implemented")
}
func (*UnimplementedChatServiceServer) ReqEditAbout(ctx context.Context, req *EditAbout) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqEditAbout not implemented")
}
func (*UnimplementedChatServiceServer) ReqChatCommon(ctx context.Context, req *ChatCommon) (*ChatList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqChatCommon not implemented")
}
func (*UnimplementedChatServiceServer) ReqBannedRights(ctx context.Context, req *BannedRights) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqBannedRights not implemented")
}
func (*UnimplementedChatServiceServer) ReqEditAdmin(ctx context.Context, req *EditAdmin) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqEditAdmin not implemented")
}
func (*UnimplementedChatServiceServer) ReqChatByName(ctx context.Context, req *ChatByName) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqChatByName not implemented")
}
func (*UnimplementedChatServiceServer) ReqAddUser(ctx context.Context, req *AddUser) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqAddUser not implemented")
}
func (*UnimplementedChatServiceServer) ReqDeleteUser(ctx context.Context, req *DeleteUser) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqDeleteUser not implemented")
}
func (*UnimplementedChatServiceServer) ReqSendOutboxesMessages(ctx context.Context, req *SendOutboxesMessages) (*mtproto.Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqSendOutboxesMessages not implemented")
}
func (*UnimplementedChatServiceServer) ReqSendInBoxesMessages(ctx context.Context, req *SendInBoxesMessages) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqSendInBoxesMessages not implemented")
}
func (*UnimplementedChatServiceServer) ReqReadHistory(ctx context.Context, req *ChatReadHistory) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqReadHistory not implemented")
}
func (*UnimplementedChatServiceServer) ReqReadInMessages(ctx context.Context, req *ReadInMessages) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqReadInMessages not implemented")
}
func (*UnimplementedChatServiceServer) ReqAllChat(ctx context.Context, req *AllChat) (*ChatList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqAllChat not implemented")
}
func (*UnimplementedChatServiceServer) ReqPinnedMessage(ctx context.Context, req *ChatPinnedMessage) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqPinnedMessage not implemented")
}
func (*UnimplementedChatServiceServer) ReqInPinnedMessage(ctx context.Context, req *ChatInPinnedMessage) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqInPinnedMessage not implemented")
}
func (*UnimplementedChatServiceServer) ReqCheckUsername(ctx context.Context, req *CheckUsername) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqCheckUsername not implemented")
}
func (*UnimplementedChatServiceServer) ReqBannedUser(ctx context.Context, req *BannedUser) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqBannedUser not implemented")
}
func (*UnimplementedChatServiceServer) ReqEditGeoPoint(ctx context.Context, req *EditGeoPoint) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqEditGeoPoint not implemented")
}
func (*UnimplementedChatServiceServer) ReqInviteToChannel(ctx context.Context, req *InviteToChannel) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqInviteToChannel not implemented")
}
func (*UnimplementedChatServiceServer) ReqDeleteChat(ctx context.Context, req *DeleteChat) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqDeleteChat not implemented")
}
func (*UnimplementedChatServiceServer) ReqHistoryHidden(ctx context.Context, req *HistoryHidden) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqHistoryHidden not implemented")
}
func (*UnimplementedChatServiceServer) ReqUpdateUsername(ctx context.Context, req *UpdateUsername) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqUpdateUsername not implemented")
}
func (*UnimplementedChatServiceServer) ReqDeleteMessagesUpdates(ctx context.Context, req *DeleteMessagesUpdates) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqDeleteMessagesUpdates not implemented")
}
func (*UnimplementedChatServiceServer) ReqDeleteHistory(ctx context.Context, req *DeleteHistory) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqDeleteHistory not implemented")
}
func (*UnimplementedChatServiceServer) ReqDeleteMessages(ctx context.Context, req *DeleteMessages) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqDeleteMessages not implemented")
}
func (*UnimplementedChatServiceServer) ReqDeleteUserHistory(ctx context.Context, req *DeleteUserHistory) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqDeleteUserHistory not implemented")
}
func (*UnimplementedChatServiceServer) ReqGetParticipants(ctx context.Context, req *GetParticipants) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqGetParticipants not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_ReqCreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqCreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqCreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqCreateChat(ctx, req.(*CreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqFullChat(ctx, req.(*FullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqEditTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqEditTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqEditTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqEditTitle(ctx, req.(*EditTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqEditPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqEditPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqEditPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqEditPhoto(ctx, req.(*EditPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqEditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqEditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqEditAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqEditAbout(ctx, req.(*EditAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqChatCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqChatCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqChatCommon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqChatCommon(ctx, req.(*ChatCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannedRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqBannedRights(ctx, req.(*BannedRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqEditAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqEditAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqEditAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqEditAdmin(ctx, req.(*EditAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqChatByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqChatByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqChatByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqChatByName(ctx, req.(*ChatByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqAddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqAddUser(ctx, req.(*AddUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqDeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqDeleteUser(ctx, req.(*DeleteUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqSendOutboxesMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOutboxesMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqSendOutboxesMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqSendOutboxesMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqSendOutboxesMessages(ctx, req.(*SendOutboxesMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqSendInBoxesMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInBoxesMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqSendInBoxesMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqSendInBoxesMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqSendInBoxesMessages(ctx, req.(*SendInBoxesMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqReadHistory(ctx, req.(*ChatReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqReadInMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadInMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqReadInMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqReadInMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqReadInMessages(ctx, req.(*ReadInMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqAllChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqAllChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqAllChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqAllChat(ctx, req.(*AllChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqPinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatPinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqPinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqPinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqPinnedMessage(ctx, req.(*ChatPinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqInPinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatInPinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqInPinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqInPinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqInPinnedMessage(ctx, req.(*ChatInPinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqCheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqCheckUsername(ctx, req.(*CheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqBannedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqBannedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqBannedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqBannedUser(ctx, req.(*BannedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqEditGeoPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGeoPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqEditGeoPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqEditGeoPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqEditGeoPoint(ctx, req.(*EditGeoPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqInviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqInviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqInviteToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqInviteToChannel(ctx, req.(*InviteToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqDeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqDeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqDeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqDeleteChat(ctx, req.(*DeleteChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqHistoryHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqHistoryHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqHistoryHidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqHistoryHidden(ctx, req.(*HistoryHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqUpdateUsername(ctx, req.(*UpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqDeleteMessagesUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessagesUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqDeleteMessagesUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqDeleteMessagesUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqDeleteMessagesUpdates(ctx, req.(*DeleteMessagesUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqDeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqDeleteHistory(ctx, req.(*DeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqDeleteMessages(ctx, req.(*DeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqDeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqDeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqDeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqDeleteUserHistory(ctx, req.(*DeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReqGetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReqGetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.ChatService/ReqGetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReqGetParticipants(ctx, req.(*GetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_client.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqCreateChat",
			Handler:    _ChatService_ReqCreateChat_Handler,
		},
		{
			MethodName: "ReqFullChat",
			Handler:    _ChatService_ReqFullChat_Handler,
		},
		{
			MethodName: "ReqEditTitle",
			Handler:    _ChatService_ReqEditTitle_Handler,
		},
		{
			MethodName: "ReqEditPhoto",
			Handler:    _ChatService_ReqEditPhoto_Handler,
		},
		{
			MethodName: "ReqEditAbout",
			Handler:    _ChatService_ReqEditAbout_Handler,
		},
		{
			MethodName: "ReqChatCommon",
			Handler:    _ChatService_ReqChatCommon_Handler,
		},
		{
			MethodName: "ReqBannedRights",
			Handler:    _ChatService_ReqBannedRights_Handler,
		},
		{
			MethodName: "ReqEditAdmin",
			Handler:    _ChatService_ReqEditAdmin_Handler,
		},
		{
			MethodName: "ReqChatByName",
			Handler:    _ChatService_ReqChatByName_Handler,
		},
		{
			MethodName: "ReqAddUser",
			Handler:    _ChatService_ReqAddUser_Handler,
		},
		{
			MethodName: "ReqDeleteUser",
			Handler:    _ChatService_ReqDeleteUser_Handler,
		},
		{
			MethodName: "ReqSendOutboxesMessages",
			Handler:    _ChatService_ReqSendOutboxesMessages_Handler,
		},
		{
			MethodName: "ReqSendInBoxesMessages",
			Handler:    _ChatService_ReqSendInBoxesMessages_Handler,
		},
		{
			MethodName: "ReqReadHistory",
			Handler:    _ChatService_ReqReadHistory_Handler,
		},
		{
			MethodName: "ReqReadInMessages",
			Handler:    _ChatService_ReqReadInMessages_Handler,
		},
		{
			MethodName: "ReqAllChat",
			Handler:    _ChatService_ReqAllChat_Handler,
		},
		{
			MethodName: "ReqPinnedMessage",
			Handler:    _ChatService_ReqPinnedMessage_Handler,
		},
		{
			MethodName: "ReqInPinnedMessage",
			Handler:    _ChatService_ReqInPinnedMessage_Handler,
		},
		{
			MethodName: "ReqCheckUsername",
			Handler:    _ChatService_ReqCheckUsername_Handler,
		},
		{
			MethodName: "ReqBannedUser",
			Handler:    _ChatService_ReqBannedUser_Handler,
		},
		{
			MethodName: "ReqEditGeoPoint",
			Handler:    _ChatService_ReqEditGeoPoint_Handler,
		},
		{
			MethodName: "ReqInviteToChannel",
			Handler:    _ChatService_ReqInviteToChannel_Handler,
		},
		{
			MethodName: "ReqDeleteChat",
			Handler:    _ChatService_ReqDeleteChat_Handler,
		},
		{
			MethodName: "ReqHistoryHidden",
			Handler:    _ChatService_ReqHistoryHidden_Handler,
		},
		{
			MethodName: "ReqUpdateUsername",
			Handler:    _ChatService_ReqUpdateUsername_Handler,
		},
		{
			MethodName: "ReqDeleteMessagesUpdates",
			Handler:    _ChatService_ReqDeleteMessagesUpdates_Handler,
		},
		{
			MethodName: "ReqDeleteHistory",
			Handler:    _ChatService_ReqDeleteHistory_Handler,
		},
		{
			MethodName: "ReqDeleteMessages",
			Handler:    _ChatService_ReqDeleteMessages_Handler,
		},
		{
			MethodName: "ReqDeleteUserHistory",
			Handler:    _ChatService_ReqDeleteUserHistory_Handler,
		},
		{
			MethodName: "ReqGetParticipants",
			Handler:    _ChatService_ReqGetParticipants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_service.proto",
}

var ChatService_serviceDesc = map[string][]interface{}{
	"CreateChat": {
		"/rpc_client.ChatService/ReqCreateChat",
		func() interface{} { return new(types.Any) },
	},
	"FullChat": {
		"/rpc_client.ChatService/ReqFullChat",
		func() interface{} { return new(Chat) },
	},
	"EditTitle": {
		"/rpc_client.ChatService/ReqEditTitle",
		func() interface{} { return new(types.Any) },
	},
	"EditPhoto": {
		"/rpc_client.ChatService/ReqEditPhoto",
		func() interface{} { return new(types.Any) },
	},
	"EditAbout": {
		"/rpc_client.ChatService/ReqEditAbout",
		func() interface{} { return new(types.Any) },
	},
	"ChatCommon": {
		"/rpc_client.ChatService/ReqChatCommon",
		func() interface{} { return new(ChatList) },
	},
	"BannedRights": {
		"/rpc_client.ChatService/ReqBannedRights",
		func() interface{} { return new(types.Any) },
	},
	"EditAdmin": {
		"/rpc_client.ChatService/ReqEditAdmin",
		func() interface{} { return new(types.Any) },
	},
	"ChatByName": {
		"/rpc_client.ChatService/ReqChatByName",
		func() interface{} { return new(Chat) },
	},
	"AddUser": {
		"/rpc_client.ChatService/ReqAddUser",
		func() interface{} { return new(types.Any) },
	},
	"DeleteUser": {
		"/rpc_client.ChatService/ReqDeleteUser",
		func() interface{} { return new(types.Any) },
	},
	"SendOutboxesMessages": {
		"/rpc_client.ChatService/ReqSendOutboxesMessages",
		func() interface{} { return new(mtproto.Updates) },
	},
	"SendInBoxesMessages": {
		"/rpc_client.ChatService/ReqSendInBoxesMessages",
		func() interface{} { return new(types.Any) },
	},
	"ChatReadHistory": {
		"/rpc_client.ChatService/ReqReadHistory",
		func() interface{} { return new(types.Any) },
	},
	"ReadInMessages": {
		"/rpc_client.ChatService/ReqReadInMessages",
		func() interface{} { return new(types.Any) },
	},
	"AllChat": {
		"/rpc_client.ChatService/ReqAllChat",
		func() interface{} { return new(ChatList) },
	},
	"ChatPinnedMessage": {
		"/rpc_client.ChatService/ReqPinnedMessage",
		func() interface{} { return new(types.Any) },
	},
	"ChatInPinnedMessage": {
		"/rpc_client.ChatService/ReqInPinnedMessage",
		func() interface{} { return new(types.Any) },
	},
	"CheckUsername": {
		"/rpc_client.ChatService/ReqCheckUsername",
		func() interface{} { return new(types.Any) },
	},
	"BannedUser": {
		"/rpc_client.ChatService/ReqBannedUser",
		func() interface{} { return new(types.Any) },
	},
	"EditGeoPoint": {
		"/rpc_client.ChatService/ReqEditGeoPoint",
		func() interface{} { return new(types.Any) },
	},
	"InviteToChannel": {
		"/rpc_client.ChatService/ReqInviteToChannel",
		func() interface{} { return new(types.Any) },
	},
	"DeleteChat": {
		"/rpc_client.ChatService/ReqDeleteChat",
		func() interface{} { return new(types.Any) },
	},
	"HistoryHidden": {
		"/rpc_client.ChatService/ReqHistoryHidden",
		func() interface{} { return new(types.Any) },
	},
	"UpdateUsername": {
		"/rpc_client.ChatService/ReqUpdateUsername",
		func() interface{} { return new(types.Any) },
	},
	"DeleteMessagesUpdates": {
		"/rpc_client.ChatService/ReqDeleteMessagesUpdates",
		func() interface{} { return new(types.Any) },
	},
	"DeleteHistory": {
		"/rpc_client.ChatService/ReqDeleteHistory",
		func() interface{} { return new(types.Any) },
	},
	"DeleteMessages": {
		"/rpc_client.ChatService/ReqDeleteMessages",
		func() interface{} { return new(types.Any) },
	},
	"DeleteUserHistory": {
		"/rpc_client.ChatService/ReqDeleteUserHistory",
		func() interface{} { return new(types.Any) },
	},
	"GetParticipants": {
		"/rpc_client.ChatService/ReqGetParticipants",
		func() interface{} { return new(types.Any) },
	},
}
