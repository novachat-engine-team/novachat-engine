// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sfs.proto

package rpc_client

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetFile_FileType int32

const (
	GetFile_Photo    GetFile_FileType = 0
	GetFile_Document GetFile_FileType = 1
)

var GetFile_FileType_name = map[int32]string{
	0: "Photo",
	1: "Document",
}

var GetFile_FileType_value = map[string]int32{
	"Photo":    0,
	"Document": 1,
}

func (x GetFile_FileType) String() string {
	return proto.EnumName(GetFile_FileType_name, int32(x))
}

func (GetFile_FileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{11, 0}
}

type StickerSet struct {
	StickerSetType int32  `protobuf:"varint,1,opt,name=sticker_set_type,json=stickerSetType,proto3" json:"sticker_set_type,omitempty"`
	StickerSetId   int64  `protobuf:"varint,2,opt,name=sticker_set_id,json=stickerSetId,proto3" json:"sticker_set_id,omitempty"`
	AccessHash     int64  `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	ShortName      string `protobuf:"bytes,4,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Emoticon       string `protobuf:"bytes,5,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
}

func (m *StickerSet) Reset()         { *m = StickerSet{} }
func (m *StickerSet) String() string { return proto.CompactTextString(m) }
func (*StickerSet) ProtoMessage()    {}
func (*StickerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{0}
}
func (m *StickerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerSet.Merge(m, src)
}
func (m *StickerSet) XXX_Size() int {
	return m.Size()
}
func (m *StickerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerSet.DiscardUnknown(m)
}

var xxx_messageInfo_StickerSet proto.InternalMessageInfo

func (m *StickerSet) GetStickerSetType() int32 {
	if m != nil {
		return m.StickerSetType
	}
	return 0
}

func (m *StickerSet) GetStickerSetId() int64 {
	if m != nil {
		return m.StickerSetId
	}
	return 0
}

func (m *StickerSet) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *StickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *StickerSet) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

//maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords;
type MaskCoords struct {
	N    int32   `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	X    float64 `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y    float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Zoom float64 `protobuf:"fixed64,4,opt,name=zoom,proto3" json:"zoom,omitempty"`
}

func (m *MaskCoords) Reset()         { *m = MaskCoords{} }
func (m *MaskCoords) String() string { return proto.CompactTextString(m) }
func (*MaskCoords) ProtoMessage()    {}
func (*MaskCoords) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{1}
}
func (m *MaskCoords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaskCoords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaskCoords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaskCoords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaskCoords.Merge(m, src)
}
func (m *MaskCoords) XXX_Size() int {
	return m.Size()
}
func (m *MaskCoords) XXX_DiscardUnknown() {
	xxx_messageInfo_MaskCoords.DiscardUnknown(m)
}

var xxx_messageInfo_MaskCoords proto.InternalMessageInfo

func (m *MaskCoords) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *MaskCoords) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MaskCoords) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MaskCoords) GetZoom() float64 {
	if m != nil {
		return m.Zoom
	}
	return 0
}

type Attributes struct {
	AttributesType int32 `protobuf:"varint,1,opt,name=attributes_type,json=attributesType,proto3" json:"attributes_type,omitempty"`
	// documentAttributeFilename
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// documentAttributeImageSize
	ImageW int32 `protobuf:"varint,3,opt,name=image_w,json=imageW,proto3" json:"image_w,omitempty"`
	ImageH int32 `protobuf:"varint,4,opt,name=image_h,json=imageH,proto3" json:"image_h,omitempty"`
	// documentAttributeAnimated
	// documentAttributeSticker
	StickerSetType int32       `protobuf:"varint,6,opt,name=sticker_set_type,json=stickerSetType,proto3" json:"sticker_set_type,omitempty"`
	StickerData    *StickerSet `protobuf:"bytes,7,opt,name=sticker_data,json=stickerData,proto3" json:"sticker_data,omitempty"`
	Mask           bool        `protobuf:"varint,8,opt,name=mask,proto3" json:"mask,omitempty"`
	Alt            string      `protobuf:"bytes,9,opt,name=alt,proto3" json:"alt,omitempty"`
	MaskCoords     *MaskCoords `protobuf:"bytes,10,opt,name=mask_coords,json=maskCoords,proto3" json:"mask_coords,omitempty"`
	// documentAttributeVideo
	RoundMessage      bool  `protobuf:"varint,11,opt,name=round_message,json=roundMessage,proto3" json:"round_message,omitempty"`
	SupportsStreaming bool  `protobuf:"varint,12,opt,name=supports_streaming,json=supportsStreaming,proto3" json:"supports_streaming,omitempty"`
	VideoDuration     int32 `protobuf:"varint,13,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"`
	VideoW            int32 `protobuf:"varint,14,opt,name=video_w,json=videoW,proto3" json:"video_w,omitempty"`
	VideoH            int32 `protobuf:"varint,15,opt,name=video_h,json=videoH,proto3" json:"video_h,omitempty"`
	//documentAttributeAudio
	Voice         bool   `protobuf:"varint,16,opt,name=voice,proto3" json:"voice,omitempty"`
	AudioDuration int32  `protobuf:"varint,17,opt,name=audio_duration,json=audioDuration,proto3" json:"audio_duration,omitempty"`
	Title         string `protobuf:"bytes,18,opt,name=title,proto3" json:"title,omitempty"`
	Performer     string `protobuf:"bytes,19,opt,name=performer,proto3" json:"performer,omitempty"`
	Waveform      []byte `protobuf:"bytes,20,opt,name=waveform,proto3" json:"waveform,omitempty"`
	// documentAttributeHasStickers
	Stickers bool `protobuf:"varint,21,opt,name=stickers,proto3" json:"stickers,omitempty"`
}

func (m *Attributes) Reset()         { *m = Attributes{} }
func (m *Attributes) String() string { return proto.CompactTextString(m) }
func (*Attributes) ProtoMessage()    {}
func (*Attributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{2}
}
func (m *Attributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attributes.Merge(m, src)
}
func (m *Attributes) XXX_Size() int {
	return m.Size()
}
func (m *Attributes) XXX_DiscardUnknown() {
	xxx_messageInfo_Attributes.DiscardUnknown(m)
}

var xxx_messageInfo_Attributes proto.InternalMessageInfo

func (m *Attributes) GetAttributesType() int32 {
	if m != nil {
		return m.AttributesType
	}
	return 0
}

func (m *Attributes) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Attributes) GetImageW() int32 {
	if m != nil {
		return m.ImageW
	}
	return 0
}

func (m *Attributes) GetImageH() int32 {
	if m != nil {
		return m.ImageH
	}
	return 0
}

func (m *Attributes) GetStickerSetType() int32 {
	if m != nil {
		return m.StickerSetType
	}
	return 0
}

func (m *Attributes) GetStickerData() *StickerSet {
	if m != nil {
		return m.StickerData
	}
	return nil
}

func (m *Attributes) GetMask() bool {
	if m != nil {
		return m.Mask
	}
	return false
}

func (m *Attributes) GetAlt() string {
	if m != nil {
		return m.Alt
	}
	return ""
}

func (m *Attributes) GetMaskCoords() *MaskCoords {
	if m != nil {
		return m.MaskCoords
	}
	return nil
}

func (m *Attributes) GetRoundMessage() bool {
	if m != nil {
		return m.RoundMessage
	}
	return false
}

func (m *Attributes) GetSupportsStreaming() bool {
	if m != nil {
		return m.SupportsStreaming
	}
	return false
}

func (m *Attributes) GetVideoDuration() int32 {
	if m != nil {
		return m.VideoDuration
	}
	return 0
}

func (m *Attributes) GetVideoW() int32 {
	if m != nil {
		return m.VideoW
	}
	return 0
}

func (m *Attributes) GetVideoH() int32 {
	if m != nil {
		return m.VideoH
	}
	return 0
}

func (m *Attributes) GetVoice() bool {
	if m != nil {
		return m.Voice
	}
	return false
}

func (m *Attributes) GetAudioDuration() int32 {
	if m != nil {
		return m.AudioDuration
	}
	return 0
}

func (m *Attributes) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Attributes) GetPerformer() string {
	if m != nil {
		return m.Performer
	}
	return ""
}

func (m *Attributes) GetWaveform() []byte {
	if m != nil {
		return m.Waveform
	}
	return nil
}

func (m *Attributes) GetStickers() bool {
	if m != nil {
		return m.Stickers
	}
	return false
}

type DocumentInfo struct {
	VolumeId     int64         `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	LocalId      int32         `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	MimeType     string        `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Size_        int32         `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Thumbs       []*PhotoInfo  `protobuf:"bytes,5,rep,name=thumbs,proto3" json:"thumbs,omitempty"`
	VideoStartTs float64       `protobuf:"fixed64,6,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
	Attributes   []*Attributes `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Date         int32         `protobuf:"varint,8,opt,name=date,proto3" json:"date,omitempty"`
	AccessHash   int64         `protobuf:"varint,9,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *DocumentInfo) Reset()         { *m = DocumentInfo{} }
func (m *DocumentInfo) String() string { return proto.CompactTextString(m) }
func (*DocumentInfo) ProtoMessage()    {}
func (*DocumentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{3}
}
func (m *DocumentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentInfo.Merge(m, src)
}
func (m *DocumentInfo) XXX_Size() int {
	return m.Size()
}
func (m *DocumentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentInfo proto.InternalMessageInfo

func (m *DocumentInfo) GetVolumeId() int64 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DocumentInfo) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *DocumentInfo) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *DocumentInfo) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *DocumentInfo) GetThumbs() []*PhotoInfo {
	if m != nil {
		return m.Thumbs
	}
	return nil
}

func (m *DocumentInfo) GetVideoStartTs() float64 {
	if m != nil {
		return m.VideoStartTs
	}
	return 0
}

func (m *DocumentInfo) GetAttributes() []*Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *DocumentInfo) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *DocumentInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

type DocumentInfoList struct {
	Values []*DocumentInfo `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DocumentInfoList) Reset()         { *m = DocumentInfoList{} }
func (m *DocumentInfoList) String() string { return proto.CompactTextString(m) }
func (*DocumentInfoList) ProtoMessage()    {}
func (*DocumentInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{4}
}
func (m *DocumentInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentInfoList.Merge(m, src)
}
func (m *DocumentInfoList) XXX_Size() int {
	return m.Size()
}
func (m *DocumentInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentInfoList proto.InternalMessageInfo

func (m *DocumentInfoList) GetValues() []*DocumentInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type FileInfo struct {
	FileType int32  `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Bytes    []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Mtime    int32  `protobuf:"varint,3,opt,name=mtime,proto3" json:"mtime,omitempty"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{5}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetFileType() int32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *FileInfo) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *FileInfo) GetMtime() int32 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type VideoSize struct {
	//  VolumeId             int64    `protobuf:"varint,3,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	//  LocalId              int32    `protobuf:"varint,4,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	//  Secret               int64    `protobuf:"varint,5,opt,name=secret,proto3" json:"secret,omitempty"`
	//  DcId                 int32    `protobuf:"varint,6,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
	//  FileReference        []byte   `protobuf:"bytes,7,opt,name=file_reference,json=fileReference,proto3" json:"file_reference,omitempty"`
	Type         string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Width        int32   `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height       int32   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Size_        int32   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	VideoStartTs float64 `protobuf:"fixed64,5,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
}

func (m *VideoSize) Reset()         { *m = VideoSize{} }
func (m *VideoSize) String() string { return proto.CompactTextString(m) }
func (*VideoSize) ProtoMessage()    {}
func (*VideoSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{6}
}
func (m *VideoSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoSize.Merge(m, src)
}
func (m *VideoSize) XXX_Size() int {
	return m.Size()
}
func (m *VideoSize) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoSize.DiscardUnknown(m)
}

var xxx_messageInfo_VideoSize proto.InternalMessageInfo

func (m *VideoSize) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VideoSize) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *VideoSize) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VideoSize) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *VideoSize) GetVideoStartTs() float64 {
	if m != nil {
		return m.VideoStartTs
	}
	return 0
}

type PhotoInfo struct {
	VolumeId   int64        `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	LocalId    int32        `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	Filename   string       `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Md5Sum     string       `protobuf:"bytes,4,opt,name=md5sum,proto3" json:"md5sum,omitempty"`
	Date       int32        `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	Size_      int32        `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Height     int32        `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Weight     int32        `protobuf:"varint,8,opt,name=weight,proto3" json:"weight,omitempty"`
	FileType   int32        `protobuf:"varint,9,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	PhotoSize  []*PhotoInfo `protobuf:"bytes,10,rep,name=photo_size,json=photoSize,proto3" json:"photo_size,omitempty"`
	AccessHash int64        `protobuf:"varint,11,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Type       string       `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	Bytes      []byte       `protobuf:"bytes,13,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *PhotoInfo) Reset()         { *m = PhotoInfo{} }
func (m *PhotoInfo) String() string { return proto.CompactTextString(m) }
func (*PhotoInfo) ProtoMessage()    {}
func (*PhotoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{7}
}
func (m *PhotoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhotoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhotoInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhotoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhotoInfo.Merge(m, src)
}
func (m *PhotoInfo) XXX_Size() int {
	return m.Size()
}
func (m *PhotoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PhotoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PhotoInfo proto.InternalMessageInfo

func (m *PhotoInfo) GetVolumeId() int64 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *PhotoInfo) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *PhotoInfo) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *PhotoInfo) GetMd5Sum() string {
	if m != nil {
		return m.Md5Sum
	}
	return ""
}

func (m *PhotoInfo) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *PhotoInfo) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *PhotoInfo) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PhotoInfo) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PhotoInfo) GetFileType() int32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *PhotoInfo) GetPhotoSize() []*PhotoInfo {
	if m != nil {
		return m.PhotoSize
	}
	return nil
}

func (m *PhotoInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *PhotoInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PhotoInfo) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type PhotoInfoList struct {
	Values []*PhotoInfo `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *PhotoInfoList) Reset()         { *m = PhotoInfoList{} }
func (m *PhotoInfoList) String() string { return proto.CompactTextString(m) }
func (*PhotoInfoList) ProtoMessage()    {}
func (*PhotoInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{8}
}
func (m *PhotoInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhotoInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhotoInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhotoInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhotoInfoList.Merge(m, src)
}
func (m *PhotoInfoList) XXX_Size() int {
	return m.Size()
}
func (m *PhotoInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_PhotoInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_PhotoInfoList proto.InternalMessageInfo

func (m *PhotoInfoList) GetValues() []*PhotoInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type GetDocument struct {
	FileId  int64 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	LocalId int32 `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
}

func (m *GetDocument) Reset()         { *m = GetDocument{} }
func (m *GetDocument) String() string { return proto.CompactTextString(m) }
func (*GetDocument) ProtoMessage()    {}
func (*GetDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{9}
}
func (m *GetDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocument.Merge(m, src)
}
func (m *GetDocument) XXX_Size() int {
	return m.Size()
}
func (m *GetDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocument.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocument proto.InternalMessageInfo

func (m *GetDocument) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *GetDocument) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

type GetDocumentList struct {
	FileId []int64 `protobuf:"varint,1,rep,packed,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (m *GetDocumentList) Reset()         { *m = GetDocumentList{} }
func (m *GetDocumentList) String() string { return proto.CompactTextString(m) }
func (*GetDocumentList) ProtoMessage()    {}
func (*GetDocumentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{10}
}
func (m *GetDocumentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocumentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocumentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocumentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocumentList.Merge(m, src)
}
func (m *GetDocumentList) XXX_Size() int {
	return m.Size()
}
func (m *GetDocumentList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocumentList.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocumentList proto.InternalMessageInfo

func (m *GetDocumentList) GetFileId() []int64 {
	if m != nil {
		return m.FileId
	}
	return nil
}

type GetFile struct {
	FileType  GetFile_FileType `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3,enum=rpc_client.GetFile_FileType" json:"file_type,omitempty"`
	VolumeId  int64            `protobuf:"varint,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	LocalId   int32            `protobuf:"varint,3,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	Offset    int32            `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32            `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	ThumbSize string           `protobuf:"bytes,6,opt,name=thumb_size,json=thumbSize,proto3" json:"thumb_size,omitempty"`
}

func (m *GetFile) Reset()         { *m = GetFile{} }
func (m *GetFile) String() string { return proto.CompactTextString(m) }
func (*GetFile) ProtoMessage()    {}
func (*GetFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{11}
}
func (m *GetFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFile.Merge(m, src)
}
func (m *GetFile) XXX_Size() int {
	return m.Size()
}
func (m *GetFile) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFile.DiscardUnknown(m)
}

var xxx_messageInfo_GetFile proto.InternalMessageInfo

func (m *GetFile) GetFileType() GetFile_FileType {
	if m != nil {
		return m.FileType
	}
	return GetFile_Photo
}

func (m *GetFile) GetVolumeId() int64 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *GetFile) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *GetFile) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetFile) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetFile) GetThumbSize() string {
	if m != nil {
		return m.ThumbSize
	}
	return ""
}

type GetPhoto struct {
	PhotoId int64 `protobuf:"varint,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	LocalId int32 `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
}

func (m *GetPhoto) Reset()         { *m = GetPhoto{} }
func (m *GetPhoto) String() string { return proto.CompactTextString(m) }
func (*GetPhoto) ProtoMessage()    {}
func (*GetPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{12}
}
func (m *GetPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPhoto.Merge(m, src)
}
func (m *GetPhoto) XXX_Size() int {
	return m.Size()
}
func (m *GetPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_GetPhoto proto.InternalMessageInfo

func (m *GetPhoto) GetPhotoId() int64 {
	if m != nil {
		return m.PhotoId
	}
	return 0
}

func (m *GetPhoto) GetLocalId() int32 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

type GetPhotoList struct {
	PhotoIdList []int64 `protobuf:"varint,1,rep,packed,name=photo_id_list,json=photoIdList,proto3" json:"photo_id_list,omitempty"`
}

func (m *GetPhotoList) Reset()         { *m = GetPhotoList{} }
func (m *GetPhotoList) String() string { return proto.CompactTextString(m) }
func (*GetPhotoList) ProtoMessage()    {}
func (*GetPhotoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{13}
}
func (m *GetPhotoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPhotoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPhotoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPhotoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPhotoList.Merge(m, src)
}
func (m *GetPhotoList) XXX_Size() int {
	return m.Size()
}
func (m *GetPhotoList) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPhotoList.DiscardUnknown(m)
}

var xxx_messageInfo_GetPhotoList proto.InternalMessageInfo

func (m *GetPhotoList) GetPhotoIdList() []int64 {
	if m != nil {
		return m.PhotoIdList
	}
	return nil
}

type UploadedDocument struct {
	AuthKeyId    int64                   `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	FileId       int64                   `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileName     string                  `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Parts        int32                   `protobuf:"varint,4,opt,name=parts,proto3" json:"parts,omitempty"`
	MimeType     string                  `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Attributes   []*Attributes           `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Thumb        *UploadedDocument_Thumb `protobuf:"bytes,7,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Video        bool                    `protobuf:"varint,8,opt,name=video,proto3" json:"video,omitempty"`
	TtlSecond    int32                   `protobuf:"varint,9,opt,name=ttl_second,json=ttlSecond,proto3" json:"ttl_second,omitempty"`
	VideoStartTs float64                 `protobuf:"fixed64,10,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
}

func (m *UploadedDocument) Reset()         { *m = UploadedDocument{} }
func (m *UploadedDocument) String() string { return proto.CompactTextString(m) }
func (*UploadedDocument) ProtoMessage()    {}
func (*UploadedDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{14}
}
func (m *UploadedDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadedDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadedDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadedDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadedDocument.Merge(m, src)
}
func (m *UploadedDocument) XXX_Size() int {
	return m.Size()
}
func (m *UploadedDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadedDocument.DiscardUnknown(m)
}

var xxx_messageInfo_UploadedDocument proto.InternalMessageInfo

func (m *UploadedDocument) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UploadedDocument) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *UploadedDocument) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadedDocument) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *UploadedDocument) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *UploadedDocument) GetAttributes() []*Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UploadedDocument) GetThumb() *UploadedDocument_Thumb {
	if m != nil {
		return m.Thumb
	}
	return nil
}

func (m *UploadedDocument) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *UploadedDocument) GetTtlSecond() int32 {
	if m != nil {
		return m.TtlSecond
	}
	return 0
}

func (m *UploadedDocument) GetVideoStartTs() float64 {
	if m != nil {
		return m.VideoStartTs
	}
	return 0
}

type UploadedDocument_Thumb struct {
	FileId   int64   `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileName string  `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Parts    int32   `protobuf:"varint,3,opt,name=parts,proto3" json:"parts,omitempty"`
	Sticker  []int64 `protobuf:"varint,4,rep,packed,name=sticker,proto3" json:"sticker,omitempty"`
}

func (m *UploadedDocument_Thumb) Reset()         { *m = UploadedDocument_Thumb{} }
func (m *UploadedDocument_Thumb) String() string { return proto.CompactTextString(m) }
func (*UploadedDocument_Thumb) ProtoMessage()    {}
func (*UploadedDocument_Thumb) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{14, 0}
}
func (m *UploadedDocument_Thumb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadedDocument_Thumb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadedDocument_Thumb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadedDocument_Thumb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadedDocument_Thumb.Merge(m, src)
}
func (m *UploadedDocument_Thumb) XXX_Size() int {
	return m.Size()
}
func (m *UploadedDocument_Thumb) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadedDocument_Thumb.DiscardUnknown(m)
}

var xxx_messageInfo_UploadedDocument_Thumb proto.InternalMessageInfo

func (m *UploadedDocument_Thumb) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *UploadedDocument_Thumb) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadedDocument_Thumb) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *UploadedDocument_Thumb) GetSticker() []int64 {
	if m != nil {
		return m.Sticker
	}
	return nil
}

type UploadPhoto struct {
	AuthKeyId int64   `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	FileId    int64   `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileName  string  `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Parts     int32   `protobuf:"varint,4,opt,name=parts,proto3" json:"parts,omitempty"`
	Stickers  []int64 `protobuf:"varint,5,rep,packed,name=stickers,proto3" json:"stickers,omitempty"`
}

func (m *UploadPhoto) Reset()         { *m = UploadPhoto{} }
func (m *UploadPhoto) String() string { return proto.CompactTextString(m) }
func (*UploadPhoto) ProtoMessage()    {}
func (*UploadPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{15}
}
func (m *UploadPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPhoto.Merge(m, src)
}
func (m *UploadPhoto) XXX_Size() int {
	return m.Size()
}
func (m *UploadPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPhoto proto.InternalMessageInfo

func (m *UploadPhoto) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UploadPhoto) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *UploadPhoto) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadPhoto) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *UploadPhoto) GetStickers() []int64 {
	if m != nil {
		return m.Stickers
	}
	return nil
}

type UploadSaveMultiPartFileData struct {
	AuthKeyId      int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	FileId         int64  `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePart       int32  `protobuf:"varint,3,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
	FileTotalParts int32  `protobuf:"varint,4,opt,name=file_total_parts,json=fileTotalParts,proto3" json:"file_total_parts,omitempty"`
	Bytes          []byte `protobuf:"bytes,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *UploadSaveMultiPartFileData) Reset()         { *m = UploadSaveMultiPartFileData{} }
func (m *UploadSaveMultiPartFileData) String() string { return proto.CompactTextString(m) }
func (*UploadSaveMultiPartFileData) ProtoMessage()    {}
func (*UploadSaveMultiPartFileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{16}
}
func (m *UploadSaveMultiPartFileData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadSaveMultiPartFileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadSaveMultiPartFileData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadSaveMultiPartFileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadSaveMultiPartFileData.Merge(m, src)
}
func (m *UploadSaveMultiPartFileData) XXX_Size() int {
	return m.Size()
}
func (m *UploadSaveMultiPartFileData) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadSaveMultiPartFileData.DiscardUnknown(m)
}

var xxx_messageInfo_UploadSaveMultiPartFileData proto.InternalMessageInfo

func (m *UploadSaveMultiPartFileData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UploadSaveMultiPartFileData) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *UploadSaveMultiPartFileData) GetFilePart() int32 {
	if m != nil {
		return m.FilePart
	}
	return 0
}

func (m *UploadSaveMultiPartFileData) GetFileTotalParts() int32 {
	if m != nil {
		return m.FileTotalParts
	}
	return 0
}

func (m *UploadSaveMultiPartFileData) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type UploadSavePartFileData struct {
	AuthKeyId int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	FileId    int64  `protobuf:"varint,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePart  int32  `protobuf:"varint,3,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
	Bytes     []byte `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *UploadSavePartFileData) Reset()         { *m = UploadSavePartFileData{} }
func (m *UploadSavePartFileData) String() string { return proto.CompactTextString(m) }
func (*UploadSavePartFileData) ProtoMessage()    {}
func (*UploadSavePartFileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba120654a0f3dbe, []int{17}
}
func (m *UploadSavePartFileData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadSavePartFileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadSavePartFileData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadSavePartFileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadSavePartFileData.Merge(m, src)
}
func (m *UploadSavePartFileData) XXX_Size() int {
	return m.Size()
}
func (m *UploadSavePartFileData) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadSavePartFileData.DiscardUnknown(m)
}

var xxx_messageInfo_UploadSavePartFileData proto.InternalMessageInfo

func (m *UploadSavePartFileData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UploadSavePartFileData) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *UploadSavePartFileData) GetFilePart() int32 {
	if m != nil {
		return m.FilePart
	}
	return 0
}

func (m *UploadSavePartFileData) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func init() {
	proto.RegisterEnum("rpc_client.GetFile_FileType", GetFile_FileType_name, GetFile_FileType_value)
	proto.RegisterType((*StickerSet)(nil), "rpc_client.StickerSet")
	proto.RegisterType((*MaskCoords)(nil), "rpc_client.MaskCoords")
	proto.RegisterType((*Attributes)(nil), "rpc_client.Attributes")
	proto.RegisterType((*DocumentInfo)(nil), "rpc_client.DocumentInfo")
	proto.RegisterType((*DocumentInfoList)(nil), "rpc_client.DocumentInfoList")
	proto.RegisterType((*FileInfo)(nil), "rpc_client.FileInfo")
	proto.RegisterType((*VideoSize)(nil), "rpc_client.VideoSize")
	proto.RegisterType((*PhotoInfo)(nil), "rpc_client.PhotoInfo")
	proto.RegisterType((*PhotoInfoList)(nil), "rpc_client.PhotoInfoList")
	proto.RegisterType((*GetDocument)(nil), "rpc_client.GetDocument")
	proto.RegisterType((*GetDocumentList)(nil), "rpc_client.GetDocumentList")
	proto.RegisterType((*GetFile)(nil), "rpc_client.GetFile")
	proto.RegisterType((*GetPhoto)(nil), "rpc_client.GetPhoto")
	proto.RegisterType((*GetPhotoList)(nil), "rpc_client.GetPhotoList")
	proto.RegisterType((*UploadedDocument)(nil), "rpc_client.UploadedDocument")
	proto.RegisterType((*UploadedDocument_Thumb)(nil), "rpc_client.UploadedDocument.Thumb")
	proto.RegisterType((*UploadPhoto)(nil), "rpc_client.UploadPhoto")
	proto.RegisterType((*UploadSaveMultiPartFileData)(nil), "rpc_client.UploadSaveMultiPartFileData")
	proto.RegisterType((*UploadSavePartFileData)(nil), "rpc_client.UploadSavePartFileData")
}

func init() { proto.RegisterFile("sfs.proto", fileDescriptor_3ba120654a0f3dbe) }

var fileDescriptor_3ba120654a0f3dbe = []byte{
	// 1386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4d, 0x6f, 0x1c, 0x45,
	0x13, 0x76, 0xef, 0x7a, 0x76, 0x77, 0x6a, 0xd7, 0xce, 0xa6, 0x5f, 0xc7, 0xef, 0xe0, 0x04, 0x7b,
	0xe5, 0x80, 0xd8, 0x8b, 0x1d, 0x14, 0xbe, 0x12, 0x4e, 0x7c, 0x44, 0x49, 0x2c, 0x92, 0x10, 0x8d,
	0x03, 0x41, 0x5c, 0x46, 0xed, 0x9d, 0xde, 0xdd, 0x91, 0x67, 0xb6, 0x57, 0xd3, 0x3d, 0x76, 0x36,
	0xfc, 0x09, 0x84, 0x84, 0xc4, 0x95, 0x70, 0xe4, 0x57, 0x70, 0x01, 0x8e, 0xf9, 0x09, 0x90, 0x5f,
	0x80, 0xc4, 0x11, 0x0e, 0xa8, 0xab, 0xe7, 0xdb, 0x76, 0xc4, 0x87, 0x94, 0x5b, 0x3f, 0xd5, 0x35,
	0xd5, 0xd5, 0xf5, 0x3c, 0x5d, 0xdd, 0x03, 0xb6, 0x1c, 0xcb, 0xdd, 0x79, 0x2c, 0x94, 0xa0, 0x10,
	0xcf, 0x47, 0xde, 0x28, 0x0c, 0xf8, 0x4c, 0x6d, 0xec, 0x4c, 0x02, 0x35, 0x4d, 0x0e, 0x76, 0x47,
	0x22, 0xba, 0x32, 0x11, 0x13, 0x71, 0x05, 0x5d, 0x0e, 0x92, 0x31, 0x22, 0x04, 0x38, 0x32, 0x9f,
	0x6e, 0xff, 0x48, 0x00, 0xf6, 0x55, 0x30, 0x3a, 0xe4, 0xf1, 0x3e, 0x57, 0x74, 0x08, 0x7d, 0x69,
	0x90, 0x27, 0xb9, 0xf2, 0xd4, 0x62, 0xce, 0x1d, 0x32, 0x20, 0x43, 0xcb, 0x5d, 0x95, 0xb9, 0xd7,
	0x83, 0xc5, 0x9c, 0xd3, 0x57, 0x60, 0xb5, 0xec, 0x19, 0xf8, 0x4e, 0x63, 0x40, 0x86, 0x4d, 0xb7,
	0x57, 0xf8, 0xed, 0xf9, 0x74, 0x0b, 0xba, 0x6c, 0x34, 0xe2, 0x52, 0x7a, 0x53, 0x26, 0xa7, 0x4e,
	0x13, 0x5d, 0xc0, 0x98, 0x6e, 0x33, 0x39, 0xa5, 0x2f, 0x03, 0xc8, 0xa9, 0x88, 0x95, 0x37, 0x63,
	0x11, 0x77, 0x96, 0x07, 0x64, 0x68, 0xbb, 0x36, 0x5a, 0xee, 0xb1, 0x88, 0xd3, 0x0d, 0xe8, 0xf0,
	0x48, 0xa8, 0x60, 0x24, 0x66, 0x8e, 0x85, 0x93, 0x39, 0x7e, 0xb7, 0xf7, 0xf4, 0xdb, 0xad, 0xa5,
	0x2f, 0x9f, 0x6c, 0x2d, 0x7d, 0xf3, 0x64, 0x6b, 0x69, 0xfb, 0x33, 0x80, 0xbb, 0x4c, 0x1e, 0x7e,
	0x28, 0x44, 0xec, 0x4b, 0xda, 0x03, 0x32, 0x4b, 0x13, 0x27, 0x33, 0x8d, 0x1e, 0x61, 0x7a, 0xc4,
	0x25, 0x8f, 0x34, 0x5a, 0x60, 0x26, 0xc4, 0x25, 0x0b, 0x4a, 0x61, 0xf9, 0xb1, 0x10, 0x11, 0x2e,
	0x4d, 0x5c, 0x1c, 0xd7, 0x22, 0x7f, 0x6f, 0x01, 0xbc, 0xaf, 0x54, 0x1c, 0x1c, 0x24, 0x8a, 0x4b,
	0xfa, 0x1a, 0x9c, 0x63, 0x39, 0xaa, 0x54, 0xa8, 0x30, 0x63, 0x85, 0x36, 0xa0, 0x33, 0x0e, 0x42,
	0x8e, 0x1b, 0x6b, 0x98, 0xdc, 0x33, 0x4c, 0xff, 0x0f, 0xed, 0x20, 0x62, 0x13, 0xee, 0x1d, 0x63,
	0x26, 0x96, 0xdb, 0x42, 0xf8, 0xb0, 0x98, 0x98, 0x62, 0x46, 0xd9, 0xc4, 0xed, 0x53, 0x99, 0x69,
	0x9d, 0xca, 0xcc, 0x75, 0xc8, 0x38, 0xf0, 0x7c, 0xa6, 0x98, 0xd3, 0x1e, 0x90, 0x61, 0xf7, 0xea,
	0xfa, 0x6e, 0x21, 0x92, 0xdd, 0x82, 0x71, 0xb7, 0x9b, 0xfa, 0xde, 0x60, 0x8a, 0xe9, 0x62, 0x44,
	0x4c, 0x1e, 0x3a, 0x9d, 0x01, 0x19, 0x76, 0x5c, 0x1c, 0xd3, 0x3e, 0x34, 0x59, 0xa8, 0x1c, 0x1b,
	0x77, 0xa0, 0x87, 0xf4, 0x1d, 0xe8, 0xea, 0x19, 0x6f, 0x84, 0xb5, 0x76, 0xe0, 0x64, 0xfc, 0x82,
	0x09, 0x17, 0xa2, 0x82, 0x95, 0xcb, 0xb0, 0x12, 0x8b, 0x64, 0xe6, 0x7b, 0x11, 0x97, 0x92, 0x4d,
	0xb8, 0xd3, 0xc5, 0x75, 0x7a, 0x68, 0xbc, 0x6b, 0x6c, 0x74, 0x07, 0xa8, 0x4c, 0xe6, 0x73, 0x11,
	0x2b, 0xe9, 0x49, 0x15, 0x73, 0x16, 0x05, 0xb3, 0x89, 0xd3, 0x43, 0xcf, 0xf3, 0xd9, 0xcc, 0x7e,
	0x36, 0x41, 0x5f, 0x85, 0xd5, 0xa3, 0xc0, 0xe7, 0xc2, 0xf3, 0x93, 0x98, 0xa9, 0x40, 0xcc, 0x9c,
	0x15, 0xac, 0xca, 0x0a, 0x5a, 0x6f, 0xa4, 0x46, 0x5d, 0x57, 0xe3, 0x76, 0xec, 0xac, 0x9a, 0xba,
	0x22, 0x7c, 0x58, 0x4c, 0x4c, 0x9d, 0x73, 0xa5, 0x89, 0xdb, 0x74, 0x0d, 0xac, 0x23, 0x11, 0x8c,
	0xb8, 0xd3, 0xc7, 0xa5, 0x0d, 0xd0, 0xcb, 0xb1, 0xc4, 0x0f, 0x4a, 0xcb, 0x9d, 0x37, 0xcb, 0xa1,
	0x35, 0x5f, 0x6e, 0x0d, 0x2c, 0x15, 0xa8, 0x90, 0x3b, 0x14, 0xcb, 0x66, 0x00, 0xbd, 0x04, 0xf6,
	0x9c, 0xc7, 0x63, 0x11, 0x47, 0x3c, 0x76, 0xfe, 0x67, 0xb4, 0x9e, 0x1b, 0xb4, 0x5e, 0x8e, 0xd9,
	0x11, 0xd7, 0xc8, 0x59, 0x1b, 0x90, 0x61, 0xcf, 0xcd, 0xb1, 0x9e, 0x4b, 0x79, 0x92, 0xce, 0x05,
	0xcc, 0x27, 0xc7, 0x35, 0xb5, 0xfe, 0xd4, 0x80, 0xde, 0x0d, 0x31, 0x4a, 0x22, 0x3e, 0x53, 0x7b,
	0xb3, 0xb1, 0xa0, 0x17, 0xc1, 0x3e, 0x12, 0x61, 0x12, 0x71, 0x7d, 0x46, 0x09, 0x1e, 0xc0, 0x8e,
	0x31, 0xec, 0xf9, 0xf4, 0x25, 0xe8, 0x84, 0x62, 0xc4, 0xc2, 0xec, 0xfc, 0x5a, 0x6e, 0x1b, 0xf1,
	0x9e, 0xaf, 0xbf, 0x8b, 0x82, 0x88, 0x1b, 0xa5, 0x35, 0x8d, 0x7e, 0xb5, 0x01, 0x35, 0x46, 0x61,
	0x59, 0x06, 0x8f, 0x79, 0xaa, 0x51, 0x1c, 0xd3, 0x1d, 0x68, 0xa9, 0x69, 0x12, 0x1d, 0x48, 0xc7,
	0x1a, 0x34, 0x87, 0xdd, 0xab, 0x17, 0xca, 0x8a, 0xb8, 0x3f, 0x15, 0x4a, 0xe8, 0x7c, 0xdc, 0xd4,
	0x49, 0x37, 0x10, 0x53, 0x78, 0xa9, 0x58, 0xac, 0x3c, 0x25, 0x51, 0xce, 0xc4, 0xed, 0xa1, 0x75,
	0x5f, 0x1b, 0x1f, 0x48, 0xfa, 0x36, 0x40, 0x71, 0xac, 0x9c, 0x36, 0x06, 0xae, 0x48, 0xad, 0x38,
	0x99, 0x6e, 0xc9, 0x53, 0x27, 0xe8, 0x33, 0xc5, 0x51, 0xc9, 0x96, 0x8b, 0xe3, 0x7a, 0x33, 0xb2,
	0xeb, 0xcd, 0xa8, 0x56, 0x49, 0x17, 0xfa, 0xe5, 0x42, 0xde, 0x09, 0xa4, 0xa2, 0xaf, 0x43, 0xeb,
	0x88, 0x85, 0x09, 0x97, 0x0e, 0xc1, 0x54, 0x9c, 0x72, 0x2a, 0x65, 0x6f, 0x37, 0xf5, 0xab, 0xc5,
	0x64, 0xd0, 0xb9, 0x19, 0x84, 0x3c, 0x23, 0x46, 0xf7, 0x83, 0x72, 0x0b, 0xc1, 0x06, 0x81, 0x05,
	0x5e, 0x03, 0xeb, 0x60, 0xa1, 0xb7, 0xdc, 0x40, 0x25, 0x18, 0xa0, 0xad, 0x91, 0x0a, 0x22, 0x9e,
	0x36, 0x0d, 0x03, 0x6a, 0x4b, 0x7c, 0x4d, 0xc0, 0xfe, 0x14, 0x4b, 0xa8, 0x49, 0xa1, 0xb0, 0x9c,
	0xc7, 0xb7, 0x5d, 0x1c, 0xeb, 0x28, 0xc7, 0x81, 0xaf, 0xa6, 0x29, 0xe3, 0x06, 0xd0, 0x75, 0x68,
	0x4d, 0x79, 0x30, 0x99, 0xaa, 0xac, 0x23, 0x19, 0x74, 0x2a, 0xd5, 0x27, 0xb9, 0xb3, 0x4e, 0x72,
	0x57, 0xcb, 0xeb, 0x8f, 0x06, 0xd8, 0xb9, 0x0a, 0xfe, 0xb5, 0x2a, 0xcb, 0x4d, 0xb5, 0x59, 0x6b,
	0xaa, 0xeb, 0xd0, 0x8a, 0xfc, 0xb7, 0x64, 0x12, 0xa5, 0xf7, 0x48, 0x8a, 0x72, 0x2d, 0x58, 0x25,
	0x2d, 0x64, 0xbb, 0x6a, 0x95, 0x76, 0x55, 0x54, 0xa0, 0x5d, 0xa9, 0xc0, 0x3a, 0xb4, 0x8e, 0x8d,
	0xdd, 0xa8, 0x29, 0x45, 0x55, 0x02, 0xed, 0x1a, 0x81, 0x6f, 0x02, 0xcc, 0xf5, 0x6e, 0x3d, 0x5c,
	0x06, 0x9e, 0x77, 0x22, 0x6c, 0x74, 0x44, 0xba, 0x6a, 0x12, 0xed, 0x9e, 0xb8, 0x2f, 0x33, 0x3e,
	0x7b, 0x55, 0x3e, 0x8d, 0x56, 0x56, 0x4a, 0x5a, 0xa9, 0x55, 0xff, 0x0e, 0xac, 0xe4, 0x0b, 0xa2,
	0x92, 0x77, 0x6a, 0x4a, 0x3e, 0xeb, 0xb4, 0x9e, 0x2a, 0xe3, 0x8f, 0xa1, 0x7b, 0x8b, 0xab, 0x4c,
	0xef, 0xba, 0x87, 0x62, 0x21, 0x72, 0x2a, 0x5b, 0x1a, 0x3e, 0x97, 0xc8, 0x5a, 0xc0, 0x6b, 0x70,
	0xae, 0x14, 0x10, 0x13, 0xac, 0x04, 0x6d, 0x16, 0x41, 0x6b, 0x5f, 0xfe, 0x49, 0xa0, 0x7d, 0x8b,
	0x2b, 0x7d, 0xaa, 0xe8, 0xf5, 0xfa, 0x89, 0x5a, 0xbd, 0x7a, 0xa9, 0xbc, 0xad, 0xd4, 0x6f, 0xf7,
	0x66, 0x4a, 0x52, 0x89, 0xae, 0x8a, 0x1e, 0x1b, 0xcf, 0xd1, 0x63, 0xb3, 0xaa, 0xc7, 0x75, 0x68,
	0x89, 0xf1, 0x58, 0x72, 0x95, 0x5d, 0xd7, 0x06, 0x69, 0x4e, 0xc2, 0x20, 0x0a, 0x54, 0x2a, 0x3a,
	0x03, 0xf4, 0x6b, 0x07, 0xbb, 0x9f, 0x97, 0x6b, 0xcf, 0x76, 0x6d, 0xb4, 0x68, 0xf6, 0xb7, 0x2f,
	0x9b, 0xee, 0x80, 0x09, 0xd9, 0x60, 0x21, 0x0b, 0xfd, 0x25, 0xda, 0x83, 0x4e, 0x56, 0x99, 0x3e,
	0xa9, 0x6d, 0xff, 0x1e, 0x74, 0x6e, 0x71, 0x85, 0x9e, 0x3a, 0x4d, 0x23, 0xb9, 0x9c, 0x87, 0x36,
	0xe2, 0x7f, 0x42, 0xc4, 0x7b, 0xd0, 0xcb, 0xe2, 0x21, 0x0b, 0xdb, 0xb0, 0x92, 0xc5, 0xf4, 0xc2,
	0x40, 0xaa, 0x94, 0x8b, 0x6e, 0x1a, 0x58, 0xfb, 0xd4, 0x22, 0xfc, 0xde, 0x84, 0xfe, 0x27, 0xf3,
	0x50, 0x30, 0x9f, 0xfb, 0xb9, 0x42, 0x36, 0xa1, 0xcb, 0x12, 0x35, 0xf5, 0x0e, 0xf9, 0xa2, 0xc8,
	0xce, 0xd6, 0xa6, 0x8f, 0xf8, 0x62, 0xcf, 0x2f, 0x93, 0xdd, 0xa8, 0x28, 0x28, 0x3b, 0x63, 0xf5,
	0x03, 0x8f, 0xaf, 0xc3, 0x35, 0xb0, 0xe6, 0x2c, 0x56, 0x32, 0xad, 0xbd, 0x01, 0xd5, 0x8b, 0xcb,
	0xaa, 0x5d, 0x5c, 0xd5, 0xfb, 0xa4, 0xf5, 0xb7, 0xef, 0x93, 0x6b, 0x60, 0x21, 0x4f, 0xe9, 0x6b,
	0x6a, 0xbb, 0xfc, 0x49, 0x7d, 0xb7, 0xbb, 0x0f, 0xb4, 0xa7, 0x6b, 0x3e, 0xc0, 0x77, 0x84, 0xee,
	0x8a, 0xe9, 0xa3, 0xca, 0x00, 0x54, 0x82, 0x0a, 0x3d, 0xc9, 0x47, 0x62, 0xe6, 0xa7, 0xcd, 0xc3,
	0x56, 0x2a, 0xdc, 0x47, 0xc3, 0x29, 0x0d, 0x16, 0x4e, 0x36, 0xd8, 0x8d, 0x2f, 0xc0, 0xc2, 0xa5,
	0xce, 0x3e, 0x80, 0x95, 0xf2, 0x35, 0xce, 0x2a, 0x5f, 0xb3, 0x5c, 0x3e, 0x07, 0xda, 0xe9, 0xd3,
	0xc2, 0x59, 0x46, 0xae, 0x33, 0x58, 0xe5, 0xb9, 0xc6, 0xfa, 0x77, 0x04, 0xba, 0xa6, 0x0e, 0x46,
	0x8b, 0x2f, 0x92, 0xf0, 0xf2, 0xe3, 0xc8, 0xc2, 0x94, 0xcf, 0x7a, 0x1c, 0xfd, 0x40, 0xe0, 0xa2,
	0xc9, 0x72, 0x9f, 0x1d, 0xf1, 0xbb, 0x49, 0xa8, 0x82, 0xfb, 0x2c, 0xc6, 0xa6, 0x80, 0xef, 0xdf,
	0xff, 0x9c, 0xb5, 0x4e, 0x28, 0x2d, 0x27, 0x66, 0xad, 0xa3, 0xeb, 0xa7, 0xbb, 0x69, 0x4b, 0x42,
	0xb1, 0xd0, 0x2b, 0x6f, 0x60, 0x15, 0xfb, 0x8f, 0x36, 0xdf, 0xc7, 0x9d, 0xe4, 0x9d, 0xdc, 0x3a,
	0xbb, 0x93, 0x7f, 0x45, 0x60, 0xbd, 0xd8, 0xc3, 0x0b, 0x48, 0x3f, 0x4f, 0x6a, 0xf9, 0xcc, 0xa4,
	0x3e, 0xb8, 0xf4, 0xdb, 0xaf, 0x9b, 0xe4, 0xe7, 0x67, 0x9b, 0xe4, 0xe9, 0xb3, 0x4d, 0xf2, 0xcb,
	0xb3, 0x4d, 0xf2, 0x79, 0xe9, 0x9f, 0xf4, 0xa0, 0x85, 0xff, 0x9a, 0x6f, 0xfc, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x4f, 0xf7, 0xb3, 0xb3, 0x0e, 0x00, 0x00,
}

func (this *StickerSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rpc_client.StickerSet{")
	s = append(s, "StickerSetType: "+fmt.Sprintf("%#v", this.StickerSetType)+",\n")
	s = append(s, "StickerSetId: "+fmt.Sprintf("%#v", this.StickerSetId)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "ShortName: "+fmt.Sprintf("%#v", this.ShortName)+",\n")
	s = append(s, "Emoticon: "+fmt.Sprintf("%#v", this.Emoticon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaskCoords) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rpc_client.MaskCoords{")
	s = append(s, "N: "+fmt.Sprintf("%#v", this.N)+",\n")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "Zoom: "+fmt.Sprintf("%#v", this.Zoom)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&rpc_client.Attributes{")
	s = append(s, "AttributesType: "+fmt.Sprintf("%#v", this.AttributesType)+",\n")
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "ImageW: "+fmt.Sprintf("%#v", this.ImageW)+",\n")
	s = append(s, "ImageH: "+fmt.Sprintf("%#v", this.ImageH)+",\n")
	s = append(s, "StickerSetType: "+fmt.Sprintf("%#v", this.StickerSetType)+",\n")
	if this.StickerData != nil {
		s = append(s, "StickerData: "+fmt.Sprintf("%#v", this.StickerData)+",\n")
	}
	s = append(s, "Mask: "+fmt.Sprintf("%#v", this.Mask)+",\n")
	s = append(s, "Alt: "+fmt.Sprintf("%#v", this.Alt)+",\n")
	if this.MaskCoords != nil {
		s = append(s, "MaskCoords: "+fmt.Sprintf("%#v", this.MaskCoords)+",\n")
	}
	s = append(s, "RoundMessage: "+fmt.Sprintf("%#v", this.RoundMessage)+",\n")
	s = append(s, "SupportsStreaming: "+fmt.Sprintf("%#v", this.SupportsStreaming)+",\n")
	s = append(s, "VideoDuration: "+fmt.Sprintf("%#v", this.VideoDuration)+",\n")
	s = append(s, "VideoW: "+fmt.Sprintf("%#v", this.VideoW)+",\n")
	s = append(s, "VideoH: "+fmt.Sprintf("%#v", this.VideoH)+",\n")
	s = append(s, "Voice: "+fmt.Sprintf("%#v", this.Voice)+",\n")
	s = append(s, "AudioDuration: "+fmt.Sprintf("%#v", this.AudioDuration)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Performer: "+fmt.Sprintf("%#v", this.Performer)+",\n")
	s = append(s, "Waveform: "+fmt.Sprintf("%#v", this.Waveform)+",\n")
	s = append(s, "Stickers: "+fmt.Sprintf("%#v", this.Stickers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&rpc_client.DocumentInfo{")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "MimeType: "+fmt.Sprintf("%#v", this.MimeType)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	if this.Thumbs != nil {
		s = append(s, "Thumbs: "+fmt.Sprintf("%#v", this.Thumbs)+",\n")
	}
	s = append(s, "VideoStartTs: "+fmt.Sprintf("%#v", this.VideoStartTs)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentInfoList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc_client.DocumentInfoList{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc_client.FileInfo{")
	s = append(s, "FileType: "+fmt.Sprintf("%#v", this.FileType)+",\n")
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "Mtime: "+fmt.Sprintf("%#v", this.Mtime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VideoSize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rpc_client.VideoSize{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "VideoStartTs: "+fmt.Sprintf("%#v", this.VideoStartTs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhotoInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&rpc_client.PhotoInfo{")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "Md5Sum: "+fmt.Sprintf("%#v", this.Md5Sum)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	s = append(s, "FileType: "+fmt.Sprintf("%#v", this.FileType)+",\n")
	if this.PhotoSize != nil {
		s = append(s, "PhotoSize: "+fmt.Sprintf("%#v", this.PhotoSize)+",\n")
	}
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhotoInfoList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc_client.PhotoInfoList{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDocument) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc_client.GetDocument{")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDocumentList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc_client.GetDocumentList{")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rpc_client.GetFile{")
	s = append(s, "FileType: "+fmt.Sprintf("%#v", this.FileType)+",\n")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "ThumbSize: "+fmt.Sprintf("%#v", this.ThumbSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPhoto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc_client.GetPhoto{")
	s = append(s, "PhotoId: "+fmt.Sprintf("%#v", this.PhotoId)+",\n")
	s = append(s, "LocalId: "+fmt.Sprintf("%#v", this.LocalId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPhotoList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc_client.GetPhotoList{")
	s = append(s, "PhotoIdList: "+fmt.Sprintf("%#v", this.PhotoIdList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadedDocument) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&rpc_client.UploadedDocument{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "FileName: "+fmt.Sprintf("%#v", this.FileName)+",\n")
	s = append(s, "Parts: "+fmt.Sprintf("%#v", this.Parts)+",\n")
	s = append(s, "MimeType: "+fmt.Sprintf("%#v", this.MimeType)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	if this.Thumb != nil {
		s = append(s, "Thumb: "+fmt.Sprintf("%#v", this.Thumb)+",\n")
	}
	s = append(s, "Video: "+fmt.Sprintf("%#v", this.Video)+",\n")
	s = append(s, "TtlSecond: "+fmt.Sprintf("%#v", this.TtlSecond)+",\n")
	s = append(s, "VideoStartTs: "+fmt.Sprintf("%#v", this.VideoStartTs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadedDocument_Thumb) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rpc_client.UploadedDocument_Thumb{")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "FileName: "+fmt.Sprintf("%#v", this.FileName)+",\n")
	s = append(s, "Parts: "+fmt.Sprintf("%#v", this.Parts)+",\n")
	s = append(s, "Sticker: "+fmt.Sprintf("%#v", this.Sticker)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadPhoto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rpc_client.UploadPhoto{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "FileName: "+fmt.Sprintf("%#v", this.FileName)+",\n")
	s = append(s, "Parts: "+fmt.Sprintf("%#v", this.Parts)+",\n")
	s = append(s, "Stickers: "+fmt.Sprintf("%#v", this.Stickers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadSaveMultiPartFileData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rpc_client.UploadSaveMultiPartFileData{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "FilePart: "+fmt.Sprintf("%#v", this.FilePart)+",\n")
	s = append(s, "FileTotalParts: "+fmt.Sprintf("%#v", this.FileTotalParts)+",\n")
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UploadSavePartFileData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rpc_client.UploadSavePartFileData{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "FilePart: "+fmt.Sprintf("%#v", this.FilePart)+",\n")
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSfs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Emoticon) > 0 {
		i -= len(m.Emoticon)
		copy(dAtA[i:], m.Emoticon)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Emoticon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x22
	}
	if m.AccessHash != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.StickerSetId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.StickerSetId))
		i--
		dAtA[i] = 0x10
	}
	if m.StickerSetType != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.StickerSetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaskCoords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaskCoords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaskCoords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Zoom != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Zoom))))
		i--
		dAtA[i] = 0x21
	}
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x19
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x11
	}
	if m.N != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.N))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Attributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stickers {
		i--
		if m.Stickers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Waveform) > 0 {
		i -= len(m.Waveform)
		copy(dAtA[i:], m.Waveform)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Waveform)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Performer) > 0 {
		i -= len(m.Performer)
		copy(dAtA[i:], m.Performer)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Performer)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.AudioDuration != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AudioDuration))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Voice {
		i--
		if m.Voice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.VideoH != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.VideoH))
		i--
		dAtA[i] = 0x78
	}
	if m.VideoW != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.VideoW))
		i--
		dAtA[i] = 0x70
	}
	if m.VideoDuration != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.VideoDuration))
		i--
		dAtA[i] = 0x68
	}
	if m.SupportsStreaming {
		i--
		if m.SupportsStreaming {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.RoundMessage {
		i--
		if m.RoundMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.MaskCoords != nil {
		{
			size, err := m.MaskCoords.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSfs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Alt) > 0 {
		i -= len(m.Alt)
		copy(dAtA[i:], m.Alt)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Alt)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Mask {
		i--
		if m.Mask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.StickerData != nil {
		{
			size, err := m.StickerData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSfs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StickerSetType != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.StickerSetType))
		i--
		dAtA[i] = 0x30
	}
	if m.ImageH != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.ImageH))
		i--
		dAtA[i] = 0x20
	}
	if m.ImageW != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.ImageW))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x12
	}
	if m.AttributesType != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AttributesType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocumentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x48
	}
	if m.Date != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSfs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.VideoStartTs != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VideoStartTs))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.Thumbs) > 0 {
		for iNdEx := len(m.Thumbs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Thumbs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSfs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Size_ != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LocalId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x10
	}
	if m.VolumeId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.VolumeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocumentInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSfs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mtime != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.FileType != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VideoStartTs != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VideoStartTs))))
		i--
		dAtA[i] = 0x29
	}
	if m.Size_ != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhotoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhotoInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhotoInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x62
	}
	if m.AccessHash != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PhotoSize) > 0 {
		for iNdEx := len(m.PhotoSize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PhotoSize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSfs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.FileType != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x48
	}
	if m.Weight != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x40
	}
	if m.Height != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x38
	}
	if m.Size_ != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x30
	}
	if m.Date != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Md5Sum) > 0 {
		i -= len(m.Md5Sum)
		copy(dAtA[i:], m.Md5Sum)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Md5Sum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LocalId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x10
	}
	if m.VolumeId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.VolumeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PhotoInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhotoInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhotoInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSfs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x10
	}
	if m.FileId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDocumentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocumentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocumentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FileId) > 0 {
		dAtA4 := make([]byte, len(m.FileId)*10)
		var j3 int
		for _, num1 := range m.FileId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSfs(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThumbSize) > 0 {
		i -= len(m.ThumbSize)
		copy(dAtA[i:], m.ThumbSize)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.ThumbSize)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Offset != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.LocalId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x18
	}
	if m.VolumeId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.VolumeId))
		i--
		dAtA[i] = 0x10
	}
	if m.FileType != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.LocalId))
		i--
		dAtA[i] = 0x10
	}
	if m.PhotoId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.PhotoId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPhotoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPhotoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPhotoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhotoIdList) > 0 {
		dAtA6 := make([]byte, len(m.PhotoIdList)*10)
		var j5 int
		for _, num1 := range m.PhotoIdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintSfs(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadedDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadedDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadedDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VideoStartTs != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VideoStartTs))))
		i--
		dAtA[i] = 0x51
	}
	if m.TtlSecond != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.TtlSecond))
		i--
		dAtA[i] = 0x48
	}
	if m.Video {
		i--
		if m.Video {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Thumb != nil {
		{
			size, err := m.Thumb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSfs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSfs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Parts != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Parts))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadedDocument_Thumb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadedDocument_Thumb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadedDocument_Thumb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sticker) > 0 {
		dAtA9 := make([]byte, len(m.Sticker)*10)
		var j8 int
		for _, num1 := range m.Sticker {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintSfs(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if m.Parts != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Parts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x12
	}
	if m.FileId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stickers) > 0 {
		dAtA11 := make([]byte, len(m.Stickers)*10)
		var j10 int
		for _, num1 := range m.Stickers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintSfs(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x2a
	}
	if m.Parts != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.Parts))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadSaveMultiPartFileData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadSaveMultiPartFileData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadSaveMultiPartFileData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FileTotalParts != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileTotalParts))
		i--
		dAtA[i] = 0x20
	}
	if m.FilePart != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FilePart))
		i--
		dAtA[i] = 0x18
	}
	if m.FileId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadSavePartFileData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadSavePartFileData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadSavePartFileData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSfs(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x22
	}
	if m.FilePart != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FilePart))
		i--
		dAtA[i] = 0x18
	}
	if m.FileId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSfs(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSfs(dAtA []byte, offset int, v uint64) int {
	offset -= sovSfs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StickerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StickerSetType != 0 {
		n += 1 + sovSfs(uint64(m.StickerSetType))
	}
	if m.StickerSetId != 0 {
		n += 1 + sovSfs(uint64(m.StickerSetId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovSfs(uint64(m.AccessHash))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	return n
}

func (m *MaskCoords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.N != 0 {
		n += 1 + sovSfs(uint64(m.N))
	}
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Zoom != 0 {
		n += 9
	}
	return n
}

func (m *Attributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttributesType != 0 {
		n += 1 + sovSfs(uint64(m.AttributesType))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.ImageW != 0 {
		n += 1 + sovSfs(uint64(m.ImageW))
	}
	if m.ImageH != 0 {
		n += 1 + sovSfs(uint64(m.ImageH))
	}
	if m.StickerSetType != 0 {
		n += 1 + sovSfs(uint64(m.StickerSetType))
	}
	if m.StickerData != nil {
		l = m.StickerData.Size()
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Mask {
		n += 2
	}
	l = len(m.Alt)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.MaskCoords != nil {
		l = m.MaskCoords.Size()
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.RoundMessage {
		n += 2
	}
	if m.SupportsStreaming {
		n += 2
	}
	if m.VideoDuration != 0 {
		n += 1 + sovSfs(uint64(m.VideoDuration))
	}
	if m.VideoW != 0 {
		n += 1 + sovSfs(uint64(m.VideoW))
	}
	if m.VideoH != 0 {
		n += 1 + sovSfs(uint64(m.VideoH))
	}
	if m.Voice {
		n += 3
	}
	if m.AudioDuration != 0 {
		n += 2 + sovSfs(uint64(m.AudioDuration))
	}
	l = len(m.Title)
	if l > 0 {
		n += 2 + l + sovSfs(uint64(l))
	}
	l = len(m.Performer)
	if l > 0 {
		n += 2 + l + sovSfs(uint64(l))
	}
	l = len(m.Waveform)
	if l > 0 {
		n += 2 + l + sovSfs(uint64(l))
	}
	if m.Stickers {
		n += 3
	}
	return n
}

func (m *DocumentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeId != 0 {
		n += 1 + sovSfs(uint64(m.VolumeId))
	}
	if m.LocalId != 0 {
		n += 1 + sovSfs(uint64(m.LocalId))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovSfs(uint64(m.Size_))
	}
	if len(m.Thumbs) > 0 {
		for _, e := range m.Thumbs {
			l = e.Size()
			n += 1 + l + sovSfs(uint64(l))
		}
	}
	if m.VideoStartTs != 0 {
		n += 9
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovSfs(uint64(l))
		}
	}
	if m.Date != 0 {
		n += 1 + sovSfs(uint64(m.Date))
	}
	if m.AccessHash != 0 {
		n += 1 + sovSfs(uint64(m.AccessHash))
	}
	return n
}

func (m *DocumentInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovSfs(uint64(l))
		}
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileType != 0 {
		n += 1 + sovSfs(uint64(m.FileType))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Mtime != 0 {
		n += 1 + sovSfs(uint64(m.Mtime))
	}
	return n
}

func (m *VideoSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovSfs(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovSfs(uint64(m.Height))
	}
	if m.Size_ != 0 {
		n += 1 + sovSfs(uint64(m.Size_))
	}
	if m.VideoStartTs != 0 {
		n += 9
	}
	return n
}

func (m *PhotoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VolumeId != 0 {
		n += 1 + sovSfs(uint64(m.VolumeId))
	}
	if m.LocalId != 0 {
		n += 1 + sovSfs(uint64(m.LocalId))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	l = len(m.Md5Sum)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovSfs(uint64(m.Date))
	}
	if m.Size_ != 0 {
		n += 1 + sovSfs(uint64(m.Size_))
	}
	if m.Height != 0 {
		n += 1 + sovSfs(uint64(m.Height))
	}
	if m.Weight != 0 {
		n += 1 + sovSfs(uint64(m.Weight))
	}
	if m.FileType != 0 {
		n += 1 + sovSfs(uint64(m.FileType))
	}
	if len(m.PhotoSize) > 0 {
		for _, e := range m.PhotoSize {
			l = e.Size()
			n += 1 + l + sovSfs(uint64(l))
		}
	}
	if m.AccessHash != 0 {
		n += 1 + sovSfs(uint64(m.AccessHash))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	return n
}

func (m *PhotoInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovSfs(uint64(l))
		}
	}
	return n
}

func (m *GetDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovSfs(uint64(m.FileId))
	}
	if m.LocalId != 0 {
		n += 1 + sovSfs(uint64(m.LocalId))
	}
	return n
}

func (m *GetDocumentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FileId) > 0 {
		l = 0
		for _, e := range m.FileId {
			l += sovSfs(uint64(e))
		}
		n += 1 + sovSfs(uint64(l)) + l
	}
	return n
}

func (m *GetFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileType != 0 {
		n += 1 + sovSfs(uint64(m.FileType))
	}
	if m.VolumeId != 0 {
		n += 1 + sovSfs(uint64(m.VolumeId))
	}
	if m.LocalId != 0 {
		n += 1 + sovSfs(uint64(m.LocalId))
	}
	if m.Offset != 0 {
		n += 1 + sovSfs(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSfs(uint64(m.Limit))
	}
	l = len(m.ThumbSize)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	return n
}

func (m *GetPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhotoId != 0 {
		n += 1 + sovSfs(uint64(m.PhotoId))
	}
	if m.LocalId != 0 {
		n += 1 + sovSfs(uint64(m.LocalId))
	}
	return n
}

func (m *GetPhotoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PhotoIdList) > 0 {
		l = 0
		for _, e := range m.PhotoIdList {
			l += sovSfs(uint64(e))
		}
		n += 1 + sovSfs(uint64(l)) + l
	}
	return n
}

func (m *UploadedDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovSfs(uint64(m.AuthKeyId))
	}
	if m.FileId != 0 {
		n += 1 + sovSfs(uint64(m.FileId))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Parts != 0 {
		n += 1 + sovSfs(uint64(m.Parts))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovSfs(uint64(l))
		}
	}
	if m.Thumb != nil {
		l = m.Thumb.Size()
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Video {
		n += 2
	}
	if m.TtlSecond != 0 {
		n += 1 + sovSfs(uint64(m.TtlSecond))
	}
	if m.VideoStartTs != 0 {
		n += 9
	}
	return n
}

func (m *UploadedDocument_Thumb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovSfs(uint64(m.FileId))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Parts != 0 {
		n += 1 + sovSfs(uint64(m.Parts))
	}
	if len(m.Sticker) > 0 {
		l = 0
		for _, e := range m.Sticker {
			l += sovSfs(uint64(e))
		}
		n += 1 + sovSfs(uint64(l)) + l
	}
	return n
}

func (m *UploadPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovSfs(uint64(m.AuthKeyId))
	}
	if m.FileId != 0 {
		n += 1 + sovSfs(uint64(m.FileId))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	if m.Parts != 0 {
		n += 1 + sovSfs(uint64(m.Parts))
	}
	if len(m.Stickers) > 0 {
		l = 0
		for _, e := range m.Stickers {
			l += sovSfs(uint64(e))
		}
		n += 1 + sovSfs(uint64(l)) + l
	}
	return n
}

func (m *UploadSaveMultiPartFileData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovSfs(uint64(m.AuthKeyId))
	}
	if m.FileId != 0 {
		n += 1 + sovSfs(uint64(m.FileId))
	}
	if m.FilePart != 0 {
		n += 1 + sovSfs(uint64(m.FilePart))
	}
	if m.FileTotalParts != 0 {
		n += 1 + sovSfs(uint64(m.FileTotalParts))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	return n
}

func (m *UploadSavePartFileData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovSfs(uint64(m.AuthKeyId))
	}
	if m.FileId != 0 {
		n += 1 + sovSfs(uint64(m.FileId))
	}
	if m.FilePart != 0 {
		n += 1 + sovSfs(uint64(m.FilePart))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSfs(uint64(l))
	}
	return n
}

func sovSfs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSfs(x uint64) (n int) {
	return sovSfs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetType", wireType)
			}
			m.StickerSetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerSetType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetId", wireType)
			}
			m.StickerSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerSetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaskCoords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaskCoords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaskCoords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zoom", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Zoom = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributesType", wireType)
			}
			m.AttributesType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttributesType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageW", wireType)
			}
			m.ImageW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageW |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageH", wireType)
			}
			m.ImageH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImageH |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerSetType", wireType)
			}
			m.StickerSetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerSetType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerData == nil {
				m.StickerData = &StickerSet{}
			}
			if err := m.StickerData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mask = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaskCoords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaskCoords == nil {
				m.MaskCoords = &MaskCoords{}
			}
			if err := m.MaskCoords.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundMessage = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsStreaming", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsStreaming = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoDuration", wireType)
			}
			m.VideoDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoW", wireType)
			}
			m.VideoW = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoW |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoH", wireType)
			}
			m.VideoH = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoH |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Voice = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioDuration", wireType)
			}
			m.AudioDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AudioDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Performer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Performer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waveform", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Waveform = append(m.Waveform[:0], dAtA[iNdEx:postIndex]...)
			if m.Waveform == nil {
				m.Waveform = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stickers = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			m.VolumeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolumeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbs = append(m.Thumbs, &PhotoInfo{})
			if err := m.Thumbs[len(m.Thumbs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoStartTs", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VideoStartTs = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attributes{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &DocumentInfo{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoStartTs", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VideoStartTs = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhotoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			m.VolumeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolumeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhotoSize = append(m.PhotoSize, &PhotoInfo{})
			if err := m.PhotoSize[len(m.PhotoSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhotoInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &PhotoInfo{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDocumentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDocumentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDocumentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FileId = append(m.FileId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSfs
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSfs
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FileId) == 0 {
					m.FileId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FileId = append(m.FileId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= GetFile_FileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			m.VolumeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolumeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoId", wireType)
			}
			m.PhotoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhotoId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalId", wireType)
			}
			m.LocalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPhotoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPhotoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPhotoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PhotoIdList = append(m.PhotoIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSfs
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSfs
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PhotoIdList) == 0 {
					m.PhotoIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PhotoIdList = append(m.PhotoIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadedDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadedDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadedDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			m.Parts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Attributes{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thumb == nil {
				m.Thumb = &UploadedDocument_Thumb{}
			}
			if err := m.Thumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Video = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlSecond", wireType)
			}
			m.TtlSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlSecond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoStartTs", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VideoStartTs = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadedDocument_Thumb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thumb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thumb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			m.Parts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sticker = append(m.Sticker, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSfs
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSfs
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sticker) == 0 {
					m.Sticker = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sticker = append(m.Sticker, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sticker", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			m.Parts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stickers = append(m.Stickers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSfs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSfs
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSfs
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stickers) == 0 {
					m.Stickers = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSfs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stickers = append(m.Stickers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadSaveMultiPartFileData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadSaveMultiPartFileData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadSaveMultiPartFileData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePart", wireType)
			}
			m.FilePart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilePart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTotalParts", wireType)
			}
			m.FileTotalParts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileTotalParts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadSavePartFileData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadSavePartFileData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadSavePartFileData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePart", wireType)
			}
			m.FilePart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilePart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSfs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSfs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSfs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSfs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSfs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSfs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSfs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSfs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSfs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSfs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSfs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSfs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSfs = fmt.Errorf("proto: unexpected end of group")
)
