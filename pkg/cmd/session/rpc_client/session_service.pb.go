// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: session_service.proto

package rpc_client

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	rpc "novachat_engine/pkg/rpc/rpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("session_service.proto", fileDescriptor_ff25770e79caedc0) }

var fileDescriptor_ff25770e79caedc0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4e, 0x2d, 0x2e,
	0xce, 0xcc, 0xcf, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x2a, 0x2a, 0x48, 0x8e, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x91, 0xd2, 0x4d,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07,
	0x2b, 0x49, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0xa2, 0x55, 0x4a, 0x32, 0x3d, 0x3f,
	0x3f, 0x3d, 0x27, 0x15, 0xa1, 0x2a, 0x31, 0xaf, 0x12, 0x2a, 0x25, 0x5a, 0x90, 0x9d, 0xae, 0x5f,
	0x54, 0x90, 0x0c, 0xc3, 0x50, 0x61, 0x5e, 0xa8, 0x1b, 0x20, 0x5c, 0xa3, 0xc3, 0x8c, 0x5c, 0x7c,
	0xc1, 0x10, 0x91, 0x60, 0x88, 0xa3, 0x84, 0xcc, 0xb9, 0x58, 0x9d, 0x73, 0xf2, 0x8b, 0x53, 0x85,
	0xc4, 0xf4, 0x10, 0x0e, 0xd3, 0x03, 0x0b, 0xb9, 0x96, 0x81, 0xdc, 0x28, 0xa2, 0x07, 0xb1, 0x55,
	0x0f, 0x66, 0xab, 0x9e, 0x63, 0x5e, 0xa5, 0x12, 0x83, 0x90, 0x31, 0x17, 0x77, 0x50, 0x6a, 0x72,
	0x6a, 0x66, 0x59, 0xaa, 0x4b, 0x62, 0x49, 0xa2, 0x10, 0x0f, 0x48, 0xbb, 0x5e, 0x50, 0x41, 0x32,
	0x88, 0x87, 0x53, 0x93, 0x33, 0x17, 0x77, 0x40, 0x69, 0x71, 0x46, 0x68, 0x41, 0x4a, 0x62, 0x49,
	0x6a, 0xb1, 0x90, 0x0c, 0xb2, 0x9d, 0x48, 0x12, 0x78, 0x6d, 0x76, 0x92, 0xf9, 0xf0, 0x50, 0x8e,
	0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x8c, 0x42, 0x0a,
	0xd3, 0x24, 0x36, 0xb0, 0x6a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x93, 0x80, 0x9e,
	0x7f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionServiceClient interface {
	Close(ctx context.Context, in *CloseEvent, opts ...grpc.CallOption) (*types.Any, error)
	ReceiveData(ctx context.Context, in *rpc.RpcData, opts ...grpc.CallOption) (*types.Any, error)
	PushUpdates(ctx context.Context, in *PushUpdatesEvent, opts ...grpc.CallOption) (*types.Any, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) Close(ctx context.Context, in *CloseEvent, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.SessionService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ReceiveData(ctx context.Context, in *rpc.RpcData, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.SessionService/ReceiveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) PushUpdates(ctx context.Context, in *PushUpdatesEvent, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.SessionService/PushUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
type SessionServiceServer interface {
	Close(context.Context, *CloseEvent) (*types.Any, error)
	ReceiveData(context.Context, *rpc.RpcData) (*types.Any, error)
	PushUpdates(context.Context, *PushUpdatesEvent) (*types.Any, error)
}

// UnimplementedSessionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (*UnimplementedSessionServiceServer) Close(ctx context.Context, req *CloseEvent) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedSessionServiceServer) ReceiveData(ctx context.Context, req *rpc.RpcData) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveData not implemented")
}
func (*UnimplementedSessionServiceServer) PushUpdates(ctx context.Context, req *PushUpdatesEvent) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUpdates not implemented")
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.SessionService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Close(ctx, req.(*CloseEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ReceiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.RpcData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ReceiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.SessionService/ReceiveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ReceiveData(ctx, req.(*rpc.RpcData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_PushUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushUpdatesEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).PushUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.SessionService/PushUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).PushUpdates(ctx, req.(*PushUpdatesEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_client.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Close",
			Handler:    _SessionService_Close_Handler,
		},
		{
			MethodName: "ReceiveData",
			Handler:    _SessionService_ReceiveData_Handler,
		},
		{
			MethodName: "PushUpdates",
			Handler:    _SessionService_PushUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session_service.proto",
}

var SessionService_serviceDesc = map[string][]interface{}{
	"CloseEvent": {
		"/rpc_client.SessionService/Close",
		func() interface{} { return new(types.Any) },
		"Close",
	},
	"rpc.RpcData": {
		"/rpc_client.SessionService/ReceiveData",
		func() interface{} { return new(types.Any) },
		"ReceiveData",
	},
	"PushUpdatesEvent": {
		"/rpc_client.SessionService/PushUpdates",
		func() interface{} { return new(types.Any) },
		"PushUpdates",
	},
}
