// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: session.proto

package rpc_client

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransformData struct {
	AuthKeyId   int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SrcServer   string `protobuf:"bytes,2,opt,name=src_server,json=srcServer,proto3" json:"src_server,omitempty"`
	Ip          string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	ConnId      uint64 `protobuf:"varint,4,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	Buf         []byte `protobuf:"bytes,5,opt,name=buf,proto3" json:"buf,omitempty"`
	ValidUntil  int32  `protobuf:"varint,6,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	ExpiresIn   int32  `protobuf:"varint,7,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	ValidSince  int32  `protobuf:"varint,8,opt,name=valid_since,json=validSince,proto3" json:"valid_since,omitempty"`
	Layer       int32  `protobuf:"varint,9,opt,name=layer,proto3" json:"layer,omitempty"`
	TempAuthKey int32  `protobuf:"varint,10,opt,name=temp_auth_key,json=tempAuthKey,proto3" json:"temp_auth_key,omitempty"`
	MsgId       int64  `protobuf:"varint,11,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (m *TransformData) Reset()         { *m = TransformData{} }
func (m *TransformData) String() string { return proto.CompactTextString(m) }
func (*TransformData) ProtoMessage()    {}
func (*TransformData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{0}
}
func (m *TransformData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransformData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransformData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransformData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformData.Merge(m, src)
}
func (m *TransformData) XXX_Size() int {
	return m.Size()
}
func (m *TransformData) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformData.DiscardUnknown(m)
}

var xxx_messageInfo_TransformData proto.InternalMessageInfo

func (m *TransformData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TransformData) GetSrcServer() string {
	if m != nil {
		return m.SrcServer
	}
	return ""
}

func (m *TransformData) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *TransformData) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *TransformData) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

func (m *TransformData) GetValidUntil() int32 {
	if m != nil {
		return m.ValidUntil
	}
	return 0
}

func (m *TransformData) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *TransformData) GetValidSince() int32 {
	if m != nil {
		return m.ValidSince
	}
	return 0
}

func (m *TransformData) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *TransformData) GetTempAuthKey() int32 {
	if m != nil {
		return m.TempAuthKey
	}
	return 0
}

func (m *TransformData) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type CloseEvent struct {
	AuthKeyId int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	ConnId    uint64 `protobuf:"varint,2,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
}

func (m *CloseEvent) Reset()         { *m = CloseEvent{} }
func (m *CloseEvent) String() string { return proto.CompactTextString(m) }
func (*CloseEvent) ProtoMessage()    {}
func (*CloseEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{1}
}
func (m *CloseEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseEvent.Merge(m, src)
}
func (m *CloseEvent) XXX_Size() int {
	return m.Size()
}
func (m *CloseEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CloseEvent proto.InternalMessageInfo

func (m *CloseEvent) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *CloseEvent) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

type PushUpdatesEvent struct {
	AuthKeyId  int64      `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId  []int64    `protobuf:"varint,2,rep,packed,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Updates    *types.Any `protobuf:"bytes,3,opt,name=updates,proto3" json:"updates,omitempty"`
	ServerPeer string     `protobuf:"bytes,4,opt,name=server_peer,json=serverPeer,proto3" json:"server_peer,omitempty"`
}

func (m *PushUpdatesEvent) Reset()         { *m = PushUpdatesEvent{} }
func (m *PushUpdatesEvent) String() string { return proto.CompactTextString(m) }
func (*PushUpdatesEvent) ProtoMessage()    {}
func (*PushUpdatesEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{2}
}
func (m *PushUpdatesEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushUpdatesEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushUpdatesEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushUpdatesEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushUpdatesEvent.Merge(m, src)
}
func (m *PushUpdatesEvent) XXX_Size() int {
	return m.Size()
}
func (m *PushUpdatesEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PushUpdatesEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PushUpdatesEvent proto.InternalMessageInfo

func (m *PushUpdatesEvent) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *PushUpdatesEvent) GetSessionId() []int64 {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *PushUpdatesEvent) GetUpdates() *types.Any {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *PushUpdatesEvent) GetServerPeer() string {
	if m != nil {
		return m.ServerPeer
	}
	return ""
}

func init() {
	proto.RegisterType((*TransformData)(nil), "rpc_client.TransformData")
	proto.RegisterType((*CloseEvent)(nil), "rpc_client.CloseEvent")
	proto.RegisterType((*PushUpdatesEvent)(nil), "rpc_client.PushUpdatesEvent")
}

func init() { proto.RegisterFile("session.proto", fileDescriptor_3a6be1b361fa6f14) }

var fileDescriptor_3a6be1b361fa6f14 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0xc9, 0x25, 0xc1, 0xe3, 0x0b, 0x3a, 0xad, 0x0e, 0x61, 0x4e, 0xe0, 0x58, 0xa9,
	0xdc, 0xe0, 0x93, 0xa0, 0xa3, 0x3b, 0xfe, 0x14, 0x16, 0xcd, 0xc9, 0xe1, 0x1a, 0x1a, 0xcb, 0xb1,
	0x27, 0xce, 0x0a, 0x7b, 0xd7, 0xda, 0xb5, 0x23, 0xfc, 0x16, 0x94, 0xb4, 0xdc, 0x13, 0xf0, 0x18,
	0xd0, 0xdd, 0x23, 0x40, 0x9e, 0x80, 0x47, 0x40, 0xbb, 0x7b, 0xd1, 0x05, 0x1a, 0xe8, 0x3c, 0xbf,
	0x99, 0xf9, 0xd6, 0xf3, 0xcd, 0xc0, 0x4c, 0xa1, 0x52, 0x4c, 0xf0, 0xa8, 0x91, 0xa2, 0x15, 0x14,
	0x64, 0x93, 0xa7, 0x79, 0xc5, 0x90, 0xb7, 0x67, 0x4f, 0x4b, 0xd6, 0x6e, 0xba, 0x55, 0x94, 0x8b,
	0xfa, 0xbc, 0x14, 0xa5, 0x38, 0x37, 0x25, 0xab, 0x6e, 0x6d, 0x22, 0x13, 0x98, 0x2f, 0xdb, 0x7a,
	0xf6, 0xa8, 0x14, 0xa2, 0xac, 0xf0, 0xae, 0x2a, 0xe3, 0xbd, 0x4d, 0x2d, 0xbe, 0x0f, 0x61, 0xf6,
	0x4e, 0x66, 0x5c, 0xad, 0x85, 0xac, 0x5f, 0x67, 0x6d, 0x46, 0x7d, 0x70, 0xb3, 0xae, 0xdd, 0xa4,
	0x1f, 0xb0, 0x4f, 0x59, 0xe1, 0x91, 0x80, 0x84, 0xa3, 0xc4, 0xd1, 0xe8, 0x2d, 0xf6, 0x71, 0x41,
	0x9f, 0x00, 0x28, 0x99, 0xa7, 0x0a, 0xe5, 0x16, 0xa5, 0x37, 0x0c, 0x48, 0xe8, 0x24, 0x8e, 0x92,
	0xf9, 0xd2, 0x00, 0x7a, 0x1f, 0x86, 0xac, 0xf1, 0x46, 0x06, 0x0f, 0x59, 0x43, 0x1f, 0xc2, 0x34,
	0x17, 0x9c, 0x6b, 0xa9, 0xa3, 0x80, 0x84, 0x47, 0xc9, 0x44, 0x87, 0x71, 0x41, 0x4f, 0x60, 0xb4,
	0xea, 0xd6, 0xde, 0x38, 0x20, 0xe1, 0x71, 0xa2, 0x3f, 0xe9, 0x1c, 0xdc, 0x6d, 0x56, 0xb1, 0x22,
	0xed, 0x78, 0xcb, 0x2a, 0x6f, 0x12, 0x90, 0x70, 0x9c, 0x80, 0x41, 0x57, 0x9a, 0xe8, 0xa7, 0xf1,
	0x63, 0xc3, 0x24, 0xaa, 0x94, 0x71, 0x6f, 0x6a, 0xf2, 0xce, 0x2d, 0x89, 0xf9, 0x5d, 0xbf, 0x62,
	0x3c, 0x47, 0xef, 0xde, 0x41, 0xff, 0x52, 0x13, 0x7a, 0x0a, 0xe3, 0x2a, 0xeb, 0x51, 0x7a, 0x8e,
	0x49, 0xd9, 0x80, 0x2e, 0x60, 0xd6, 0x62, 0xdd, 0xa4, 0xfb, 0xa9, 0x3d, 0x30, 0x59, 0x57, 0xc3,
	0x0b, 0x3b, 0x36, 0x7d, 0x00, 0x93, 0x5a, 0x95, 0x7a, 0x08, 0xd7, 0xf8, 0x31, 0xae, 0x55, 0x19,
	0x17, 0x2f, 0x8e, 0x6f, 0xbe, 0xcc, 0x07, 0x9f, 0xae, 0xe7, 0x83, 0xcf, 0xd7, 0xf3, 0xc1, 0x62,
	0x09, 0xf0, 0xaa, 0x12, 0x0a, 0xdf, 0x6c, 0x91, 0xb7, 0xff, 0xf4, 0xf1, 0xc0, 0x98, 0xe1, 0xa1,
	0x31, 0x7f, 0x89, 0x7e, 0x25, 0x70, 0x72, 0xd9, 0xa9, 0xcd, 0x55, 0x53, 0x64, 0x2d, 0xaa, 0xff,
	0xd3, 0xd6, 0x3b, 0xb2, 0xc7, 0x63, 0xe5, 0x47, 0x3a, 0x7d, 0x4b, 0xe2, 0x82, 0x46, 0x30, 0xed,
	0xac, 0x9c, 0x59, 0x94, 0xfb, 0xec, 0x34, 0xb2, 0x17, 0x12, 0xed, 0x2f, 0x24, 0xba, 0xe0, 0x7d,
	0xb2, 0x2f, 0xd2, 0xc6, 0xda, 0x75, 0xa7, 0x0d, 0xa2, 0x34, 0x7b, 0x74, 0x12, 0xb0, 0xe8, 0x12,
	0x51, 0xfe, 0xf9, 0xcb, 0x2f, 0x1f, 0xff, 0xfa, 0xe9, 0x93, 0x6f, 0x3b, 0x9f, 0xdc, 0xec, 0x7c,
	0xf2, 0x63, 0xe7, 0x93, 0xf7, 0x07, 0xb7, 0xbb, 0x9a, 0x98, 0x37, 0x9e, 0xff, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0x5d, 0x5b, 0x26, 0xdf, 0x02, 0x00, 0x00,
}

func (this *TransformData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&rpc_client.TransformData{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SrcServer: "+fmt.Sprintf("%#v", this.SrcServer)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "Buf: "+fmt.Sprintf("%#v", this.Buf)+",\n")
	s = append(s, "ValidUntil: "+fmt.Sprintf("%#v", this.ValidUntil)+",\n")
	s = append(s, "ExpiresIn: "+fmt.Sprintf("%#v", this.ExpiresIn)+",\n")
	s = append(s, "ValidSince: "+fmt.Sprintf("%#v", this.ValidSince)+",\n")
	s = append(s, "Layer: "+fmt.Sprintf("%#v", this.Layer)+",\n")
	s = append(s, "TempAuthKey: "+fmt.Sprintf("%#v", this.TempAuthKey)+",\n")
	s = append(s, "MsgId: "+fmt.Sprintf("%#v", this.MsgId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rpc_client.CloseEvent{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushUpdatesEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rpc_client.PushUpdatesEvent{")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	s = append(s, "ServerPeer: "+fmt.Sprintf("%#v", this.ServerPeer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSession(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TransformData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransformData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransformData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x58
	}
	if m.TempAuthKey != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.TempAuthKey))
		i--
		dAtA[i] = 0x50
	}
	if m.Layer != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x48
	}
	if m.ValidSince != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.ValidSince))
		i--
		dAtA[i] = 0x40
	}
	if m.ExpiresIn != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.ExpiresIn))
		i--
		dAtA[i] = 0x38
	}
	if m.ValidUntil != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.ValidUntil))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Buf) > 0 {
		i -= len(m.Buf)
		copy(dAtA[i:], m.Buf)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Buf)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ConnId != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.ConnId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcServer) > 0 {
		i -= len(m.SrcServer)
		copy(dAtA[i:], m.SrcServer)
		i = encodeVarintSession(dAtA, i, uint64(len(m.SrcServer)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.ConnId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushUpdatesEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushUpdatesEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushUpdatesEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerPeer) > 0 {
		i -= len(m.ServerPeer)
		copy(dAtA[i:], m.ServerPeer)
		i = encodeVarintSession(dAtA, i, uint64(len(m.ServerPeer)))
		i--
		dAtA[i] = 0x22
	}
	if m.Updates != nil {
		{
			size, err := m.Updates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		dAtA3 := make([]byte, len(m.SessionId)*10)
		var j2 int
		for _, num1 := range m.SessionId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintSession(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransformData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovSession(uint64(m.AuthKeyId))
	}
	l = len(m.SrcServer)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ConnId != 0 {
		n += 1 + sovSession(uint64(m.ConnId))
	}
	l = len(m.Buf)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ValidUntil != 0 {
		n += 1 + sovSession(uint64(m.ValidUntil))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovSession(uint64(m.ExpiresIn))
	}
	if m.ValidSince != 0 {
		n += 1 + sovSession(uint64(m.ValidSince))
	}
	if m.Layer != 0 {
		n += 1 + sovSession(uint64(m.Layer))
	}
	if m.TempAuthKey != 0 {
		n += 1 + sovSession(uint64(m.TempAuthKey))
	}
	if m.MsgId != 0 {
		n += 1 + sovSession(uint64(m.MsgId))
	}
	return n
}

func (m *CloseEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovSession(uint64(m.AuthKeyId))
	}
	if m.ConnId != 0 {
		n += 1 + sovSession(uint64(m.ConnId))
	}
	return n
}

func (m *PushUpdatesEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovSession(uint64(m.AuthKeyId))
	}
	if len(m.SessionId) > 0 {
		l = 0
		for _, e := range m.SessionId {
			l += sovSession(uint64(e))
		}
		n += 1 + sovSession(uint64(l)) + l
	}
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.ServerPeer)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func sovSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSession(x uint64) (n int) {
	return sovSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransformData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransformData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransformData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buf", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buf = append(m.Buf[:0], dAtA[iNdEx:postIndex]...)
			if m.Buf == nil {
				m.Buf = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			m.ValidUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidUntil |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidSince", wireType)
			}
			m.ValidSince = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidSince |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempAuthKey", wireType)
			}
			m.TempAuthKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempAuthKey |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushUpdatesEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushUpdatesEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushUpdatesEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSession
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SessionId = append(m.SessionId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSession
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSession
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSession
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SessionId) == 0 {
					m.SessionId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSession
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SessionId = append(m.SessionId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &types.Any{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPeer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerPeer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSession = fmt.Errorf("proto: unexpected end of group")
)
