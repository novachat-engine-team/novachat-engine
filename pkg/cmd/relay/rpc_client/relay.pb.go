// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relay.proto

package rpc_client

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallConnections struct {
	EndpointId    int64                            `protobuf:"varint,1,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
	Connect       *CallConnections_Connect         `protobuf:"bytes,2,opt,name=connect,proto3" json:"connect,omitempty"`
	WebRTCConnect []*CallConnections_WebRTCConnect `protobuf:"bytes,3,rep,name=webRTC_connect,json=webRTCConnect,proto3" json:"webRTC_connect,omitempty"`
}

func (m *CallConnections) Reset()         { *m = CallConnections{} }
func (m *CallConnections) String() string { return proto.CompactTextString(m) }
func (*CallConnections) ProtoMessage()    {}
func (*CallConnections) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0}
}
func (m *CallConnections) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallConnections) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallConnections.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallConnections) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallConnections.Merge(m, src)
}
func (m *CallConnections) XXX_Size() int {
	return m.Size()
}
func (m *CallConnections) XXX_DiscardUnknown() {
	xxx_messageInfo_CallConnections.DiscardUnknown(m)
}

var xxx_messageInfo_CallConnections proto.InternalMessageInfo

func (m *CallConnections) GetEndpointId() int64 {
	if m != nil {
		return m.EndpointId
	}
	return 0
}

func (m *CallConnections) GetConnect() *CallConnections_Connect {
	if m != nil {
		return m.Connect
	}
	return nil
}

func (m *CallConnections) GetWebRTCConnect() []*CallConnections_WebRTCConnect {
	if m != nil {
		return m.WebRTCConnect
	}
	return nil
}

type CallConnections_Connect struct {
	PeerTag []byte `protobuf:"bytes,1,opt,name=peer_tag,json=peerTag,proto3" json:"peer_tag,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ipv6    string `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Port    int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *CallConnections_Connect) Reset()         { *m = CallConnections_Connect{} }
func (m *CallConnections_Connect) String() string { return proto.CompactTextString(m) }
func (*CallConnections_Connect) ProtoMessage()    {}
func (*CallConnections_Connect) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0, 0}
}
func (m *CallConnections_Connect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallConnections_Connect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallConnections_Connect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallConnections_Connect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallConnections_Connect.Merge(m, src)
}
func (m *CallConnections_Connect) XXX_Size() int {
	return m.Size()
}
func (m *CallConnections_Connect) XXX_DiscardUnknown() {
	xxx_messageInfo_CallConnections_Connect.DiscardUnknown(m)
}

var xxx_messageInfo_CallConnections_Connect proto.InternalMessageInfo

func (m *CallConnections_Connect) GetPeerTag() []byte {
	if m != nil {
		return m.PeerTag
	}
	return nil
}

func (m *CallConnections_Connect) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CallConnections_Connect) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *CallConnections_Connect) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type CallConnections_WebRTCConnect struct {
	Stun     bool   `protobuf:"varint,1,opt,name=stun,proto3" json:"stun,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ipv6     string `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *CallConnections_WebRTCConnect) Reset()         { *m = CallConnections_WebRTCConnect{} }
func (m *CallConnections_WebRTCConnect) String() string { return proto.CompactTextString(m) }
func (*CallConnections_WebRTCConnect) ProtoMessage()    {}
func (*CallConnections_WebRTCConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{0, 1}
}
func (m *CallConnections_WebRTCConnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallConnections_WebRTCConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallConnections_WebRTCConnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallConnections_WebRTCConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallConnections_WebRTCConnect.Merge(m, src)
}
func (m *CallConnections_WebRTCConnect) XXX_Size() int {
	return m.Size()
}
func (m *CallConnections_WebRTCConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_CallConnections_WebRTCConnect.DiscardUnknown(m)
}

var xxx_messageInfo_CallConnections_WebRTCConnect proto.InternalMessageInfo

func (m *CallConnections_WebRTCConnect) GetStun() bool {
	if m != nil {
		return m.Stun
	}
	return false
}

func (m *CallConnections_WebRTCConnect) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CallConnections_WebRTCConnect) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *CallConnections_WebRTCConnect) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CallConnections_WebRTCConnect) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CallConnections_WebRTCConnect) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreatePhoneCall struct {
	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AdminId       int64  `protobuf:"varint,2,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	ParticipantId int64  `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Version       string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *CreatePhoneCall) Reset()         { *m = CreatePhoneCall{} }
func (m *CreatePhoneCall) String() string { return proto.CompactTextString(m) }
func (*CreatePhoneCall) ProtoMessage()    {}
func (*CreatePhoneCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{1}
}
func (m *CreatePhoneCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePhoneCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePhoneCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePhoneCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePhoneCall.Merge(m, src)
}
func (m *CreatePhoneCall) XXX_Size() int {
	return m.Size()
}
func (m *CreatePhoneCall) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePhoneCall.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePhoneCall proto.InternalMessageInfo

func (m *CreatePhoneCall) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreatePhoneCall) GetAdminId() int64 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *CreatePhoneCall) GetParticipantId() int64 {
	if m != nil {
		return m.ParticipantId
	}
	return 0
}

func (m *CreatePhoneCall) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DiscardPhoneCall struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DiscardPhoneCall) Reset()         { *m = DiscardPhoneCall{} }
func (m *DiscardPhoneCall) String() string { return proto.CompactTextString(m) }
func (*DiscardPhoneCall) ProtoMessage()    {}
func (*DiscardPhoneCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f69a7d5a802d584, []int{2}
}
func (m *DiscardPhoneCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscardPhoneCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscardPhoneCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscardPhoneCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscardPhoneCall.Merge(m, src)
}
func (m *DiscardPhoneCall) XXX_Size() int {
	return m.Size()
}
func (m *DiscardPhoneCall) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscardPhoneCall.DiscardUnknown(m)
}

var xxx_messageInfo_DiscardPhoneCall proto.InternalMessageInfo

func (m *DiscardPhoneCall) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*CallConnections)(nil), "rpc_client.CallConnections")
	proto.RegisterType((*CallConnections_Connect)(nil), "rpc_client.CallConnections.Connect")
	proto.RegisterType((*CallConnections_WebRTCConnect)(nil), "rpc_client.CallConnections.WebRTCConnect")
	proto.RegisterType((*CreatePhoneCall)(nil), "rpc_client.CreatePhoneCall")
	proto.RegisterType((*DiscardPhoneCall)(nil), "rpc_client.DiscardPhoneCall")
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor_9f69a7d5a802d584) }

var fileDescriptor_9f69a7d5a802d584 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x8d, 0x77, 0xdb, 0x6e, 0x3a, 0x69, 0x52, 0xe4, 0xd3, 0x12, 0xa1, 0x24, 0x2a, 0x42, 0x0a,
	0x07, 0xb6, 0xa8, 0x48, 0x1c, 0x90, 0xb8, 0x10, 0x2e, 0xb9, 0x55, 0x56, 0x25, 0x24, 0x2e, 0x91,
	0xb3, 0x36, 0x5b, 0xa3, 0x8d, 0x6d, 0x79, 0xbd, 0x8d, 0xf8, 0x06, 0x2e, 0x1c, 0xb9, 0xb6, 0x5f,
	0xc3, 0xb1, 0x9f, 0x40, 0xf3, 0x05, 0x7c, 0x02, 0xda, 0xd9, 0x2e, 0x64, 0x23, 0xc1, 0xa1, 0xb7,
	0xf7, 0x9e, 0xe7, 0x8d, 0x9f, 0x3d, 0x03, 0x3d, 0x27, 0x73, 0xfe, 0x25, 0xb1, 0xce, 0x78, 0x43,
	0xc1, 0xd9, 0x74, 0x91, 0xe6, 0x4a, 0x6a, 0x3f, 0x7c, 0x91, 0x29, 0x7f, 0x59, 0x2e, 0x93, 0xd4,
	0xac, 0x4e, 0x33, 0x93, 0x99, 0x53, 0x2c, 0x59, 0x96, 0x9f, 0x90, 0x21, 0x41, 0x54, 0x5b, 0x4f,
	0xee, 0x42, 0x38, 0x9e, 0xf1, 0x3c, 0x9f, 0x19, 0xad, 0x65, 0xea, 0x95, 0xd1, 0x05, 0x1d, 0x43,
	0x4f, 0x6a, 0x61, 0x8d, 0xd2, 0x7e, 0xa1, 0x44, 0x4c, 0x26, 0x64, 0x1a, 0x32, 0x68, 0xa4, 0xb9,
	0xa0, 0x6f, 0x21, 0x4a, 0xeb, 0xfa, 0x38, 0x98, 0x90, 0x69, 0xef, 0xec, 0x69, 0xf2, 0x37, 0x41,
	0xb2, 0xd3, 0x2e, 0xb9, 0xc7, 0xac, 0xf1, 0xd0, 0x73, 0x18, 0xac, 0xe5, 0x92, 0x5d, 0xcc, 0x16,
	0x4d, 0x97, 0x70, 0x12, 0x4e, 0x7b, 0x67, 0xcf, 0xff, 0xd7, 0xe5, 0x03, 0x3a, 0x9a, 0x5e, 0xfd,
	0xf5, 0x36, 0x1d, 0x7e, 0x86, 0xe8, 0x1e, 0xd2, 0xc7, 0xd0, 0xb5, 0x52, 0xba, 0x85, 0xe7, 0x19,
	0x26, 0x3f, 0x62, 0x51, 0xc5, 0x2f, 0x78, 0x46, 0x07, 0x10, 0x28, 0x8b, 0x89, 0x0f, 0x59, 0xa0,
	0x2c, 0xa5, 0xb0, 0xa7, 0xec, 0xd5, 0xeb, 0x38, 0x44, 0x05, 0x71, 0xa5, 0x59, 0xe3, 0x7c, 0xbc,
	0x37, 0x21, 0xd3, 0x7d, 0x86, 0xf8, 0xcd, 0xd1, 0xed, 0xf5, 0xb8, 0xf3, 0xed, 0x66, 0xdc, 0xf9,
	0x7e, 0x33, 0xee, 0x0c, 0xaf, 0x09, 0xf4, 0x5b, 0x61, 0x2a, 0x4f, 0xe1, 0x4b, 0x8d, 0xd7, 0x75,
	0x19, 0xe2, 0x87, 0xde, 0x45, 0x87, 0xd0, 0x2d, 0x0b, 0xe9, 0x34, 0x5f, 0xc9, 0x78, 0x1f, 0x6b,
	0xff, 0xf0, 0xea, 0xcc, 0xf2, 0xa2, 0x58, 0x1b, 0x27, 0xe2, 0x83, 0xfa, 0xac, 0xe1, 0xed, 0x8c,
	0x6d, 0x76, 0xf2, 0x95, 0xc0, 0xf1, 0xcc, 0x49, 0xee, 0xe5, 0xf9, 0xa5, 0xd1, 0xb2, 0xfa, 0x59,
	0xcc, 0xd7, 0x8c, 0x36, 0x50, 0xa2, 0xfa, 0x36, 0x2e, 0x56, 0x4a, 0x57, 0x03, 0x0f, 0x50, 0x8d,
	0x90, 0xcf, 0x05, 0x7d, 0x06, 0x03, 0xcb, 0x9d, 0x57, 0xa9, 0xb2, 0xbc, 0xde, 0x88, 0x10, 0x0b,
	0xfa, 0x5b, 0xea, 0x5c, 0xd0, 0x18, 0xa2, 0x2b, 0xe9, 0x0a, 0x65, 0x34, 0x3e, 0xe8, 0x90, 0x35,
	0x74, 0x27, 0xcd, 0x4b, 0x78, 0xf4, 0x5e, 0x15, 0x29, 0x77, 0xe2, 0x9f, 0x69, 0xda, 0x8e, 0x77,
	0x4f, 0x7e, 0xdd, 0x8d, 0xc8, 0x8f, 0xcd, 0x88, 0xdc, 0x6e, 0x46, 0xe4, 0xe7, 0x66, 0x44, 0x3e,
	0x6e, 0x2d, 0xfc, 0xf2, 0x00, 0x17, 0xf9, 0xd5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0x32,
	0xe8, 0x61, 0x12, 0x03, 0x00, 0x00,
}

func (this *CallConnections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc_client.CallConnections{")
	s = append(s, "EndpointId: "+fmt.Sprintf("%#v", this.EndpointId)+",\n")
	if this.Connect != nil {
		s = append(s, "Connect: "+fmt.Sprintf("%#v", this.Connect)+",\n")
	}
	if this.WebRTCConnect != nil {
		s = append(s, "WebRTCConnect: "+fmt.Sprintf("%#v", this.WebRTCConnect)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallConnections_Connect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rpc_client.CallConnections_Connect{")
	s = append(s, "PeerTag: "+fmt.Sprintf("%#v", this.PeerTag)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallConnections_WebRTCConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&rpc_client.CallConnections_WebRTCConnect{")
	s = append(s, "Stun: "+fmt.Sprintf("%#v", this.Stun)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ipv6: "+fmt.Sprintf("%#v", this.Ipv6)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rpc_client.CreatePhoneCall{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AdminId: "+fmt.Sprintf("%#v", this.AdminId)+",\n")
	s = append(s, "ParticipantId: "+fmt.Sprintf("%#v", this.ParticipantId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscardPhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc_client.DiscardPhoneCall{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRelay(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CallConnections) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallConnections) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallConnections) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WebRTCConnect) > 0 {
		for iNdEx := len(m.WebRTCConnect) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WebRTCConnect[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelay(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Connect != nil {
		{
			size, err := m.Connect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EndpointId != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.EndpointId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallConnections_Connect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallConnections_Connect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallConnections_Connect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ipv6) > 0 {
		i -= len(m.Ipv6)
		copy(dAtA[i:], m.Ipv6)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Ipv6)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeerTag) > 0 {
		i -= len(m.PeerTag)
		copy(dAtA[i:], m.PeerTag)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.PeerTag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallConnections_WebRTCConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallConnections_WebRTCConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallConnections_WebRTCConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Port != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ipv6) > 0 {
		i -= len(m.Ipv6)
		copy(dAtA[i:], m.Ipv6)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Ipv6)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if m.Stun {
		i--
		if m.Stun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePhoneCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePhoneCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePhoneCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if m.ParticipantId != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.ParticipantId))
		i--
		dAtA[i] = 0x18
	}
	if m.AdminId != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.AdminId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DiscardPhoneCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscardPhoneCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscardPhoneCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelay(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallConnections) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndpointId != 0 {
		n += 1 + sovRelay(uint64(m.EndpointId))
	}
	if m.Connect != nil {
		l = m.Connect.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if len(m.WebRTCConnect) > 0 {
		for _, e := range m.WebRTCConnect {
			l = e.Size()
			n += 1 + l + sovRelay(uint64(l))
		}
	}
	return n
}

func (m *CallConnections_Connect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeerTag)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRelay(uint64(m.Port))
	}
	return n
}

func (m *CallConnections_WebRTCConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stun {
		n += 2
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Ipv6)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRelay(uint64(m.Port))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *CreatePhoneCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRelay(uint64(m.Id))
	}
	if m.AdminId != 0 {
		n += 1 + sovRelay(uint64(m.AdminId))
	}
	if m.ParticipantId != 0 {
		n += 1 + sovRelay(uint64(m.ParticipantId))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *DiscardPhoneCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRelay(uint64(m.Id))
	}
	return n
}

func sovRelay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelay(x uint64) (n int) {
	return sovRelay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallConnections) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallConnections: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallConnections: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointId", wireType)
			}
			m.EndpointId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndpointId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connect == nil {
				m.Connect = &CallConnections_Connect{}
			}
			if err := m.Connect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebRTCConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebRTCConnect = append(m.WebRTCConnect, &CallConnections_WebRTCConnect{})
			if err := m.WebRTCConnect[len(m.WebRTCConnect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallConnections_Connect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Connect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Connect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerTag", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerTag = append(m.PeerTag[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerTag == nil {
				m.PeerTag = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallConnections_WebRTCConnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebRTCConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebRTCConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stun = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePhoneCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePhoneCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePhoneCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			m.ParticipantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscardPhoneCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscardPhoneCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscardPhoneCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelay = fmt.Errorf("proto: unexpected end of group")
)
