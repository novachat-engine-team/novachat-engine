// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auth_service.proto

package rpc_client

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("auth_service.proto", fileDescriptor_0f39bb026ca10b68) }

var fileDescriptor_0f39bb026ca10b68 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x9b, 0xc5, 0xbd, 0x5c, 0xa6, 0x5c, 0xb1, 0xd3, 0x52, 0x69, 0x5a, 0xb3, 0x28, 0x6e,
	0x4d, 0x41, 0x71, 0xa5, 0x20, 0x6d, 0x15, 0x94, 0xea, 0x26, 0xb5, 0x08, 0xba, 0x28, 0xf9, 0x73,
	0x9a, 0x0c, 0xb4, 0x33, 0xf9, 0x33, 0x11, 0xf2, 0x86, 0xee, 0xf4, 0x11, 0xb4, 0x4f, 0xe0, 0x23,
	0x48, 0x26, 0x89, 0x4d, 0x43, 0xc7, 0xdd, 0xcc, 0xf9, 0xce, 0xef, 0xfb, 0x4e, 0x4e, 0x12, 0x84,
	0xcd, 0x98, 0x7b, 0xf3, 0x08, 0xc2, 0x17, 0x62, 0x83, 0xee, 0x87, 0x8c, 0x33, 0x8c, 0x42, 0xdf,
	0x9e, 0xdb, 0x4b, 0x02, 0x94, 0xab, 0xc7, 0x2e, 0xe1, 0x5e, 0x6c, 0xe9, 0x36, 0x5b, 0x0d, 0x5c,
	0xe6, 0xb2, 0x81, 0x68, 0xb1, 0xe2, 0x85, 0xb8, 0x89, 0x8b, 0x38, 0x65, 0xa8, 0xda, 0x71, 0x19,
	0x73, 0x97, 0xb0, 0xe9, 0x32, 0x69, 0x92, 0x4b, 0x28, 0x4d, 0xca, 0xce, 0x27, 0x6f, 0x7f, 0x50,
	0x7d, 0x18, 0x73, 0x6f, 0x9a, 0xe5, 0xe2, 0x6b, 0xb4, 0x6f, 0x40, 0x30, 0xf3, 0x1d, 0x93, 0x43,
	0x5a, 0x9f, 0x40, 0x82, 0x3b, 0xfa, 0x66, 0x0c, 0x7d, 0x4b, 0x52, 0x5b, 0x7a, 0x16, 0xa3, 0x17,
	0x31, 0xfa, 0x90, 0x26, 0xfd, 0x1a, 0xbe, 0x40, 0xc8, 0x80, 0xa0, 0x30, 0x68, 0x96, 0x0d, 0x0a,
	0xf4, 0x60, 0x47, 0xf1, 0x96, 0x2e, 0x58, 0xbf, 0x86, 0x27, 0xa8, 0xb9, 0xa1, 0x1f, 0x09, 0xf7,
	0xee, 0xcc, 0x04, 0x42, 0xdc, 0xdb, 0x41, 0xfc, 0xa8, 0xd2, 0x51, 0x9e, 0x51, 0xd7, 0x80, 0x60,
	0x44, 0xa8, 0xf3, 0x00, 0x2b, 0x3f, 0xc7, 0x8a, 0x3c, 0x07, 0x1f, 0x95, 0x4d, 0x65, 0x5d, 0x52,
	0xf3, 0x4b, 0xf4, 0x3f, 0x37, 0x07, 0x67, 0x16, 0x41, 0x88, 0xdb, 0x55, 0xbb, 0xac, 0x2e, 0x35,
	0x38, 0x47, 0xf5, 0xdc, 0x40, 0xe0, 0xad, 0x2a, 0xfe, 0x2b, 0x7c, 0x83, 0xf6, 0xd2, 0x97, 0x15,
	0x41, 0x38, 0x85, 0x28, 0x22, 0x8c, 0xe2, 0xad, 0xa5, 0x96, 0x04, 0xb5, 0x2b, 0x11, 0xf2, 0x8d,
	0x8f, 0x51, 0xc3, 0x80, 0xc0, 0x00, 0x97, 0x44, 0x1c, 0xc2, 0x2b, 0x10, 0xdf, 0x42, 0xbb, 0xca,
	0x64, 0x75, 0xe9, 0x38, 0x67, 0xe8, 0x9f, 0x01, 0xc1, 0x78, 0xc9, 0x22, 0xc0, 0x8d, 0x32, 0x2b,
	0x4a, 0x52, 0xec, 0x1e, 0xb5, 0xd2, 0xa7, 0xa0, 0x16, 0xa1, 0x4e, 0xbe, 0x71, 0xb1, 0x8b, 0xc3,
	0xad, 0xf8, 0xaa, 0x2c, 0xb3, 0x1b, 0xf5, 0xbe, 0x3e, 0x35, 0xe5, 0x75, 0xad, 0x29, 0xef, 0x6b,
	0x4d, 0xf9, 0x58, 0x6b, 0xca, 0x53, 0xe9, 0x2f, 0xb2, 0xfe, 0x8a, 0xee, 0xd3, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xff, 0x53, 0xb8, 0x25, 0x6e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	ReqUpdateAuthKey(ctx context.Context, in *UpdateAuthKey, opts ...grpc.CallOption) (*types.Any, error)
	ReqAuthKey(ctx context.Context, in *AuthKey, opts ...grpc.CallOption) (*AuthKeyInfo, error)
	ReqAuthKeyWithLayer(ctx context.Context, in *AuthKeyWithLayer, opts ...grpc.CallOption) (*types.Any, error)
	ReqBindTempAuthKeyAuthKeyId(ctx context.Context, in *BindTempAuthKeyAuthKeyId, opts ...grpc.CallOption) (*types.Any, error)
	ReqBindedUser(ctx context.Context, in *BindedUser, opts ...grpc.CallOption) (*types.Any, error)
	ReqBindUser(ctx context.Context, in *BindUser, opts ...grpc.CallOption) (*types.Any, error)
	ReqUserSession(ctx context.Context, in *UserSession, opts ...grpc.CallOption) (*UserSessionInfo, error)
	ReqRegisterDevice(ctx context.Context, in *UserDevice, opts ...grpc.CallOption) (*types.Any, error)
	ReqClose(ctx context.Context, in *Close, opts ...grpc.CallOption) (*types.Any, error)
	ReqUnbindAuthKeyUser(ctx context.Context, in *UnbindAuthKeyUser, opts ...grpc.CallOption) (*types.Any, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) ReqUpdateAuthKey(ctx context.Context, in *UpdateAuthKey, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqUpdateAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqAuthKey(ctx context.Context, in *AuthKey, opts ...grpc.CallOption) (*AuthKeyInfo, error) {
	out := new(AuthKeyInfo)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqAuthKeyWithLayer(ctx context.Context, in *AuthKeyWithLayer, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqAuthKeyWithLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqBindTempAuthKeyAuthKeyId(ctx context.Context, in *BindTempAuthKeyAuthKeyId, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqBindTempAuthKeyAuthKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqBindedUser(ctx context.Context, in *BindedUser, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqBindedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqBindUser(ctx context.Context, in *BindUser, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqBindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqUserSession(ctx context.Context, in *UserSession, opts ...grpc.CallOption) (*UserSessionInfo, error) {
	out := new(UserSessionInfo)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqRegisterDevice(ctx context.Context, in *UserDevice, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqRegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqClose(ctx context.Context, in *Close, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ReqUnbindAuthKeyUser(ctx context.Context, in *UnbindAuthKeyUser, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/rpc_client.AuthService/ReqUnbindAuthKeyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	ReqUpdateAuthKey(context.Context, *UpdateAuthKey) (*types.Any, error)
	ReqAuthKey(context.Context, *AuthKey) (*AuthKeyInfo, error)
	ReqAuthKeyWithLayer(context.Context, *AuthKeyWithLayer) (*types.Any, error)
	ReqBindTempAuthKeyAuthKeyId(context.Context, *BindTempAuthKeyAuthKeyId) (*types.Any, error)
	ReqBindedUser(context.Context, *BindedUser) (*types.Any, error)
	ReqBindUser(context.Context, *BindUser) (*types.Any, error)
	ReqUserSession(context.Context, *UserSession) (*UserSessionInfo, error)
	ReqRegisterDevice(context.Context, *UserDevice) (*types.Any, error)
	ReqClose(context.Context, *Close) (*types.Any, error)
	ReqUnbindAuthKeyUser(context.Context, *UnbindAuthKeyUser) (*types.Any, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) ReqUpdateAuthKey(ctx context.Context, req *UpdateAuthKey) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqUpdateAuthKey not implemented")
}
func (*UnimplementedAuthServiceServer) ReqAuthKey(ctx context.Context, req *AuthKey) (*AuthKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqAuthKey not implemented")
}
func (*UnimplementedAuthServiceServer) ReqAuthKeyWithLayer(ctx context.Context, req *AuthKeyWithLayer) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqAuthKeyWithLayer not implemented")
}
func (*UnimplementedAuthServiceServer) ReqBindTempAuthKeyAuthKeyId(ctx context.Context, req *BindTempAuthKeyAuthKeyId) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqBindTempAuthKeyAuthKeyId not implemented")
}
func (*UnimplementedAuthServiceServer) ReqBindedUser(ctx context.Context, req *BindedUser) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqBindedUser not implemented")
}
func (*UnimplementedAuthServiceServer) ReqBindUser(ctx context.Context, req *BindUser) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqBindUser not implemented")
}
func (*UnimplementedAuthServiceServer) ReqUserSession(ctx context.Context, req *UserSession) (*UserSessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqUserSession not implemented")
}
func (*UnimplementedAuthServiceServer) ReqRegisterDevice(ctx context.Context, req *UserDevice) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqRegisterDevice not implemented")
}
func (*UnimplementedAuthServiceServer) ReqClose(ctx context.Context, req *Close) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqClose not implemented")
}
func (*UnimplementedAuthServiceServer) ReqUnbindAuthKeyUser(ctx context.Context, req *UnbindAuthKeyUser) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqUnbindAuthKeyUser not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_ReqUpdateAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqUpdateAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqUpdateAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqUpdateAuthKey(ctx, req.(*UpdateAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqAuthKey(ctx, req.(*AuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqAuthKeyWithLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKeyWithLayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqAuthKeyWithLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqAuthKeyWithLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqAuthKeyWithLayer(ctx, req.(*AuthKeyWithLayer))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqBindTempAuthKeyAuthKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindTempAuthKeyAuthKeyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqBindTempAuthKeyAuthKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqBindTempAuthKeyAuthKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqBindTempAuthKeyAuthKeyId(ctx, req.(*BindTempAuthKeyAuthKeyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqBindedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindedUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqBindedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqBindedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqBindedUser(ctx, req.(*BindedUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqBindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqBindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqBindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqBindUser(ctx, req.(*BindUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqUserSession(ctx, req.(*UserSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqRegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqRegisterDevice(ctx, req.(*UserDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Close)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqClose(ctx, req.(*Close))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ReqUnbindAuthKeyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindAuthKeyUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ReqUnbindAuthKeyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc_client.AuthService/ReqUnbindAuthKeyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ReqUnbindAuthKeyUser(ctx, req.(*UnbindAuthKeyUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_client.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqUpdateAuthKey",
			Handler:    _AuthService_ReqUpdateAuthKey_Handler,
		},
		{
			MethodName: "ReqAuthKey",
			Handler:    _AuthService_ReqAuthKey_Handler,
		},
		{
			MethodName: "ReqAuthKeyWithLayer",
			Handler:    _AuthService_ReqAuthKeyWithLayer_Handler,
		},
		{
			MethodName: "ReqBindTempAuthKeyAuthKeyId",
			Handler:    _AuthService_ReqBindTempAuthKeyAuthKeyId_Handler,
		},
		{
			MethodName: "ReqBindedUser",
			Handler:    _AuthService_ReqBindedUser_Handler,
		},
		{
			MethodName: "ReqBindUser",
			Handler:    _AuthService_ReqBindUser_Handler,
		},
		{
			MethodName: "ReqUserSession",
			Handler:    _AuthService_ReqUserSession_Handler,
		},
		{
			MethodName: "ReqRegisterDevice",
			Handler:    _AuthService_ReqRegisterDevice_Handler,
		},
		{
			MethodName: "ReqClose",
			Handler:    _AuthService_ReqClose_Handler,
		},
		{
			MethodName: "ReqUnbindAuthKeyUser",
			Handler:    _AuthService_ReqUnbindAuthKeyUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}

var AuthService_serviceDesc = map[string][]interface{}{
	"UpdateAuthKey": {
		"/rpc_client.AuthService/ReqUpdateAuthKey",
		func() interface{} { return new(types.Any) },
		"ReqUpdateAuthKey",
	},
	"AuthKey": {
		"/rpc_client.AuthService/ReqAuthKey",
		func() interface{} { return new(AuthKeyInfo) },
		"ReqAuthKey",
	},
	"AuthKeyWithLayer": {
		"/rpc_client.AuthService/ReqAuthKeyWithLayer",
		func() interface{} { return new(types.Any) },
		"ReqAuthKeyWithLayer",
	},
	"BindTempAuthKeyAuthKeyId": {
		"/rpc_client.AuthService/ReqBindTempAuthKeyAuthKeyId",
		func() interface{} { return new(types.Any) },
		"ReqBindTempAuthKeyAuthKeyId",
	},
	"BindedUser": {
		"/rpc_client.AuthService/ReqBindedUser",
		func() interface{} { return new(types.Any) },
		"ReqBindedUser",
	},
	"BindUser": {
		"/rpc_client.AuthService/ReqBindUser",
		func() interface{} { return new(types.Any) },
		"ReqBindUser",
	},
	"UserSession": {
		"/rpc_client.AuthService/ReqUserSession",
		func() interface{} { return new(UserSessionInfo) },
		"ReqUserSession",
	},
	"UserDevice": {
		"/rpc_client.AuthService/ReqRegisterDevice",
		func() interface{} { return new(types.Any) },
		"ReqRegisterDevice",
	},
	"Close": {
		"/rpc_client.AuthService/ReqClose",
		func() interface{} { return new(types.Any) },
		"ReqClose",
	},
	"UnbindAuthKeyUser": {
		"/rpc_client.AuthService/ReqUnbindAuthKeyUser",
		func() interface{} { return new(types.Any) },
		"ReqUnbindAuthKeyUser",
	},
}
